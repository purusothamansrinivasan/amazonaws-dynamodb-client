/*
 * Amazon DynamoDB
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database, so that you don't have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.</p> <p>With DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic. You can scale up or scale down your tables' throughput capacity without downtime or performance degradation, and use the Amazon Web Services Management Console to monitor resource utilization and performance metrics.</p> <p>DynamoDB automatically spreads the data and traffic for your tables over a sufficient number of servers to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and automatically replicated across multiple Availability Zones in an Amazon Web Services Region, providing built-in high availability and data durability.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BatchExecuteStatementInput;
import org.openapitools.client.model.BatchExecuteStatementOutput;
import org.openapitools.client.model.BatchGetItemInput;
import org.openapitools.client.model.BatchGetItemOutput;
import org.openapitools.client.model.BatchWriteItemInput;
import org.openapitools.client.model.BatchWriteItemOutput;
import org.openapitools.client.model.CreateBackupInput;
import org.openapitools.client.model.CreateBackupOutput;
import org.openapitools.client.model.CreateGlobalTableInput;
import org.openapitools.client.model.CreateGlobalTableOutput;
import org.openapitools.client.model.CreateTableInput;
import org.openapitools.client.model.CreateTableOutput;
import org.openapitools.client.model.DeleteBackupInput;
import org.openapitools.client.model.DeleteBackupOutput;
import org.openapitools.client.model.DeleteItemInput;
import org.openapitools.client.model.DeleteItemOutput;
import org.openapitools.client.model.DeleteTableInput;
import org.openapitools.client.model.DeleteTableOutput;
import org.openapitools.client.model.DescribeBackupInput;
import org.openapitools.client.model.DescribeBackupOutput;
import org.openapitools.client.model.DescribeContinuousBackupsInput;
import org.openapitools.client.model.DescribeContinuousBackupsOutput;
import org.openapitools.client.model.DescribeContributorInsightsInput;
import org.openapitools.client.model.DescribeContributorInsightsOutput;
import org.openapitools.client.model.DescribeEndpointsResponse;
import org.openapitools.client.model.DescribeExportInput;
import org.openapitools.client.model.DescribeExportOutput;
import org.openapitools.client.model.DescribeGlobalTableInput;
import org.openapitools.client.model.DescribeGlobalTableOutput;
import org.openapitools.client.model.DescribeGlobalTableSettingsInput;
import org.openapitools.client.model.DescribeGlobalTableSettingsOutput;
import org.openapitools.client.model.DescribeImportInput;
import org.openapitools.client.model.DescribeImportOutput;
import org.openapitools.client.model.DescribeKinesisStreamingDestinationInput;
import org.openapitools.client.model.DescribeKinesisStreamingDestinationOutput;
import org.openapitools.client.model.DescribeLimitsOutput;
import org.openapitools.client.model.DescribeTableInput;
import org.openapitools.client.model.DescribeTableOutput;
import org.openapitools.client.model.DescribeTableReplicaAutoScalingInput;
import org.openapitools.client.model.DescribeTableReplicaAutoScalingOutput;
import org.openapitools.client.model.DescribeTimeToLiveInput;
import org.openapitools.client.model.DescribeTimeToLiveOutput;
import org.openapitools.client.model.ExecuteStatementInput;
import org.openapitools.client.model.ExecuteStatementOutput;
import org.openapitools.client.model.ExecuteTransactionInput;
import org.openapitools.client.model.ExecuteTransactionOutput;
import org.openapitools.client.model.ExportTableToPointInTimeInput;
import org.openapitools.client.model.ExportTableToPointInTimeOutput;
import org.openapitools.client.model.GetItemInput;
import org.openapitools.client.model.GetItemOutput;
import org.openapitools.client.model.ImportTableInput;
import org.openapitools.client.model.ImportTableOutput;
import org.openapitools.client.model.KinesisStreamingDestinationInput;
import org.openapitools.client.model.KinesisStreamingDestinationOutput;
import org.openapitools.client.model.ListBackupsInput;
import org.openapitools.client.model.ListBackupsOutput;
import org.openapitools.client.model.ListContributorInsightsInput;
import org.openapitools.client.model.ListContributorInsightsOutput;
import org.openapitools.client.model.ListExportsInput;
import org.openapitools.client.model.ListExportsOutput;
import org.openapitools.client.model.ListGlobalTablesInput;
import org.openapitools.client.model.ListGlobalTablesOutput;
import org.openapitools.client.model.ListImportsInput;
import org.openapitools.client.model.ListImportsOutput;
import org.openapitools.client.model.ListTablesInput;
import org.openapitools.client.model.ListTablesOutput;
import org.openapitools.client.model.ListTagsOfResourceInput;
import org.openapitools.client.model.ListTagsOfResourceOutput;
import org.openapitools.client.model.PutItemInput;
import org.openapitools.client.model.PutItemOutput;
import org.openapitools.client.model.QueryInput;
import org.openapitools.client.model.QueryOutput;
import org.openapitools.client.model.RestoreTableFromBackupInput;
import org.openapitools.client.model.RestoreTableFromBackupOutput;
import org.openapitools.client.model.RestoreTableToPointInTimeInput;
import org.openapitools.client.model.RestoreTableToPointInTimeOutput;
import org.openapitools.client.model.ScanInput;
import org.openapitools.client.model.ScanOutput;
import org.openapitools.client.model.TagResourceInput;
import org.openapitools.client.model.TransactGetItemsInput;
import org.openapitools.client.model.TransactGetItemsOutput;
import org.openapitools.client.model.TransactWriteItemsInput;
import org.openapitools.client.model.TransactWriteItemsOutput;
import org.openapitools.client.model.UntagResourceInput;
import org.openapitools.client.model.UpdateContinuousBackupsInput;
import org.openapitools.client.model.UpdateContinuousBackupsOutput;
import org.openapitools.client.model.UpdateContributorInsightsInput;
import org.openapitools.client.model.UpdateContributorInsightsOutput;
import org.openapitools.client.model.UpdateGlobalTableInput;
import org.openapitools.client.model.UpdateGlobalTableOutput;
import org.openapitools.client.model.UpdateGlobalTableSettingsInput;
import org.openapitools.client.model.UpdateGlobalTableSettingsOutput;
import org.openapitools.client.model.UpdateItemInput;
import org.openapitools.client.model.UpdateItemOutput;
import org.openapitools.client.model.UpdateTableInput;
import org.openapitools.client.model.UpdateTableOutput;
import org.openapitools.client.model.UpdateTableReplicaAutoScalingInput;
import org.openapitools.client.model.UpdateTableReplicaAutoScalingOutput;
import org.openapitools.client.model.UpdateTimeToLiveInput;
import org.openapitools.client.model.UpdateTimeToLiveOutput;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for batchExecuteStatement
     * @param xAmzTarget  (required)
     * @param batchExecuteStatementInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RequestLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call batchExecuteStatementCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull BatchExecuteStatementInput batchExecuteStatementInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = batchExecuteStatementInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=DynamoDB_20120810.BatchExecuteStatement";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }


        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }


        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }


        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }


        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }


        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }


        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }


        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }


        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call batchExecuteStatementValidateBeforeCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull BatchExecuteStatementInput batchExecuteStatementInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling batchExecuteStatement(Async)");
        }

        // verify the required parameter 'batchExecuteStatementInput' is set
        if (batchExecuteStatementInput == null) {
            throw new ApiException("Missing the required parameter 'batchExecuteStatementInput' when calling batchExecuteStatement(Async)");
        }

        return batchExecuteStatementCall(xAmzTarget, batchExecuteStatementInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;This operation allows you to perform batch reads or writes on data stored in DynamoDB, using PartiQL. Each read statement in a &lt;code&gt;BatchExecuteStatement&lt;/code&gt; must specify an equality condition on all key attributes. This enforces that each &lt;code&gt;SELECT&lt;/code&gt; statement in a batch returns at most a single item.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The entire batch must consist of either read statements or write statements, you cannot mix both in one batch.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt;A HTTP 200 response does not mean that all statements in the BatchExecuteStatement succeeded. Error details for individual statements can be found under the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_BatchStatementResponse.html#DDB-Type-BatchStatementResponse-Error\&quot;&gt;Error&lt;/a&gt; field of the &lt;code&gt;BatchStatementResponse&lt;/code&gt; for each statement.&lt;/p&gt; &lt;/important&gt;
     * @param xAmzTarget  (required)
     * @param batchExecuteStatementInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return BatchExecuteStatementOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RequestLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public BatchExecuteStatementOutput batchExecuteStatement(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull BatchExecuteStatementInput batchExecuteStatementInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders) throws ApiException {
        ApiResponse<BatchExecuteStatementOutput> localVarResp = batchExecuteStatementWithHttpInfo(xAmzTarget, batchExecuteStatementInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;This operation allows you to perform batch reads or writes on data stored in DynamoDB, using PartiQL. Each read statement in a &lt;code&gt;BatchExecuteStatement&lt;/code&gt; must specify an equality condition on all key attributes. This enforces that each &lt;code&gt;SELECT&lt;/code&gt; statement in a batch returns at most a single item.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The entire batch must consist of either read statements or write statements, you cannot mix both in one batch.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt;A HTTP 200 response does not mean that all statements in the BatchExecuteStatement succeeded. Error details for individual statements can be found under the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_BatchStatementResponse.html#DDB-Type-BatchStatementResponse-Error\&quot;&gt;Error&lt;/a&gt; field of the &lt;code&gt;BatchStatementResponse&lt;/code&gt; for each statement.&lt;/p&gt; &lt;/important&gt;
     * @param xAmzTarget  (required)
     * @param batchExecuteStatementInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;BatchExecuteStatementOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RequestLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BatchExecuteStatementOutput> batchExecuteStatementWithHttpInfo(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull BatchExecuteStatementInput batchExecuteStatementInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = batchExecuteStatementValidateBeforeCall(xAmzTarget, batchExecuteStatementInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<BatchExecuteStatementOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;This operation allows you to perform batch reads or writes on data stored in DynamoDB, using PartiQL. Each read statement in a &lt;code&gt;BatchExecuteStatement&lt;/code&gt; must specify an equality condition on all key attributes. This enforces that each &lt;code&gt;SELECT&lt;/code&gt; statement in a batch returns at most a single item.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The entire batch must consist of either read statements or write statements, you cannot mix both in one batch.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt;A HTTP 200 response does not mean that all statements in the BatchExecuteStatement succeeded. Error details for individual statements can be found under the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_BatchStatementResponse.html#DDB-Type-BatchStatementResponse-Error\&quot;&gt;Error&lt;/a&gt; field of the &lt;code&gt;BatchStatementResponse&lt;/code&gt; for each statement.&lt;/p&gt; &lt;/important&gt;
     * @param xAmzTarget  (required)
     * @param batchExecuteStatementInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RequestLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call batchExecuteStatementAsync(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull BatchExecuteStatementInput batchExecuteStatementInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback<BatchExecuteStatementOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = batchExecuteStatementValidateBeforeCall(xAmzTarget, batchExecuteStatementInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<BatchExecuteStatementOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for batchGetItem
     * @param xAmzTarget  (required)
     * @param batchGetItemInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param requestItems Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ProvisionedThroughputExceededException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RequestLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call batchGetItemCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull BatchGetItemInput batchGetItemInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, @javax.annotation.Nullable String requestItems, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = batchGetItemInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=DynamoDB_20120810.BatchGetItem";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (requestItems != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("RequestItems", requestItems));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }


        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }


        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }


        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }


        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }


        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }


        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }


        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }


        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call batchGetItemValidateBeforeCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull BatchGetItemInput batchGetItemInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, @javax.annotation.Nullable String requestItems, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling batchGetItem(Async)");
        }

        // verify the required parameter 'batchGetItemInput' is set
        if (batchGetItemInput == null) {
            throw new ApiException("Missing the required parameter 'batchGetItemInput' when calling batchGetItem(Async)");
        }

        return batchGetItemCall(xAmzTarget, batchGetItemInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, requestItems, _callback);

    }

    /**
     * 
     * &lt;p&gt;The &lt;code&gt;BatchGetItem&lt;/code&gt; operation returns the attributes of one or more items from one or more tables. You identify requested items by primary key.&lt;/p&gt; &lt;p&gt;A single operation can retrieve up to 16 MB of data, which can contain as many as 100 items. &lt;code&gt;BatchGetItem&lt;/code&gt; returns a partial result if the response size limit is exceeded, the table&#39;s provisioned throughput is exceeded, more than 1MB per partition is requested, or an internal processing failure occurs. If a partial result is returned, the operation returns a value for &lt;code&gt;UnprocessedKeys&lt;/code&gt;. You can use this value to retry the operation starting with the next item to get.&lt;/p&gt; &lt;important&gt; &lt;p&gt;If you request more than 100 items, &lt;code&gt;BatchGetItem&lt;/code&gt; returns a &lt;code&gt;ValidationException&lt;/code&gt; with the message \&quot;Too many items requested for the BatchGetItem call.\&quot;&lt;/p&gt; &lt;/important&gt; &lt;p&gt;For example, if you ask to retrieve 100 items, but each individual item is 300 KB in size, the system returns 52 items (so as not to exceed the 16 MB limit). It also returns an appropriate &lt;code&gt;UnprocessedKeys&lt;/code&gt; value so you can get the next page of results. If desired, your application can include its own logic to assemble the pages of results into one dataset.&lt;/p&gt; &lt;p&gt;If &lt;i&gt;none&lt;/i&gt; of the items can be processed due to insufficient provisioned throughput on all of the tables in the request, then &lt;code&gt;BatchGetItem&lt;/code&gt; returns a &lt;code&gt;ProvisionedThroughputExceededException&lt;/code&gt;. If &lt;i&gt;at least one&lt;/i&gt; of the items is successfully processed, then &lt;code&gt;BatchGetItem&lt;/code&gt; completes successfully, while returning the keys of the unread items in &lt;code&gt;UnprocessedKeys&lt;/code&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt;If DynamoDB returns any unprocessed items, you should retry the batch operation on those items. However, &lt;i&gt;we strongly recommend that you use an exponential backoff algorithm&lt;/i&gt;. If you retry the batch operation immediately, the underlying read or write requests can still fail due to throttling on the individual tables. If you delay the batch operation using exponential backoff, the individual requests in the batch are much more likely to succeed.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ErrorHandling.html#BatchOperations\&quot;&gt;Batch Operations and Error Handling&lt;/a&gt; in the &lt;i&gt;Amazon DynamoDB Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;By default, &lt;code&gt;BatchGetItem&lt;/code&gt; performs eventually consistent reads on every table in the request. If you want strongly consistent reads instead, you can set &lt;code&gt;ConsistentRead&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; for any or all tables.&lt;/p&gt; &lt;p&gt;In order to minimize response latency, &lt;code&gt;BatchGetItem&lt;/code&gt; may retrieve items in parallel.&lt;/p&gt; &lt;p&gt;When designing your application, keep in mind that DynamoDB does not return items in any particular order. To help parse the response by item, include the primary key values for the items in your request in the &lt;code&gt;ProjectionExpression&lt;/code&gt; parameter.&lt;/p&gt; &lt;p&gt;If a requested item does not exist, it is not returned in the result. Requests for nonexistent items consume the minimum read capacity units according to the type of read. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#CapacityUnitCalculations\&quot;&gt;Working with Tables&lt;/a&gt; in the &lt;i&gt;Amazon DynamoDB Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param batchGetItemInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param requestItems Pagination token (optional)
     * @return BatchGetItemOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ProvisionedThroughputExceededException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RequestLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public BatchGetItemOutput batchGetItem(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull BatchGetItemInput batchGetItemInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, @javax.annotation.Nullable String requestItems) throws ApiException {
        ApiResponse<BatchGetItemOutput> localVarResp = batchGetItemWithHttpInfo(xAmzTarget, batchGetItemInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, requestItems);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;The &lt;code&gt;BatchGetItem&lt;/code&gt; operation returns the attributes of one or more items from one or more tables. You identify requested items by primary key.&lt;/p&gt; &lt;p&gt;A single operation can retrieve up to 16 MB of data, which can contain as many as 100 items. &lt;code&gt;BatchGetItem&lt;/code&gt; returns a partial result if the response size limit is exceeded, the table&#39;s provisioned throughput is exceeded, more than 1MB per partition is requested, or an internal processing failure occurs. If a partial result is returned, the operation returns a value for &lt;code&gt;UnprocessedKeys&lt;/code&gt;. You can use this value to retry the operation starting with the next item to get.&lt;/p&gt; &lt;important&gt; &lt;p&gt;If you request more than 100 items, &lt;code&gt;BatchGetItem&lt;/code&gt; returns a &lt;code&gt;ValidationException&lt;/code&gt; with the message \&quot;Too many items requested for the BatchGetItem call.\&quot;&lt;/p&gt; &lt;/important&gt; &lt;p&gt;For example, if you ask to retrieve 100 items, but each individual item is 300 KB in size, the system returns 52 items (so as not to exceed the 16 MB limit). It also returns an appropriate &lt;code&gt;UnprocessedKeys&lt;/code&gt; value so you can get the next page of results. If desired, your application can include its own logic to assemble the pages of results into one dataset.&lt;/p&gt; &lt;p&gt;If &lt;i&gt;none&lt;/i&gt; of the items can be processed due to insufficient provisioned throughput on all of the tables in the request, then &lt;code&gt;BatchGetItem&lt;/code&gt; returns a &lt;code&gt;ProvisionedThroughputExceededException&lt;/code&gt;. If &lt;i&gt;at least one&lt;/i&gt; of the items is successfully processed, then &lt;code&gt;BatchGetItem&lt;/code&gt; completes successfully, while returning the keys of the unread items in &lt;code&gt;UnprocessedKeys&lt;/code&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt;If DynamoDB returns any unprocessed items, you should retry the batch operation on those items. However, &lt;i&gt;we strongly recommend that you use an exponential backoff algorithm&lt;/i&gt;. If you retry the batch operation immediately, the underlying read or write requests can still fail due to throttling on the individual tables. If you delay the batch operation using exponential backoff, the individual requests in the batch are much more likely to succeed.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ErrorHandling.html#BatchOperations\&quot;&gt;Batch Operations and Error Handling&lt;/a&gt; in the &lt;i&gt;Amazon DynamoDB Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;By default, &lt;code&gt;BatchGetItem&lt;/code&gt; performs eventually consistent reads on every table in the request. If you want strongly consistent reads instead, you can set &lt;code&gt;ConsistentRead&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; for any or all tables.&lt;/p&gt; &lt;p&gt;In order to minimize response latency, &lt;code&gt;BatchGetItem&lt;/code&gt; may retrieve items in parallel.&lt;/p&gt; &lt;p&gt;When designing your application, keep in mind that DynamoDB does not return items in any particular order. To help parse the response by item, include the primary key values for the items in your request in the &lt;code&gt;ProjectionExpression&lt;/code&gt; parameter.&lt;/p&gt; &lt;p&gt;If a requested item does not exist, it is not returned in the result. Requests for nonexistent items consume the minimum read capacity units according to the type of read. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#CapacityUnitCalculations\&quot;&gt;Working with Tables&lt;/a&gt; in the &lt;i&gt;Amazon DynamoDB Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param batchGetItemInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param requestItems Pagination token (optional)
     * @return ApiResponse&lt;BatchGetItemOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ProvisionedThroughputExceededException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RequestLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BatchGetItemOutput> batchGetItemWithHttpInfo(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull BatchGetItemInput batchGetItemInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, @javax.annotation.Nullable String requestItems) throws ApiException {
        okhttp3.Call localVarCall = batchGetItemValidateBeforeCall(xAmzTarget, batchGetItemInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, requestItems, null);
        Type localVarReturnType = new TypeToken<BatchGetItemOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;The &lt;code&gt;BatchGetItem&lt;/code&gt; operation returns the attributes of one or more items from one or more tables. You identify requested items by primary key.&lt;/p&gt; &lt;p&gt;A single operation can retrieve up to 16 MB of data, which can contain as many as 100 items. &lt;code&gt;BatchGetItem&lt;/code&gt; returns a partial result if the response size limit is exceeded, the table&#39;s provisioned throughput is exceeded, more than 1MB per partition is requested, or an internal processing failure occurs. If a partial result is returned, the operation returns a value for &lt;code&gt;UnprocessedKeys&lt;/code&gt;. You can use this value to retry the operation starting with the next item to get.&lt;/p&gt; &lt;important&gt; &lt;p&gt;If you request more than 100 items, &lt;code&gt;BatchGetItem&lt;/code&gt; returns a &lt;code&gt;ValidationException&lt;/code&gt; with the message \&quot;Too many items requested for the BatchGetItem call.\&quot;&lt;/p&gt; &lt;/important&gt; &lt;p&gt;For example, if you ask to retrieve 100 items, but each individual item is 300 KB in size, the system returns 52 items (so as not to exceed the 16 MB limit). It also returns an appropriate &lt;code&gt;UnprocessedKeys&lt;/code&gt; value so you can get the next page of results. If desired, your application can include its own logic to assemble the pages of results into one dataset.&lt;/p&gt; &lt;p&gt;If &lt;i&gt;none&lt;/i&gt; of the items can be processed due to insufficient provisioned throughput on all of the tables in the request, then &lt;code&gt;BatchGetItem&lt;/code&gt; returns a &lt;code&gt;ProvisionedThroughputExceededException&lt;/code&gt;. If &lt;i&gt;at least one&lt;/i&gt; of the items is successfully processed, then &lt;code&gt;BatchGetItem&lt;/code&gt; completes successfully, while returning the keys of the unread items in &lt;code&gt;UnprocessedKeys&lt;/code&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt;If DynamoDB returns any unprocessed items, you should retry the batch operation on those items. However, &lt;i&gt;we strongly recommend that you use an exponential backoff algorithm&lt;/i&gt;. If you retry the batch operation immediately, the underlying read or write requests can still fail due to throttling on the individual tables. If you delay the batch operation using exponential backoff, the individual requests in the batch are much more likely to succeed.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ErrorHandling.html#BatchOperations\&quot;&gt;Batch Operations and Error Handling&lt;/a&gt; in the &lt;i&gt;Amazon DynamoDB Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;By default, &lt;code&gt;BatchGetItem&lt;/code&gt; performs eventually consistent reads on every table in the request. If you want strongly consistent reads instead, you can set &lt;code&gt;ConsistentRead&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; for any or all tables.&lt;/p&gt; &lt;p&gt;In order to minimize response latency, &lt;code&gt;BatchGetItem&lt;/code&gt; may retrieve items in parallel.&lt;/p&gt; &lt;p&gt;When designing your application, keep in mind that DynamoDB does not return items in any particular order. To help parse the response by item, include the primary key values for the items in your request in the &lt;code&gt;ProjectionExpression&lt;/code&gt; parameter.&lt;/p&gt; &lt;p&gt;If a requested item does not exist, it is not returned in the result. Requests for nonexistent items consume the minimum read capacity units according to the type of read. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#CapacityUnitCalculations\&quot;&gt;Working with Tables&lt;/a&gt; in the &lt;i&gt;Amazon DynamoDB Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param batchGetItemInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param requestItems Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ProvisionedThroughputExceededException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RequestLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call batchGetItemAsync(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull BatchGetItemInput batchGetItemInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, @javax.annotation.Nullable String requestItems, final ApiCallback<BatchGetItemOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = batchGetItemValidateBeforeCall(xAmzTarget, batchGetItemInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, requestItems, _callback);
        Type localVarReturnType = new TypeToken<BatchGetItemOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for batchWriteItem
     * @param xAmzTarget  (required)
     * @param batchWriteItemInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ProvisionedThroughputExceededException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ItemCollectionSizeLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RequestLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call batchWriteItemCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull BatchWriteItemInput batchWriteItemInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = batchWriteItemInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=DynamoDB_20120810.BatchWriteItem";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }


        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }


        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }


        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }


        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }


        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }


        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }


        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }


        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call batchWriteItemValidateBeforeCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull BatchWriteItemInput batchWriteItemInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling batchWriteItem(Async)");
        }

        // verify the required parameter 'batchWriteItemInput' is set
        if (batchWriteItemInput == null) {
            throw new ApiException("Missing the required parameter 'batchWriteItemInput' when calling batchWriteItem(Async)");
        }

        return batchWriteItemCall(xAmzTarget, batchWriteItemInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;The &lt;code&gt;BatchWriteItem&lt;/code&gt; operation puts or deletes multiple items in one or more tables. A single call to &lt;code&gt;BatchWriteItem&lt;/code&gt; can transmit up to 16MB of data over the network, consisting of up to 25 item put or delete operations. While individual items can be up to 400 KB once stored, it&#39;s important to note that an item&#39;s representation might be greater than 400KB while being sent in DynamoDB&#39;s JSON format for the API call. For more details on this distinction, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html\&quot;&gt;Naming Rules and Data Types&lt;/a&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt; &lt;code&gt;BatchWriteItem&lt;/code&gt; cannot update items. If you perform a &lt;code&gt;BatchWriteItem&lt;/code&gt; operation on an existing item, that item&#39;s values will be overwritten by the operation and it will appear like it was updated. To update items, we recommend you use the &lt;code&gt;UpdateItem&lt;/code&gt; action.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;The individual &lt;code&gt;PutItem&lt;/code&gt; and &lt;code&gt;DeleteItem&lt;/code&gt; operations specified in &lt;code&gt;BatchWriteItem&lt;/code&gt; are atomic; however &lt;code&gt;BatchWriteItem&lt;/code&gt; as a whole is not. If any requested operations fail because the table&#39;s provisioned throughput is exceeded or an internal processing failure occurs, the failed operations are returned in the &lt;code&gt;UnprocessedItems&lt;/code&gt; response parameter. You can investigate and optionally resend the requests. Typically, you would call &lt;code&gt;BatchWriteItem&lt;/code&gt; in a loop. Each iteration would check for unprocessed items and submit a new &lt;code&gt;BatchWriteItem&lt;/code&gt; request with those unprocessed items until all items have been processed.&lt;/p&gt; &lt;p&gt;If &lt;i&gt;none&lt;/i&gt; of the items can be processed due to insufficient provisioned throughput on all of the tables in the request, then &lt;code&gt;BatchWriteItem&lt;/code&gt; returns a &lt;code&gt;ProvisionedThroughputExceededException&lt;/code&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt;If DynamoDB returns any unprocessed items, you should retry the batch operation on those items. However, &lt;i&gt;we strongly recommend that you use an exponential backoff algorithm&lt;/i&gt;. If you retry the batch operation immediately, the underlying read or write requests can still fail due to throttling on the individual tables. If you delay the batch operation using exponential backoff, the individual requests in the batch are much more likely to succeed.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ErrorHandling.html#Programming.Errors.BatchOperations\&quot;&gt;Batch Operations and Error Handling&lt;/a&gt; in the &lt;i&gt;Amazon DynamoDB Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;With &lt;code&gt;BatchWriteItem&lt;/code&gt;, you can efficiently write or delete large amounts of data, such as from Amazon EMR, or copy data from another database into DynamoDB. In order to improve performance with these large-scale operations, &lt;code&gt;BatchWriteItem&lt;/code&gt; does not behave in the same way as individual &lt;code&gt;PutItem&lt;/code&gt; and &lt;code&gt;DeleteItem&lt;/code&gt; calls would. For example, you cannot specify conditions on individual put and delete requests, and &lt;code&gt;BatchWriteItem&lt;/code&gt; does not return deleted items in the response.&lt;/p&gt; &lt;p&gt;If you use a programming language that supports concurrency, you can use threads to write items in parallel. Your application must include the necessary logic to manage the threads. With languages that don&#39;t support threading, you must update or delete the specified items one at a time. In both situations, &lt;code&gt;BatchWriteItem&lt;/code&gt; performs the specified put and delete operations in parallel, giving you the power of the thread pool approach without having to introduce complexity into your application.&lt;/p&gt; &lt;p&gt;Parallel processing reduces latency, but each specified put and delete request consumes the same number of write capacity units whether it is processed in parallel or not. Delete operations on nonexistent items consume one write capacity unit.&lt;/p&gt; &lt;p&gt;If one or more of the following is true, DynamoDB rejects the entire batch write operation:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;One or more tables specified in the &lt;code&gt;BatchWriteItem&lt;/code&gt; request does not exist.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Primary key attributes specified on an item in the request do not match those in the corresponding table&#39;s primary key schema.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;You try to perform multiple operations on the same item in the same &lt;code&gt;BatchWriteItem&lt;/code&gt; request. For example, you cannot put and delete the same item in the same &lt;code&gt;BatchWriteItem&lt;/code&gt; request. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; Your request contains at least two items with identical hash and range keys (which essentially is two put operations). &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;There are more than 25 requests in the batch.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Any individual item in a batch exceeds 400 KB.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The total request size exceeds 16 MB.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param batchWriteItemInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return BatchWriteItemOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ProvisionedThroughputExceededException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ItemCollectionSizeLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RequestLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public BatchWriteItemOutput batchWriteItem(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull BatchWriteItemInput batchWriteItemInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders) throws ApiException {
        ApiResponse<BatchWriteItemOutput> localVarResp = batchWriteItemWithHttpInfo(xAmzTarget, batchWriteItemInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;The &lt;code&gt;BatchWriteItem&lt;/code&gt; operation puts or deletes multiple items in one or more tables. A single call to &lt;code&gt;BatchWriteItem&lt;/code&gt; can transmit up to 16MB of data over the network, consisting of up to 25 item put or delete operations. While individual items can be up to 400 KB once stored, it&#39;s important to note that an item&#39;s representation might be greater than 400KB while being sent in DynamoDB&#39;s JSON format for the API call. For more details on this distinction, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html\&quot;&gt;Naming Rules and Data Types&lt;/a&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt; &lt;code&gt;BatchWriteItem&lt;/code&gt; cannot update items. If you perform a &lt;code&gt;BatchWriteItem&lt;/code&gt; operation on an existing item, that item&#39;s values will be overwritten by the operation and it will appear like it was updated. To update items, we recommend you use the &lt;code&gt;UpdateItem&lt;/code&gt; action.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;The individual &lt;code&gt;PutItem&lt;/code&gt; and &lt;code&gt;DeleteItem&lt;/code&gt; operations specified in &lt;code&gt;BatchWriteItem&lt;/code&gt; are atomic; however &lt;code&gt;BatchWriteItem&lt;/code&gt; as a whole is not. If any requested operations fail because the table&#39;s provisioned throughput is exceeded or an internal processing failure occurs, the failed operations are returned in the &lt;code&gt;UnprocessedItems&lt;/code&gt; response parameter. You can investigate and optionally resend the requests. Typically, you would call &lt;code&gt;BatchWriteItem&lt;/code&gt; in a loop. Each iteration would check for unprocessed items and submit a new &lt;code&gt;BatchWriteItem&lt;/code&gt; request with those unprocessed items until all items have been processed.&lt;/p&gt; &lt;p&gt;If &lt;i&gt;none&lt;/i&gt; of the items can be processed due to insufficient provisioned throughput on all of the tables in the request, then &lt;code&gt;BatchWriteItem&lt;/code&gt; returns a &lt;code&gt;ProvisionedThroughputExceededException&lt;/code&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt;If DynamoDB returns any unprocessed items, you should retry the batch operation on those items. However, &lt;i&gt;we strongly recommend that you use an exponential backoff algorithm&lt;/i&gt;. If you retry the batch operation immediately, the underlying read or write requests can still fail due to throttling on the individual tables. If you delay the batch operation using exponential backoff, the individual requests in the batch are much more likely to succeed.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ErrorHandling.html#Programming.Errors.BatchOperations\&quot;&gt;Batch Operations and Error Handling&lt;/a&gt; in the &lt;i&gt;Amazon DynamoDB Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;With &lt;code&gt;BatchWriteItem&lt;/code&gt;, you can efficiently write or delete large amounts of data, such as from Amazon EMR, or copy data from another database into DynamoDB. In order to improve performance with these large-scale operations, &lt;code&gt;BatchWriteItem&lt;/code&gt; does not behave in the same way as individual &lt;code&gt;PutItem&lt;/code&gt; and &lt;code&gt;DeleteItem&lt;/code&gt; calls would. For example, you cannot specify conditions on individual put and delete requests, and &lt;code&gt;BatchWriteItem&lt;/code&gt; does not return deleted items in the response.&lt;/p&gt; &lt;p&gt;If you use a programming language that supports concurrency, you can use threads to write items in parallel. Your application must include the necessary logic to manage the threads. With languages that don&#39;t support threading, you must update or delete the specified items one at a time. In both situations, &lt;code&gt;BatchWriteItem&lt;/code&gt; performs the specified put and delete operations in parallel, giving you the power of the thread pool approach without having to introduce complexity into your application.&lt;/p&gt; &lt;p&gt;Parallel processing reduces latency, but each specified put and delete request consumes the same number of write capacity units whether it is processed in parallel or not. Delete operations on nonexistent items consume one write capacity unit.&lt;/p&gt; &lt;p&gt;If one or more of the following is true, DynamoDB rejects the entire batch write operation:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;One or more tables specified in the &lt;code&gt;BatchWriteItem&lt;/code&gt; request does not exist.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Primary key attributes specified on an item in the request do not match those in the corresponding table&#39;s primary key schema.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;You try to perform multiple operations on the same item in the same &lt;code&gt;BatchWriteItem&lt;/code&gt; request. For example, you cannot put and delete the same item in the same &lt;code&gt;BatchWriteItem&lt;/code&gt; request. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; Your request contains at least two items with identical hash and range keys (which essentially is two put operations). &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;There are more than 25 requests in the batch.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Any individual item in a batch exceeds 400 KB.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The total request size exceeds 16 MB.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param batchWriteItemInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;BatchWriteItemOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ProvisionedThroughputExceededException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ItemCollectionSizeLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RequestLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BatchWriteItemOutput> batchWriteItemWithHttpInfo(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull BatchWriteItemInput batchWriteItemInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = batchWriteItemValidateBeforeCall(xAmzTarget, batchWriteItemInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<BatchWriteItemOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;The &lt;code&gt;BatchWriteItem&lt;/code&gt; operation puts or deletes multiple items in one or more tables. A single call to &lt;code&gt;BatchWriteItem&lt;/code&gt; can transmit up to 16MB of data over the network, consisting of up to 25 item put or delete operations. While individual items can be up to 400 KB once stored, it&#39;s important to note that an item&#39;s representation might be greater than 400KB while being sent in DynamoDB&#39;s JSON format for the API call. For more details on this distinction, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html\&quot;&gt;Naming Rules and Data Types&lt;/a&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt; &lt;code&gt;BatchWriteItem&lt;/code&gt; cannot update items. If you perform a &lt;code&gt;BatchWriteItem&lt;/code&gt; operation on an existing item, that item&#39;s values will be overwritten by the operation and it will appear like it was updated. To update items, we recommend you use the &lt;code&gt;UpdateItem&lt;/code&gt; action.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;The individual &lt;code&gt;PutItem&lt;/code&gt; and &lt;code&gt;DeleteItem&lt;/code&gt; operations specified in &lt;code&gt;BatchWriteItem&lt;/code&gt; are atomic; however &lt;code&gt;BatchWriteItem&lt;/code&gt; as a whole is not. If any requested operations fail because the table&#39;s provisioned throughput is exceeded or an internal processing failure occurs, the failed operations are returned in the &lt;code&gt;UnprocessedItems&lt;/code&gt; response parameter. You can investigate and optionally resend the requests. Typically, you would call &lt;code&gt;BatchWriteItem&lt;/code&gt; in a loop. Each iteration would check for unprocessed items and submit a new &lt;code&gt;BatchWriteItem&lt;/code&gt; request with those unprocessed items until all items have been processed.&lt;/p&gt; &lt;p&gt;If &lt;i&gt;none&lt;/i&gt; of the items can be processed due to insufficient provisioned throughput on all of the tables in the request, then &lt;code&gt;BatchWriteItem&lt;/code&gt; returns a &lt;code&gt;ProvisionedThroughputExceededException&lt;/code&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt;If DynamoDB returns any unprocessed items, you should retry the batch operation on those items. However, &lt;i&gt;we strongly recommend that you use an exponential backoff algorithm&lt;/i&gt;. If you retry the batch operation immediately, the underlying read or write requests can still fail due to throttling on the individual tables. If you delay the batch operation using exponential backoff, the individual requests in the batch are much more likely to succeed.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ErrorHandling.html#Programming.Errors.BatchOperations\&quot;&gt;Batch Operations and Error Handling&lt;/a&gt; in the &lt;i&gt;Amazon DynamoDB Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;With &lt;code&gt;BatchWriteItem&lt;/code&gt;, you can efficiently write or delete large amounts of data, such as from Amazon EMR, or copy data from another database into DynamoDB. In order to improve performance with these large-scale operations, &lt;code&gt;BatchWriteItem&lt;/code&gt; does not behave in the same way as individual &lt;code&gt;PutItem&lt;/code&gt; and &lt;code&gt;DeleteItem&lt;/code&gt; calls would. For example, you cannot specify conditions on individual put and delete requests, and &lt;code&gt;BatchWriteItem&lt;/code&gt; does not return deleted items in the response.&lt;/p&gt; &lt;p&gt;If you use a programming language that supports concurrency, you can use threads to write items in parallel. Your application must include the necessary logic to manage the threads. With languages that don&#39;t support threading, you must update or delete the specified items one at a time. In both situations, &lt;code&gt;BatchWriteItem&lt;/code&gt; performs the specified put and delete operations in parallel, giving you the power of the thread pool approach without having to introduce complexity into your application.&lt;/p&gt; &lt;p&gt;Parallel processing reduces latency, but each specified put and delete request consumes the same number of write capacity units whether it is processed in parallel or not. Delete operations on nonexistent items consume one write capacity unit.&lt;/p&gt; &lt;p&gt;If one or more of the following is true, DynamoDB rejects the entire batch write operation:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;One or more tables specified in the &lt;code&gt;BatchWriteItem&lt;/code&gt; request does not exist.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Primary key attributes specified on an item in the request do not match those in the corresponding table&#39;s primary key schema.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;You try to perform multiple operations on the same item in the same &lt;code&gt;BatchWriteItem&lt;/code&gt; request. For example, you cannot put and delete the same item in the same &lt;code&gt;BatchWriteItem&lt;/code&gt; request. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; Your request contains at least two items with identical hash and range keys (which essentially is two put operations). &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;There are more than 25 requests in the batch.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Any individual item in a batch exceeds 400 KB.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The total request size exceeds 16 MB.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param batchWriteItemInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ProvisionedThroughputExceededException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ItemCollectionSizeLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RequestLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call batchWriteItemAsync(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull BatchWriteItemInput batchWriteItemInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback<BatchWriteItemOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = batchWriteItemValidateBeforeCall(xAmzTarget, batchWriteItemInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<BatchWriteItemOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createBackup
     * @param xAmzTarget  (required)
     * @param createBackupInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TableNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TableInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ContinuousBackupsUnavailableException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BackupInUseException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createBackupCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull CreateBackupInput createBackupInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createBackupInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=DynamoDB_20120810.CreateBackup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }


        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }


        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }


        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }


        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }


        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }


        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }


        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }


        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createBackupValidateBeforeCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull CreateBackupInput createBackupInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling createBackup(Async)");
        }

        // verify the required parameter 'createBackupInput' is set
        if (createBackupInput == null) {
            throw new ApiException("Missing the required parameter 'createBackupInput' when calling createBackup(Async)");
        }

        return createBackupCall(xAmzTarget, createBackupInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a backup for an existing table.&lt;/p&gt; &lt;p&gt; Each time you create an on-demand backup, the entire table data is backed up. There is no limit to the number of on-demand backups that can be taken. &lt;/p&gt; &lt;p&gt; When you create an on-demand backup, a time marker of the request is cataloged, and the backup is created asynchronously, by applying all changes until the time of the request to the last full table snapshot. Backup requests are processed instantaneously and become available for restore within minutes. &lt;/p&gt; &lt;p&gt;You can call &lt;code&gt;CreateBackup&lt;/code&gt; at a maximum rate of 50 times per second.&lt;/p&gt; &lt;p&gt;All backups in DynamoDB work without consuming any provisioned throughput on the table.&lt;/p&gt; &lt;p&gt; If you submit a backup request on 2018-12-14 at 14:25:00, the backup is guaranteed to contain all data committed to the table up to 14:24:00, and data committed after 14:26:00 will not be. The backup might contain data modifications made between 14:24:00 and 14:26:00. On-demand backup does not support causal consistency. &lt;/p&gt; &lt;p&gt; Along with data, the following are also included on the backups: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Global secondary indexes (GSIs)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Local secondary indexes (LSIs)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Streams&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Provisioned read and write capacity&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param createBackupInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateBackupOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TableNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TableInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ContinuousBackupsUnavailableException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BackupInUseException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public CreateBackupOutput createBackup(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull CreateBackupInput createBackupInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateBackupOutput> localVarResp = createBackupWithHttpInfo(xAmzTarget, createBackupInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a backup for an existing table.&lt;/p&gt; &lt;p&gt; Each time you create an on-demand backup, the entire table data is backed up. There is no limit to the number of on-demand backups that can be taken. &lt;/p&gt; &lt;p&gt; When you create an on-demand backup, a time marker of the request is cataloged, and the backup is created asynchronously, by applying all changes until the time of the request to the last full table snapshot. Backup requests are processed instantaneously and become available for restore within minutes. &lt;/p&gt; &lt;p&gt;You can call &lt;code&gt;CreateBackup&lt;/code&gt; at a maximum rate of 50 times per second.&lt;/p&gt; &lt;p&gt;All backups in DynamoDB work without consuming any provisioned throughput on the table.&lt;/p&gt; &lt;p&gt; If you submit a backup request on 2018-12-14 at 14:25:00, the backup is guaranteed to contain all data committed to the table up to 14:24:00, and data committed after 14:26:00 will not be. The backup might contain data modifications made between 14:24:00 and 14:26:00. On-demand backup does not support causal consistency. &lt;/p&gt; &lt;p&gt; Along with data, the following are also included on the backups: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Global secondary indexes (GSIs)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Local secondary indexes (LSIs)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Streams&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Provisioned read and write capacity&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param createBackupInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateBackupOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TableNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TableInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ContinuousBackupsUnavailableException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BackupInUseException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateBackupOutput> createBackupWithHttpInfo(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull CreateBackupInput createBackupInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createBackupValidateBeforeCall(xAmzTarget, createBackupInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateBackupOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a backup for an existing table.&lt;/p&gt; &lt;p&gt; Each time you create an on-demand backup, the entire table data is backed up. There is no limit to the number of on-demand backups that can be taken. &lt;/p&gt; &lt;p&gt; When you create an on-demand backup, a time marker of the request is cataloged, and the backup is created asynchronously, by applying all changes until the time of the request to the last full table snapshot. Backup requests are processed instantaneously and become available for restore within minutes. &lt;/p&gt; &lt;p&gt;You can call &lt;code&gt;CreateBackup&lt;/code&gt; at a maximum rate of 50 times per second.&lt;/p&gt; &lt;p&gt;All backups in DynamoDB work without consuming any provisioned throughput on the table.&lt;/p&gt; &lt;p&gt; If you submit a backup request on 2018-12-14 at 14:25:00, the backup is guaranteed to contain all data committed to the table up to 14:24:00, and data committed after 14:26:00 will not be. The backup might contain data modifications made between 14:24:00 and 14:26:00. On-demand backup does not support causal consistency. &lt;/p&gt; &lt;p&gt; Along with data, the following are also included on the backups: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Global secondary indexes (GSIs)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Local secondary indexes (LSIs)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Streams&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Provisioned read and write capacity&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param createBackupInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TableNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TableInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ContinuousBackupsUnavailableException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BackupInUseException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createBackupAsync(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull CreateBackupInput createBackupInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback<CreateBackupOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = createBackupValidateBeforeCall(xAmzTarget, createBackupInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateBackupOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createGlobalTable
     * @param xAmzTarget  (required)
     * @param createGlobalTableInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> GlobalTableAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TableNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createGlobalTableCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull CreateGlobalTableInput createGlobalTableInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createGlobalTableInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=DynamoDB_20120810.CreateGlobalTable";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }


        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }


        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }


        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }


        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }


        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }


        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }


        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }


        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createGlobalTableValidateBeforeCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull CreateGlobalTableInput createGlobalTableInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling createGlobalTable(Async)");
        }

        // verify the required parameter 'createGlobalTableInput' is set
        if (createGlobalTableInput == null) {
            throw new ApiException("Missing the required parameter 'createGlobalTableInput' when calling createGlobalTable(Async)");
        }

        return createGlobalTableCall(xAmzTarget, createGlobalTableInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a global table from an existing table. A global table creates a replication relationship between two or more DynamoDB tables with the same table name in the provided Regions. &lt;/p&gt; &lt;important&gt; &lt;p&gt;This operation only applies to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.V1.html\&quot;&gt;Version 2017.11.29 (Legacy)&lt;/a&gt; of global tables. We recommend using &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.V2.html\&quot;&gt;Version 2019.11.21 (Current)&lt;/a&gt; when creating new global tables, as it provides greater flexibility, higher efficiency and consumes less write capacity than 2017.11.29 (Legacy). To determine which version you are using, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.DetermineVersion.html\&quot;&gt;Determining the version&lt;/a&gt;. To update existing global tables from version 2017.11.29 (Legacy) to version 2019.11.21 (Current), see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/V2globaltables_upgrade.html\&quot;&gt; Updating global tables&lt;/a&gt;. &lt;/p&gt; &lt;/important&gt; &lt;p&gt;If you want to add a new replica table to a global table, each of the following conditions must be true:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The table must have the same primary key as all of the other replicas.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The table must have the same name as all of the other replicas.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The table must have DynamoDB Streams enabled, with the stream containing both the new and the old images of the item.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;None of the replica tables in the global table can contain any data.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; If global secondary indexes are specified, then the following conditions must also be met: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; The global secondary indexes must have the same name. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; The global secondary indexes must have the same hash key and sort key (if present). &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; If local secondary indexes are specified, then the following conditions must also be met: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; The local secondary indexes must have the same name. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; The local secondary indexes must have the same hash key and sort key (if present). &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;important&gt; &lt;p&gt; Write capacity settings should be set consistently across your replica tables and secondary indexes. DynamoDB strongly recommends enabling auto scaling to manage the write capacity settings for all of your global tables replicas and indexes. &lt;/p&gt; &lt;p&gt; If you prefer to manage write capacity settings manually, you should provision equal replicated write capacity units to your replica tables. You should also provision equal replicated write capacity units to matching secondary indexes across your global table. &lt;/p&gt; &lt;/important&gt;
     * @param xAmzTarget  (required)
     * @param createGlobalTableInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateGlobalTableOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> GlobalTableAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TableNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public CreateGlobalTableOutput createGlobalTable(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull CreateGlobalTableInput createGlobalTableInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateGlobalTableOutput> localVarResp = createGlobalTableWithHttpInfo(xAmzTarget, createGlobalTableInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a global table from an existing table. A global table creates a replication relationship between two or more DynamoDB tables with the same table name in the provided Regions. &lt;/p&gt; &lt;important&gt; &lt;p&gt;This operation only applies to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.V1.html\&quot;&gt;Version 2017.11.29 (Legacy)&lt;/a&gt; of global tables. We recommend using &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.V2.html\&quot;&gt;Version 2019.11.21 (Current)&lt;/a&gt; when creating new global tables, as it provides greater flexibility, higher efficiency and consumes less write capacity than 2017.11.29 (Legacy). To determine which version you are using, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.DetermineVersion.html\&quot;&gt;Determining the version&lt;/a&gt;. To update existing global tables from version 2017.11.29 (Legacy) to version 2019.11.21 (Current), see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/V2globaltables_upgrade.html\&quot;&gt; Updating global tables&lt;/a&gt;. &lt;/p&gt; &lt;/important&gt; &lt;p&gt;If you want to add a new replica table to a global table, each of the following conditions must be true:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The table must have the same primary key as all of the other replicas.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The table must have the same name as all of the other replicas.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The table must have DynamoDB Streams enabled, with the stream containing both the new and the old images of the item.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;None of the replica tables in the global table can contain any data.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; If global secondary indexes are specified, then the following conditions must also be met: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; The global secondary indexes must have the same name. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; The global secondary indexes must have the same hash key and sort key (if present). &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; If local secondary indexes are specified, then the following conditions must also be met: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; The local secondary indexes must have the same name. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; The local secondary indexes must have the same hash key and sort key (if present). &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;important&gt; &lt;p&gt; Write capacity settings should be set consistently across your replica tables and secondary indexes. DynamoDB strongly recommends enabling auto scaling to manage the write capacity settings for all of your global tables replicas and indexes. &lt;/p&gt; &lt;p&gt; If you prefer to manage write capacity settings manually, you should provision equal replicated write capacity units to your replica tables. You should also provision equal replicated write capacity units to matching secondary indexes across your global table. &lt;/p&gt; &lt;/important&gt;
     * @param xAmzTarget  (required)
     * @param createGlobalTableInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateGlobalTableOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> GlobalTableAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TableNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateGlobalTableOutput> createGlobalTableWithHttpInfo(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull CreateGlobalTableInput createGlobalTableInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createGlobalTableValidateBeforeCall(xAmzTarget, createGlobalTableInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateGlobalTableOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a global table from an existing table. A global table creates a replication relationship between two or more DynamoDB tables with the same table name in the provided Regions. &lt;/p&gt; &lt;important&gt; &lt;p&gt;This operation only applies to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.V1.html\&quot;&gt;Version 2017.11.29 (Legacy)&lt;/a&gt; of global tables. We recommend using &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.V2.html\&quot;&gt;Version 2019.11.21 (Current)&lt;/a&gt; when creating new global tables, as it provides greater flexibility, higher efficiency and consumes less write capacity than 2017.11.29 (Legacy). To determine which version you are using, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.DetermineVersion.html\&quot;&gt;Determining the version&lt;/a&gt;. To update existing global tables from version 2017.11.29 (Legacy) to version 2019.11.21 (Current), see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/V2globaltables_upgrade.html\&quot;&gt; Updating global tables&lt;/a&gt;. &lt;/p&gt; &lt;/important&gt; &lt;p&gt;If you want to add a new replica table to a global table, each of the following conditions must be true:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The table must have the same primary key as all of the other replicas.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The table must have the same name as all of the other replicas.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The table must have DynamoDB Streams enabled, with the stream containing both the new and the old images of the item.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;None of the replica tables in the global table can contain any data.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; If global secondary indexes are specified, then the following conditions must also be met: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; The global secondary indexes must have the same name. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; The global secondary indexes must have the same hash key and sort key (if present). &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; If local secondary indexes are specified, then the following conditions must also be met: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; The local secondary indexes must have the same name. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; The local secondary indexes must have the same hash key and sort key (if present). &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;important&gt; &lt;p&gt; Write capacity settings should be set consistently across your replica tables and secondary indexes. DynamoDB strongly recommends enabling auto scaling to manage the write capacity settings for all of your global tables replicas and indexes. &lt;/p&gt; &lt;p&gt; If you prefer to manage write capacity settings manually, you should provision equal replicated write capacity units to your replica tables. You should also provision equal replicated write capacity units to matching secondary indexes across your global table. &lt;/p&gt; &lt;/important&gt;
     * @param xAmzTarget  (required)
     * @param createGlobalTableInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> GlobalTableAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TableNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createGlobalTableAsync(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull CreateGlobalTableInput createGlobalTableInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback<CreateGlobalTableOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = createGlobalTableValidateBeforeCall(xAmzTarget, createGlobalTableInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateGlobalTableOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createTable
     * @param xAmzTarget  (required)
     * @param createTableInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceInUseException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTableCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull CreateTableInput createTableInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createTableInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=DynamoDB_20120810.CreateTable";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }


        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }


        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }


        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }


        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }


        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }


        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }


        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }


        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTableValidateBeforeCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull CreateTableInput createTableInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling createTable(Async)");
        }

        // verify the required parameter 'createTableInput' is set
        if (createTableInput == null) {
            throw new ApiException("Missing the required parameter 'createTableInput' when calling createTable(Async)");
        }

        return createTableCall(xAmzTarget, createTableInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;The &lt;code&gt;CreateTable&lt;/code&gt; operation adds a new table to your account. In an Amazon Web Services account, table names must be unique within each Region. That is, you can have two tables with same name if you create the tables in different Regions.&lt;/p&gt; &lt;p&gt; &lt;code&gt;CreateTable&lt;/code&gt; is an asynchronous operation. Upon receiving a &lt;code&gt;CreateTable&lt;/code&gt; request, DynamoDB immediately returns a response with a &lt;code&gt;TableStatus&lt;/code&gt; of &lt;code&gt;CREATING&lt;/code&gt;. After the table is created, DynamoDB sets the &lt;code&gt;TableStatus&lt;/code&gt; to &lt;code&gt;ACTIVE&lt;/code&gt;. You can perform read and write operations only on an &lt;code&gt;ACTIVE&lt;/code&gt; table. &lt;/p&gt; &lt;p&gt;You can optionally define secondary indexes on the new table, as part of the &lt;code&gt;CreateTable&lt;/code&gt; operation. If you want to create multiple tables with secondary indexes on them, you must create the tables sequentially. Only one table with secondary indexes can be in the &lt;code&gt;CREATING&lt;/code&gt; state at any given time.&lt;/p&gt; &lt;p&gt;You can use the &lt;code&gt;DescribeTable&lt;/code&gt; action to check the table status.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param createTableInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateTableOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceInUseException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public CreateTableOutput createTable(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull CreateTableInput createTableInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateTableOutput> localVarResp = createTableWithHttpInfo(xAmzTarget, createTableInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;The &lt;code&gt;CreateTable&lt;/code&gt; operation adds a new table to your account. In an Amazon Web Services account, table names must be unique within each Region. That is, you can have two tables with same name if you create the tables in different Regions.&lt;/p&gt; &lt;p&gt; &lt;code&gt;CreateTable&lt;/code&gt; is an asynchronous operation. Upon receiving a &lt;code&gt;CreateTable&lt;/code&gt; request, DynamoDB immediately returns a response with a &lt;code&gt;TableStatus&lt;/code&gt; of &lt;code&gt;CREATING&lt;/code&gt;. After the table is created, DynamoDB sets the &lt;code&gt;TableStatus&lt;/code&gt; to &lt;code&gt;ACTIVE&lt;/code&gt;. You can perform read and write operations only on an &lt;code&gt;ACTIVE&lt;/code&gt; table. &lt;/p&gt; &lt;p&gt;You can optionally define secondary indexes on the new table, as part of the &lt;code&gt;CreateTable&lt;/code&gt; operation. If you want to create multiple tables with secondary indexes on them, you must create the tables sequentially. Only one table with secondary indexes can be in the &lt;code&gt;CREATING&lt;/code&gt; state at any given time.&lt;/p&gt; &lt;p&gt;You can use the &lt;code&gt;DescribeTable&lt;/code&gt; action to check the table status.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param createTableInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateTableOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceInUseException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateTableOutput> createTableWithHttpInfo(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull CreateTableInput createTableInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createTableValidateBeforeCall(xAmzTarget, createTableInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateTableOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;The &lt;code&gt;CreateTable&lt;/code&gt; operation adds a new table to your account. In an Amazon Web Services account, table names must be unique within each Region. That is, you can have two tables with same name if you create the tables in different Regions.&lt;/p&gt; &lt;p&gt; &lt;code&gt;CreateTable&lt;/code&gt; is an asynchronous operation. Upon receiving a &lt;code&gt;CreateTable&lt;/code&gt; request, DynamoDB immediately returns a response with a &lt;code&gt;TableStatus&lt;/code&gt; of &lt;code&gt;CREATING&lt;/code&gt;. After the table is created, DynamoDB sets the &lt;code&gt;TableStatus&lt;/code&gt; to &lt;code&gt;ACTIVE&lt;/code&gt;. You can perform read and write operations only on an &lt;code&gt;ACTIVE&lt;/code&gt; table. &lt;/p&gt; &lt;p&gt;You can optionally define secondary indexes on the new table, as part of the &lt;code&gt;CreateTable&lt;/code&gt; operation. If you want to create multiple tables with secondary indexes on them, you must create the tables sequentially. Only one table with secondary indexes can be in the &lt;code&gt;CREATING&lt;/code&gt; state at any given time.&lt;/p&gt; &lt;p&gt;You can use the &lt;code&gt;DescribeTable&lt;/code&gt; action to check the table status.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param createTableInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceInUseException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTableAsync(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull CreateTableInput createTableInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback<CreateTableOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTableValidateBeforeCall(xAmzTarget, createTableInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateTableOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteBackup
     * @param xAmzTarget  (required)
     * @param deleteBackupInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BackupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BackupInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteBackupCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull DeleteBackupInput deleteBackupInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteBackupInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=DynamoDB_20120810.DeleteBackup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }


        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }


        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }


        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }


        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }


        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }


        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }


        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }


        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteBackupValidateBeforeCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull DeleteBackupInput deleteBackupInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling deleteBackup(Async)");
        }

        // verify the required parameter 'deleteBackupInput' is set
        if (deleteBackupInput == null) {
            throw new ApiException("Missing the required parameter 'deleteBackupInput' when calling deleteBackup(Async)");
        }

        return deleteBackupCall(xAmzTarget, deleteBackupInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes an existing backup of a table.&lt;/p&gt; &lt;p&gt;You can call &lt;code&gt;DeleteBackup&lt;/code&gt; at a maximum rate of 10 times per second.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param deleteBackupInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DeleteBackupOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BackupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BackupInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public DeleteBackupOutput deleteBackup(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull DeleteBackupInput deleteBackupInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DeleteBackupOutput> localVarResp = deleteBackupWithHttpInfo(xAmzTarget, deleteBackupInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Deletes an existing backup of a table.&lt;/p&gt; &lt;p&gt;You can call &lt;code&gt;DeleteBackup&lt;/code&gt; at a maximum rate of 10 times per second.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param deleteBackupInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DeleteBackupOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BackupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BackupInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteBackupOutput> deleteBackupWithHttpInfo(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull DeleteBackupInput deleteBackupInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteBackupValidateBeforeCall(xAmzTarget, deleteBackupInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DeleteBackupOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes an existing backup of a table.&lt;/p&gt; &lt;p&gt;You can call &lt;code&gt;DeleteBackup&lt;/code&gt; at a maximum rate of 10 times per second.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param deleteBackupInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BackupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BackupInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteBackupAsync(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull DeleteBackupInput deleteBackupInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback<DeleteBackupOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteBackupValidateBeforeCall(xAmzTarget, deleteBackupInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DeleteBackupOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteItem
     * @param xAmzTarget  (required)
     * @param deleteItemInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ConditionalCheckFailedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ProvisionedThroughputExceededException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ItemCollectionSizeLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TransactionConflictException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> RequestLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteItemCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull DeleteItemInput deleteItemInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteItemInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=DynamoDB_20120810.DeleteItem";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }


        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }


        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }


        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }


        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }


        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }


        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }


        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }


        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteItemValidateBeforeCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull DeleteItemInput deleteItemInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling deleteItem(Async)");
        }

        // verify the required parameter 'deleteItemInput' is set
        if (deleteItemInput == null) {
            throw new ApiException("Missing the required parameter 'deleteItemInput' when calling deleteItem(Async)");
        }

        return deleteItemCall(xAmzTarget, deleteItemInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes a single item in a table by primary key. You can perform a conditional delete operation that deletes the item if it exists, or if it has an expected attribute value.&lt;/p&gt; &lt;p&gt;In addition to deleting an item, you can also return the item&#39;s attribute values in the same operation, using the &lt;code&gt;ReturnValues&lt;/code&gt; parameter.&lt;/p&gt; &lt;p&gt;Unless you specify conditions, the &lt;code&gt;DeleteItem&lt;/code&gt; is an idempotent operation; running it multiple times on the same item or attribute does &lt;i&gt;not&lt;/i&gt; result in an error response.&lt;/p&gt; &lt;p&gt;Conditional deletes are useful for deleting items only if specific conditions are met. If those conditions are met, DynamoDB performs the delete. Otherwise, the item is not deleted.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param deleteItemInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DeleteItemOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ConditionalCheckFailedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ProvisionedThroughputExceededException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ItemCollectionSizeLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TransactionConflictException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> RequestLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public DeleteItemOutput deleteItem(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull DeleteItemInput deleteItemInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DeleteItemOutput> localVarResp = deleteItemWithHttpInfo(xAmzTarget, deleteItemInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Deletes a single item in a table by primary key. You can perform a conditional delete operation that deletes the item if it exists, or if it has an expected attribute value.&lt;/p&gt; &lt;p&gt;In addition to deleting an item, you can also return the item&#39;s attribute values in the same operation, using the &lt;code&gt;ReturnValues&lt;/code&gt; parameter.&lt;/p&gt; &lt;p&gt;Unless you specify conditions, the &lt;code&gt;DeleteItem&lt;/code&gt; is an idempotent operation; running it multiple times on the same item or attribute does &lt;i&gt;not&lt;/i&gt; result in an error response.&lt;/p&gt; &lt;p&gt;Conditional deletes are useful for deleting items only if specific conditions are met. If those conditions are met, DynamoDB performs the delete. Otherwise, the item is not deleted.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param deleteItemInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DeleteItemOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ConditionalCheckFailedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ProvisionedThroughputExceededException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ItemCollectionSizeLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TransactionConflictException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> RequestLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteItemOutput> deleteItemWithHttpInfo(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull DeleteItemInput deleteItemInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteItemValidateBeforeCall(xAmzTarget, deleteItemInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DeleteItemOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes a single item in a table by primary key. You can perform a conditional delete operation that deletes the item if it exists, or if it has an expected attribute value.&lt;/p&gt; &lt;p&gt;In addition to deleting an item, you can also return the item&#39;s attribute values in the same operation, using the &lt;code&gt;ReturnValues&lt;/code&gt; parameter.&lt;/p&gt; &lt;p&gt;Unless you specify conditions, the &lt;code&gt;DeleteItem&lt;/code&gt; is an idempotent operation; running it multiple times on the same item or attribute does &lt;i&gt;not&lt;/i&gt; result in an error response.&lt;/p&gt; &lt;p&gt;Conditional deletes are useful for deleting items only if specific conditions are met. If those conditions are met, DynamoDB performs the delete. Otherwise, the item is not deleted.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param deleteItemInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ConditionalCheckFailedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ProvisionedThroughputExceededException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ItemCollectionSizeLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TransactionConflictException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> RequestLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteItemAsync(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull DeleteItemInput deleteItemInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback<DeleteItemOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteItemValidateBeforeCall(xAmzTarget, deleteItemInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DeleteItemOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteTable
     * @param xAmzTarget  (required)
     * @param deleteTableInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceInUseException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTableCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull DeleteTableInput deleteTableInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteTableInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=DynamoDB_20120810.DeleteTable";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }


        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }


        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }


        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }


        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }


        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }


        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }


        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }


        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTableValidateBeforeCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull DeleteTableInput deleteTableInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling deleteTable(Async)");
        }

        // verify the required parameter 'deleteTableInput' is set
        if (deleteTableInput == null) {
            throw new ApiException("Missing the required parameter 'deleteTableInput' when calling deleteTable(Async)");
        }

        return deleteTableCall(xAmzTarget, deleteTableInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;The &lt;code&gt;DeleteTable&lt;/code&gt; operation deletes a table and all of its items. After a &lt;code&gt;DeleteTable&lt;/code&gt; request, the specified table is in the &lt;code&gt;DELETING&lt;/code&gt; state until DynamoDB completes the deletion. If the table is in the &lt;code&gt;ACTIVE&lt;/code&gt; state, you can delete it. If a table is in &lt;code&gt;CREATING&lt;/code&gt; or &lt;code&gt;UPDATING&lt;/code&gt; states, then DynamoDB returns a &lt;code&gt;ResourceInUseException&lt;/code&gt;. If the specified table does not exist, DynamoDB returns a &lt;code&gt;ResourceNotFoundException&lt;/code&gt;. If table is already in the &lt;code&gt;DELETING&lt;/code&gt; state, no error is returned. &lt;/p&gt; &lt;important&gt; &lt;p&gt;This operation only applies to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.V2.html\&quot;&gt;Version 2019.11.21 (Current)&lt;/a&gt; of global tables. &lt;/p&gt; &lt;/important&gt; &lt;note&gt; &lt;p&gt;DynamoDB might continue to accept data read and write operations, such as &lt;code&gt;GetItem&lt;/code&gt; and &lt;code&gt;PutItem&lt;/code&gt;, on a table in the &lt;code&gt;DELETING&lt;/code&gt; state until the table deletion is complete.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;When you delete a table, any indexes on that table are also deleted.&lt;/p&gt; &lt;p&gt;If you have DynamoDB Streams enabled on the table, then the corresponding stream on that table goes into the &lt;code&gt;DISABLED&lt;/code&gt; state, and the stream is automatically deleted after 24 hours.&lt;/p&gt; &lt;p&gt;Use the &lt;code&gt;DescribeTable&lt;/code&gt; action to check the status of the table. &lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param deleteTableInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DeleteTableOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceInUseException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public DeleteTableOutput deleteTable(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull DeleteTableInput deleteTableInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DeleteTableOutput> localVarResp = deleteTableWithHttpInfo(xAmzTarget, deleteTableInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;The &lt;code&gt;DeleteTable&lt;/code&gt; operation deletes a table and all of its items. After a &lt;code&gt;DeleteTable&lt;/code&gt; request, the specified table is in the &lt;code&gt;DELETING&lt;/code&gt; state until DynamoDB completes the deletion. If the table is in the &lt;code&gt;ACTIVE&lt;/code&gt; state, you can delete it. If a table is in &lt;code&gt;CREATING&lt;/code&gt; or &lt;code&gt;UPDATING&lt;/code&gt; states, then DynamoDB returns a &lt;code&gt;ResourceInUseException&lt;/code&gt;. If the specified table does not exist, DynamoDB returns a &lt;code&gt;ResourceNotFoundException&lt;/code&gt;. If table is already in the &lt;code&gt;DELETING&lt;/code&gt; state, no error is returned. &lt;/p&gt; &lt;important&gt; &lt;p&gt;This operation only applies to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.V2.html\&quot;&gt;Version 2019.11.21 (Current)&lt;/a&gt; of global tables. &lt;/p&gt; &lt;/important&gt; &lt;note&gt; &lt;p&gt;DynamoDB might continue to accept data read and write operations, such as &lt;code&gt;GetItem&lt;/code&gt; and &lt;code&gt;PutItem&lt;/code&gt;, on a table in the &lt;code&gt;DELETING&lt;/code&gt; state until the table deletion is complete.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;When you delete a table, any indexes on that table are also deleted.&lt;/p&gt; &lt;p&gt;If you have DynamoDB Streams enabled on the table, then the corresponding stream on that table goes into the &lt;code&gt;DISABLED&lt;/code&gt; state, and the stream is automatically deleted after 24 hours.&lt;/p&gt; &lt;p&gt;Use the &lt;code&gt;DescribeTable&lt;/code&gt; action to check the status of the table. &lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param deleteTableInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DeleteTableOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceInUseException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteTableOutput> deleteTableWithHttpInfo(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull DeleteTableInput deleteTableInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteTableValidateBeforeCall(xAmzTarget, deleteTableInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DeleteTableOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;The &lt;code&gt;DeleteTable&lt;/code&gt; operation deletes a table and all of its items. After a &lt;code&gt;DeleteTable&lt;/code&gt; request, the specified table is in the &lt;code&gt;DELETING&lt;/code&gt; state until DynamoDB completes the deletion. If the table is in the &lt;code&gt;ACTIVE&lt;/code&gt; state, you can delete it. If a table is in &lt;code&gt;CREATING&lt;/code&gt; or &lt;code&gt;UPDATING&lt;/code&gt; states, then DynamoDB returns a &lt;code&gt;ResourceInUseException&lt;/code&gt;. If the specified table does not exist, DynamoDB returns a &lt;code&gt;ResourceNotFoundException&lt;/code&gt;. If table is already in the &lt;code&gt;DELETING&lt;/code&gt; state, no error is returned. &lt;/p&gt; &lt;important&gt; &lt;p&gt;This operation only applies to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.V2.html\&quot;&gt;Version 2019.11.21 (Current)&lt;/a&gt; of global tables. &lt;/p&gt; &lt;/important&gt; &lt;note&gt; &lt;p&gt;DynamoDB might continue to accept data read and write operations, such as &lt;code&gt;GetItem&lt;/code&gt; and &lt;code&gt;PutItem&lt;/code&gt;, on a table in the &lt;code&gt;DELETING&lt;/code&gt; state until the table deletion is complete.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;When you delete a table, any indexes on that table are also deleted.&lt;/p&gt; &lt;p&gt;If you have DynamoDB Streams enabled on the table, then the corresponding stream on that table goes into the &lt;code&gt;DISABLED&lt;/code&gt; state, and the stream is automatically deleted after 24 hours.&lt;/p&gt; &lt;p&gt;Use the &lt;code&gt;DescribeTable&lt;/code&gt; action to check the status of the table. &lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param deleteTableInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceInUseException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTableAsync(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull DeleteTableInput deleteTableInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback<DeleteTableOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTableValidateBeforeCall(xAmzTarget, deleteTableInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DeleteTableOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeBackup
     * @param xAmzTarget  (required)
     * @param describeBackupInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BackupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeBackupCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull DescribeBackupInput describeBackupInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeBackupInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=DynamoDB_20120810.DescribeBackup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }


        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }


        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }


        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }


        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }


        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }


        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }


        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }


        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeBackupValidateBeforeCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull DescribeBackupInput describeBackupInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeBackup(Async)");
        }

        // verify the required parameter 'describeBackupInput' is set
        if (describeBackupInput == null) {
            throw new ApiException("Missing the required parameter 'describeBackupInput' when calling describeBackup(Async)");
        }

        return describeBackupCall(xAmzTarget, describeBackupInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Describes an existing backup of a table.&lt;/p&gt; &lt;p&gt;You can call &lt;code&gt;DescribeBackup&lt;/code&gt; at a maximum rate of 10 times per second.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param describeBackupInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DescribeBackupOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BackupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public DescribeBackupOutput describeBackup(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull DescribeBackupInput describeBackupInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DescribeBackupOutput> localVarResp = describeBackupWithHttpInfo(xAmzTarget, describeBackupInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Describes an existing backup of a table.&lt;/p&gt; &lt;p&gt;You can call &lt;code&gt;DescribeBackup&lt;/code&gt; at a maximum rate of 10 times per second.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param describeBackupInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DescribeBackupOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BackupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeBackupOutput> describeBackupWithHttpInfo(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull DescribeBackupInput describeBackupInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = describeBackupValidateBeforeCall(xAmzTarget, describeBackupInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DescribeBackupOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Describes an existing backup of a table.&lt;/p&gt; &lt;p&gt;You can call &lt;code&gt;DescribeBackup&lt;/code&gt; at a maximum rate of 10 times per second.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param describeBackupInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BackupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeBackupAsync(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull DescribeBackupInput describeBackupInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback<DescribeBackupOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeBackupValidateBeforeCall(xAmzTarget, describeBackupInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DescribeBackupOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeContinuousBackups
     * @param xAmzTarget  (required)
     * @param describeContinuousBackupsInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TableNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeContinuousBackupsCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull DescribeContinuousBackupsInput describeContinuousBackupsInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeContinuousBackupsInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=DynamoDB_20120810.DescribeContinuousBackups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }


        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }


        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }


        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }


        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }


        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }


        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }


        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }


        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeContinuousBackupsValidateBeforeCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull DescribeContinuousBackupsInput describeContinuousBackupsInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeContinuousBackups(Async)");
        }

        // verify the required parameter 'describeContinuousBackupsInput' is set
        if (describeContinuousBackupsInput == null) {
            throw new ApiException("Missing the required parameter 'describeContinuousBackupsInput' when calling describeContinuousBackups(Async)");
        }

        return describeContinuousBackupsCall(xAmzTarget, describeContinuousBackupsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Checks the status of continuous backups and point in time recovery on the specified table. Continuous backups are &lt;code&gt;ENABLED&lt;/code&gt; on all tables at table creation. If point in time recovery is enabled, &lt;code&gt;PointInTimeRecoveryStatus&lt;/code&gt; will be set to ENABLED.&lt;/p&gt; &lt;p&gt; After continuous backups and point in time recovery are enabled, you can restore to any point in time within &lt;code&gt;EarliestRestorableDateTime&lt;/code&gt; and &lt;code&gt;LatestRestorableDateTime&lt;/code&gt;. &lt;/p&gt; &lt;p&gt; &lt;code&gt;LatestRestorableDateTime&lt;/code&gt; is typically 5 minutes before the current time. You can restore your table to any point in time during the last 35 days. &lt;/p&gt; &lt;p&gt;You can call &lt;code&gt;DescribeContinuousBackups&lt;/code&gt; at a maximum rate of 10 times per second.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param describeContinuousBackupsInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DescribeContinuousBackupsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TableNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public DescribeContinuousBackupsOutput describeContinuousBackups(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull DescribeContinuousBackupsInput describeContinuousBackupsInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DescribeContinuousBackupsOutput> localVarResp = describeContinuousBackupsWithHttpInfo(xAmzTarget, describeContinuousBackupsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Checks the status of continuous backups and point in time recovery on the specified table. Continuous backups are &lt;code&gt;ENABLED&lt;/code&gt; on all tables at table creation. If point in time recovery is enabled, &lt;code&gt;PointInTimeRecoveryStatus&lt;/code&gt; will be set to ENABLED.&lt;/p&gt; &lt;p&gt; After continuous backups and point in time recovery are enabled, you can restore to any point in time within &lt;code&gt;EarliestRestorableDateTime&lt;/code&gt; and &lt;code&gt;LatestRestorableDateTime&lt;/code&gt;. &lt;/p&gt; &lt;p&gt; &lt;code&gt;LatestRestorableDateTime&lt;/code&gt; is typically 5 minutes before the current time. You can restore your table to any point in time during the last 35 days. &lt;/p&gt; &lt;p&gt;You can call &lt;code&gt;DescribeContinuousBackups&lt;/code&gt; at a maximum rate of 10 times per second.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param describeContinuousBackupsInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DescribeContinuousBackupsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TableNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeContinuousBackupsOutput> describeContinuousBackupsWithHttpInfo(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull DescribeContinuousBackupsInput describeContinuousBackupsInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = describeContinuousBackupsValidateBeforeCall(xAmzTarget, describeContinuousBackupsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DescribeContinuousBackupsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Checks the status of continuous backups and point in time recovery on the specified table. Continuous backups are &lt;code&gt;ENABLED&lt;/code&gt; on all tables at table creation. If point in time recovery is enabled, &lt;code&gt;PointInTimeRecoveryStatus&lt;/code&gt; will be set to ENABLED.&lt;/p&gt; &lt;p&gt; After continuous backups and point in time recovery are enabled, you can restore to any point in time within &lt;code&gt;EarliestRestorableDateTime&lt;/code&gt; and &lt;code&gt;LatestRestorableDateTime&lt;/code&gt;. &lt;/p&gt; &lt;p&gt; &lt;code&gt;LatestRestorableDateTime&lt;/code&gt; is typically 5 minutes before the current time. You can restore your table to any point in time during the last 35 days. &lt;/p&gt; &lt;p&gt;You can call &lt;code&gt;DescribeContinuousBackups&lt;/code&gt; at a maximum rate of 10 times per second.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param describeContinuousBackupsInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TableNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeContinuousBackupsAsync(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull DescribeContinuousBackupsInput describeContinuousBackupsInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback<DescribeContinuousBackupsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeContinuousBackupsValidateBeforeCall(xAmzTarget, describeContinuousBackupsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DescribeContinuousBackupsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeContributorInsights
     * @param xAmzTarget  (required)
     * @param describeContributorInsightsInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeContributorInsightsCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull DescribeContributorInsightsInput describeContributorInsightsInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeContributorInsightsInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=DynamoDB_20120810.DescribeContributorInsights";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }


        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }


        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }


        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }


        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }


        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }


        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }


        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }


        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeContributorInsightsValidateBeforeCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull DescribeContributorInsightsInput describeContributorInsightsInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeContributorInsights(Async)");
        }

        // verify the required parameter 'describeContributorInsightsInput' is set
        if (describeContributorInsightsInput == null) {
            throw new ApiException("Missing the required parameter 'describeContributorInsightsInput' when calling describeContributorInsights(Async)");
        }

        return describeContributorInsightsCall(xAmzTarget, describeContributorInsightsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Returns information about contributor insights for a given table or global secondary index.
     * @param xAmzTarget  (required)
     * @param describeContributorInsightsInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DescribeContributorInsightsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public DescribeContributorInsightsOutput describeContributorInsights(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull DescribeContributorInsightsInput describeContributorInsightsInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DescribeContributorInsightsOutput> localVarResp = describeContributorInsightsWithHttpInfo(xAmzTarget, describeContributorInsightsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns information about contributor insights for a given table or global secondary index.
     * @param xAmzTarget  (required)
     * @param describeContributorInsightsInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DescribeContributorInsightsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeContributorInsightsOutput> describeContributorInsightsWithHttpInfo(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull DescribeContributorInsightsInput describeContributorInsightsInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = describeContributorInsightsValidateBeforeCall(xAmzTarget, describeContributorInsightsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DescribeContributorInsightsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns information about contributor insights for a given table or global secondary index.
     * @param xAmzTarget  (required)
     * @param describeContributorInsightsInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeContributorInsightsAsync(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull DescribeContributorInsightsInput describeContributorInsightsInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback<DescribeContributorInsightsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeContributorInsightsValidateBeforeCall(xAmzTarget, describeContributorInsightsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DescribeContributorInsightsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeEndpoints
     * @param xAmzTarget  (required)
     * @param body  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeEndpointsCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull Object body, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=DynamoDB_20120810.DescribeEndpoints";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }


        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }


        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }


        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }


        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }


        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }


        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }


        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }


        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeEndpointsValidateBeforeCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull Object body, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeEndpoints(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling describeEndpoints(Async)");
        }

        return describeEndpointsCall(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Returns the regional endpoint information. For more information on policy permissions, please see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/inter-network-traffic-privacy.html#inter-network-traffic-DescribeEndpoints\&quot;&gt;Internetwork traffic privacy&lt;/a&gt;.
     * @param xAmzTarget  (required)
     * @param body  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DescribeEndpointsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DescribeEndpointsResponse describeEndpoints(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull Object body, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DescribeEndpointsResponse> localVarResp = describeEndpointsWithHttpInfo(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the regional endpoint information. For more information on policy permissions, please see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/inter-network-traffic-privacy.html#inter-network-traffic-DescribeEndpoints\&quot;&gt;Internetwork traffic privacy&lt;/a&gt;.
     * @param xAmzTarget  (required)
     * @param body  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DescribeEndpointsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeEndpointsResponse> describeEndpointsWithHttpInfo(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull Object body, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = describeEndpointsValidateBeforeCall(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DescribeEndpointsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the regional endpoint information. For more information on policy permissions, please see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/inter-network-traffic-privacy.html#inter-network-traffic-DescribeEndpoints\&quot;&gt;Internetwork traffic privacy&lt;/a&gt;.
     * @param xAmzTarget  (required)
     * @param body  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeEndpointsAsync(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull Object body, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback<DescribeEndpointsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeEndpointsValidateBeforeCall(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DescribeEndpointsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeExport
     * @param xAmzTarget  (required)
     * @param describeExportInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ExportNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeExportCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull DescribeExportInput describeExportInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeExportInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=DynamoDB_20120810.DescribeExport";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }


        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }


        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }


        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }


        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }


        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }


        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }


        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }


        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeExportValidateBeforeCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull DescribeExportInput describeExportInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeExport(Async)");
        }

        // verify the required parameter 'describeExportInput' is set
        if (describeExportInput == null) {
            throw new ApiException("Missing the required parameter 'describeExportInput' when calling describeExport(Async)");
        }

        return describeExportCall(xAmzTarget, describeExportInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Describes an existing table export.
     * @param xAmzTarget  (required)
     * @param describeExportInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DescribeExportOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ExportNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public DescribeExportOutput describeExport(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull DescribeExportInput describeExportInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DescribeExportOutput> localVarResp = describeExportWithHttpInfo(xAmzTarget, describeExportInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Describes an existing table export.
     * @param xAmzTarget  (required)
     * @param describeExportInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DescribeExportOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ExportNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeExportOutput> describeExportWithHttpInfo(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull DescribeExportInput describeExportInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = describeExportValidateBeforeCall(xAmzTarget, describeExportInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DescribeExportOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Describes an existing table export.
     * @param xAmzTarget  (required)
     * @param describeExportInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ExportNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeExportAsync(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull DescribeExportInput describeExportInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback<DescribeExportOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeExportValidateBeforeCall(xAmzTarget, describeExportInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DescribeExportOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeGlobalTable
     * @param xAmzTarget  (required)
     * @param describeGlobalTableInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> GlobalTableNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeGlobalTableCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull DescribeGlobalTableInput describeGlobalTableInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeGlobalTableInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=DynamoDB_20120810.DescribeGlobalTable";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }


        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }


        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }


        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }


        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }


        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }


        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }


        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }


        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeGlobalTableValidateBeforeCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull DescribeGlobalTableInput describeGlobalTableInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeGlobalTable(Async)");
        }

        // verify the required parameter 'describeGlobalTableInput' is set
        if (describeGlobalTableInput == null) {
            throw new ApiException("Missing the required parameter 'describeGlobalTableInput' when calling describeGlobalTable(Async)");
        }

        return describeGlobalTableCall(xAmzTarget, describeGlobalTableInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns information about the specified global table.&lt;/p&gt; &lt;important&gt; &lt;p&gt;This operation only applies to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.V1.html\&quot;&gt;Version 2017.11.29 (Legacy)&lt;/a&gt; of global tables. We recommend using &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.V2.html\&quot;&gt;Version 2019.11.21 (Current)&lt;/a&gt; when creating new global tables, as it provides greater flexibility, higher efficiency and consumes less write capacity than 2017.11.29 (Legacy). To determine which version you are using, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.DetermineVersion.html\&quot;&gt;Determining the version&lt;/a&gt;. To update existing global tables from version 2017.11.29 (Legacy) to version 2019.11.21 (Current), see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/V2globaltables_upgrade.html\&quot;&gt; Updating global tables&lt;/a&gt;. &lt;/p&gt; &lt;/important&gt;
     * @param xAmzTarget  (required)
     * @param describeGlobalTableInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DescribeGlobalTableOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> GlobalTableNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeGlobalTableOutput describeGlobalTable(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull DescribeGlobalTableInput describeGlobalTableInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DescribeGlobalTableOutput> localVarResp = describeGlobalTableWithHttpInfo(xAmzTarget, describeGlobalTableInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns information about the specified global table.&lt;/p&gt; &lt;important&gt; &lt;p&gt;This operation only applies to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.V1.html\&quot;&gt;Version 2017.11.29 (Legacy)&lt;/a&gt; of global tables. We recommend using &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.V2.html\&quot;&gt;Version 2019.11.21 (Current)&lt;/a&gt; when creating new global tables, as it provides greater flexibility, higher efficiency and consumes less write capacity than 2017.11.29 (Legacy). To determine which version you are using, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.DetermineVersion.html\&quot;&gt;Determining the version&lt;/a&gt;. To update existing global tables from version 2017.11.29 (Legacy) to version 2019.11.21 (Current), see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/V2globaltables_upgrade.html\&quot;&gt; Updating global tables&lt;/a&gt;. &lt;/p&gt; &lt;/important&gt;
     * @param xAmzTarget  (required)
     * @param describeGlobalTableInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DescribeGlobalTableOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> GlobalTableNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeGlobalTableOutput> describeGlobalTableWithHttpInfo(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull DescribeGlobalTableInput describeGlobalTableInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = describeGlobalTableValidateBeforeCall(xAmzTarget, describeGlobalTableInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DescribeGlobalTableOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns information about the specified global table.&lt;/p&gt; &lt;important&gt; &lt;p&gt;This operation only applies to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.V1.html\&quot;&gt;Version 2017.11.29 (Legacy)&lt;/a&gt; of global tables. We recommend using &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.V2.html\&quot;&gt;Version 2019.11.21 (Current)&lt;/a&gt; when creating new global tables, as it provides greater flexibility, higher efficiency and consumes less write capacity than 2017.11.29 (Legacy). To determine which version you are using, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.DetermineVersion.html\&quot;&gt;Determining the version&lt;/a&gt;. To update existing global tables from version 2017.11.29 (Legacy) to version 2019.11.21 (Current), see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/V2globaltables_upgrade.html\&quot;&gt; Updating global tables&lt;/a&gt;. &lt;/p&gt; &lt;/important&gt;
     * @param xAmzTarget  (required)
     * @param describeGlobalTableInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> GlobalTableNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeGlobalTableAsync(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull DescribeGlobalTableInput describeGlobalTableInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback<DescribeGlobalTableOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeGlobalTableValidateBeforeCall(xAmzTarget, describeGlobalTableInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DescribeGlobalTableOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeGlobalTableSettings
     * @param xAmzTarget  (required)
     * @param describeGlobalTableSettingsInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalTableNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeGlobalTableSettingsCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull DescribeGlobalTableSettingsInput describeGlobalTableSettingsInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeGlobalTableSettingsInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=DynamoDB_20120810.DescribeGlobalTableSettings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }


        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }


        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }


        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }


        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }


        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }


        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }


        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }


        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeGlobalTableSettingsValidateBeforeCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull DescribeGlobalTableSettingsInput describeGlobalTableSettingsInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeGlobalTableSettings(Async)");
        }

        // verify the required parameter 'describeGlobalTableSettingsInput' is set
        if (describeGlobalTableSettingsInput == null) {
            throw new ApiException("Missing the required parameter 'describeGlobalTableSettingsInput' when calling describeGlobalTableSettings(Async)");
        }

        return describeGlobalTableSettingsCall(xAmzTarget, describeGlobalTableSettingsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Describes Region-specific settings for a global table.&lt;/p&gt; &lt;important&gt; &lt;p&gt;This operation only applies to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.V1.html\&quot;&gt;Version 2017.11.29 (Legacy)&lt;/a&gt; of global tables. We recommend using &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.V2.html\&quot;&gt;Version 2019.11.21 (Current)&lt;/a&gt; when creating new global tables, as it provides greater flexibility, higher efficiency and consumes less write capacity than 2017.11.29 (Legacy). To determine which version you are using, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.DetermineVersion.html\&quot;&gt;Determining the version&lt;/a&gt;. To update existing global tables from version 2017.11.29 (Legacy) to version 2019.11.21 (Current), see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/V2globaltables_upgrade.html\&quot;&gt; Updating global tables&lt;/a&gt;. &lt;/p&gt; &lt;/important&gt;
     * @param xAmzTarget  (required)
     * @param describeGlobalTableSettingsInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DescribeGlobalTableSettingsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalTableNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public DescribeGlobalTableSettingsOutput describeGlobalTableSettings(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull DescribeGlobalTableSettingsInput describeGlobalTableSettingsInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DescribeGlobalTableSettingsOutput> localVarResp = describeGlobalTableSettingsWithHttpInfo(xAmzTarget, describeGlobalTableSettingsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Describes Region-specific settings for a global table.&lt;/p&gt; &lt;important&gt; &lt;p&gt;This operation only applies to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.V1.html\&quot;&gt;Version 2017.11.29 (Legacy)&lt;/a&gt; of global tables. We recommend using &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.V2.html\&quot;&gt;Version 2019.11.21 (Current)&lt;/a&gt; when creating new global tables, as it provides greater flexibility, higher efficiency and consumes less write capacity than 2017.11.29 (Legacy). To determine which version you are using, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.DetermineVersion.html\&quot;&gt;Determining the version&lt;/a&gt;. To update existing global tables from version 2017.11.29 (Legacy) to version 2019.11.21 (Current), see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/V2globaltables_upgrade.html\&quot;&gt; Updating global tables&lt;/a&gt;. &lt;/p&gt; &lt;/important&gt;
     * @param xAmzTarget  (required)
     * @param describeGlobalTableSettingsInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DescribeGlobalTableSettingsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalTableNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeGlobalTableSettingsOutput> describeGlobalTableSettingsWithHttpInfo(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull DescribeGlobalTableSettingsInput describeGlobalTableSettingsInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = describeGlobalTableSettingsValidateBeforeCall(xAmzTarget, describeGlobalTableSettingsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DescribeGlobalTableSettingsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Describes Region-specific settings for a global table.&lt;/p&gt; &lt;important&gt; &lt;p&gt;This operation only applies to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.V1.html\&quot;&gt;Version 2017.11.29 (Legacy)&lt;/a&gt; of global tables. We recommend using &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.V2.html\&quot;&gt;Version 2019.11.21 (Current)&lt;/a&gt; when creating new global tables, as it provides greater flexibility, higher efficiency and consumes less write capacity than 2017.11.29 (Legacy). To determine which version you are using, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.DetermineVersion.html\&quot;&gt;Determining the version&lt;/a&gt;. To update existing global tables from version 2017.11.29 (Legacy) to version 2019.11.21 (Current), see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/V2globaltables_upgrade.html\&quot;&gt; Updating global tables&lt;/a&gt;. &lt;/p&gt; &lt;/important&gt;
     * @param xAmzTarget  (required)
     * @param describeGlobalTableSettingsInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalTableNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeGlobalTableSettingsAsync(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull DescribeGlobalTableSettingsInput describeGlobalTableSettingsInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback<DescribeGlobalTableSettingsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeGlobalTableSettingsValidateBeforeCall(xAmzTarget, describeGlobalTableSettingsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DescribeGlobalTableSettingsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeImport
     * @param xAmzTarget  (required)
     * @param describeImportInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ImportNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeImportCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull DescribeImportInput describeImportInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeImportInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=DynamoDB_20120810.DescribeImport";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }


        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }


        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }


        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }


        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }


        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }


        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }


        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }


        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeImportValidateBeforeCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull DescribeImportInput describeImportInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeImport(Async)");
        }

        // verify the required parameter 'describeImportInput' is set
        if (describeImportInput == null) {
            throw new ApiException("Missing the required parameter 'describeImportInput' when calling describeImport(Async)");
        }

        return describeImportCall(xAmzTarget, describeImportInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     *  Represents the properties of the import. 
     * @param xAmzTarget  (required)
     * @param describeImportInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DescribeImportOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ImportNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeImportOutput describeImport(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull DescribeImportInput describeImportInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DescribeImportOutput> localVarResp = describeImportWithHttpInfo(xAmzTarget, describeImportInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     *  Represents the properties of the import. 
     * @param xAmzTarget  (required)
     * @param describeImportInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DescribeImportOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ImportNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeImportOutput> describeImportWithHttpInfo(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull DescribeImportInput describeImportInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = describeImportValidateBeforeCall(xAmzTarget, describeImportInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DescribeImportOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *  Represents the properties of the import. 
     * @param xAmzTarget  (required)
     * @param describeImportInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ImportNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeImportAsync(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull DescribeImportInput describeImportInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback<DescribeImportOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeImportValidateBeforeCall(xAmzTarget, describeImportInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DescribeImportOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeKinesisStreamingDestination
     * @param xAmzTarget  (required)
     * @param describeKinesisStreamingDestinationInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeKinesisStreamingDestinationCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull DescribeKinesisStreamingDestinationInput describeKinesisStreamingDestinationInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeKinesisStreamingDestinationInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=DynamoDB_20120810.DescribeKinesisStreamingDestination";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }


        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }


        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }


        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }


        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }


        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }


        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }


        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }


        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeKinesisStreamingDestinationValidateBeforeCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull DescribeKinesisStreamingDestinationInput describeKinesisStreamingDestinationInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeKinesisStreamingDestination(Async)");
        }

        // verify the required parameter 'describeKinesisStreamingDestinationInput' is set
        if (describeKinesisStreamingDestinationInput == null) {
            throw new ApiException("Missing the required parameter 'describeKinesisStreamingDestinationInput' when calling describeKinesisStreamingDestination(Async)");
        }

        return describeKinesisStreamingDestinationCall(xAmzTarget, describeKinesisStreamingDestinationInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Returns information about the status of Kinesis streaming.
     * @param xAmzTarget  (required)
     * @param describeKinesisStreamingDestinationInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DescribeKinesisStreamingDestinationOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public DescribeKinesisStreamingDestinationOutput describeKinesisStreamingDestination(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull DescribeKinesisStreamingDestinationInput describeKinesisStreamingDestinationInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DescribeKinesisStreamingDestinationOutput> localVarResp = describeKinesisStreamingDestinationWithHttpInfo(xAmzTarget, describeKinesisStreamingDestinationInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns information about the status of Kinesis streaming.
     * @param xAmzTarget  (required)
     * @param describeKinesisStreamingDestinationInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DescribeKinesisStreamingDestinationOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeKinesisStreamingDestinationOutput> describeKinesisStreamingDestinationWithHttpInfo(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull DescribeKinesisStreamingDestinationInput describeKinesisStreamingDestinationInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = describeKinesisStreamingDestinationValidateBeforeCall(xAmzTarget, describeKinesisStreamingDestinationInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DescribeKinesisStreamingDestinationOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns information about the status of Kinesis streaming.
     * @param xAmzTarget  (required)
     * @param describeKinesisStreamingDestinationInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeKinesisStreamingDestinationAsync(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull DescribeKinesisStreamingDestinationInput describeKinesisStreamingDestinationInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback<DescribeKinesisStreamingDestinationOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeKinesisStreamingDestinationValidateBeforeCall(xAmzTarget, describeKinesisStreamingDestinationInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DescribeKinesisStreamingDestinationOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeLimits
     * @param xAmzTarget  (required)
     * @param body  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeLimitsCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull Object body, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=DynamoDB_20120810.DescribeLimits";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }


        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }


        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }


        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }


        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }


        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }


        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }


        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }


        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeLimitsValidateBeforeCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull Object body, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeLimits(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling describeLimits(Async)");
        }

        return describeLimitsCall(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns the current provisioned-capacity quotas for your Amazon Web Services account in a Region, both for the Region as a whole and for any one DynamoDB table that you create there.&lt;/p&gt; &lt;p&gt;When you establish an Amazon Web Services account, the account has initial quotas on the maximum read capacity units and write capacity units that you can provision across all of your DynamoDB tables in a given Region. Also, there are per-table quotas that apply when you create a table there. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html\&quot;&gt;Service, Account, and Table Quotas&lt;/a&gt; page in the &lt;i&gt;Amazon DynamoDB Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;Although you can increase these quotas by filing a case at &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/support/home#/\&quot;&gt;Amazon Web Services Support Center&lt;/a&gt;, obtaining the increase is not instantaneous. The &lt;code&gt;DescribeLimits&lt;/code&gt; action lets you write code to compare the capacity you are currently using to those quotas imposed by your account so that you have enough time to apply for an increase before you hit a quota.&lt;/p&gt; &lt;p&gt;For example, you could use one of the Amazon Web Services SDKs to do the following:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Call &lt;code&gt;DescribeLimits&lt;/code&gt; for a particular Region to obtain your current account quotas on provisioned capacity there.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Create a variable to hold the aggregate read capacity units provisioned for all your tables in that Region, and one to hold the aggregate write capacity units. Zero them both.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Call &lt;code&gt;ListTables&lt;/code&gt; to obtain a list of all your DynamoDB tables.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For each table name listed by &lt;code&gt;ListTables&lt;/code&gt;, do the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Call &lt;code&gt;DescribeTable&lt;/code&gt; with the table name.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use the data returned by &lt;code&gt;DescribeTable&lt;/code&gt; to add the read capacity units and write capacity units provisioned for the table itself to your variables.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the table has one or more global secondary indexes (GSIs), loop over these GSIs and add their provisioned capacity values to your variables as well.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Report the account quotas for that Region returned by &lt;code&gt;DescribeLimits&lt;/code&gt;, along with the total current provisioned capacity levels you have calculated.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;This will let you see whether you are getting close to your account-level quotas.&lt;/p&gt; &lt;p&gt;The per-table quotas apply only when you are creating a new table. They restrict the sum of the provisioned capacity of the new table itself and all its global secondary indexes.&lt;/p&gt; &lt;p&gt;For existing tables and their GSIs, DynamoDB doesn&#39;t let you increase provisioned capacity extremely rapidly, but the only quota that applies is that the aggregate provisioned capacity over all your tables and GSIs cannot exceed either of the per-account quotas.&lt;/p&gt; &lt;note&gt; &lt;p&gt; &lt;code&gt;DescribeLimits&lt;/code&gt; should only be called periodically. You can expect throttling errors if you call it more than once in a minute.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;The &lt;code&gt;DescribeLimits&lt;/code&gt; Request element has no content.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param body  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DescribeLimitsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public DescribeLimitsOutput describeLimits(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull Object body, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DescribeLimitsOutput> localVarResp = describeLimitsWithHttpInfo(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns the current provisioned-capacity quotas for your Amazon Web Services account in a Region, both for the Region as a whole and for any one DynamoDB table that you create there.&lt;/p&gt; &lt;p&gt;When you establish an Amazon Web Services account, the account has initial quotas on the maximum read capacity units and write capacity units that you can provision across all of your DynamoDB tables in a given Region. Also, there are per-table quotas that apply when you create a table there. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html\&quot;&gt;Service, Account, and Table Quotas&lt;/a&gt; page in the &lt;i&gt;Amazon DynamoDB Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;Although you can increase these quotas by filing a case at &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/support/home#/\&quot;&gt;Amazon Web Services Support Center&lt;/a&gt;, obtaining the increase is not instantaneous. The &lt;code&gt;DescribeLimits&lt;/code&gt; action lets you write code to compare the capacity you are currently using to those quotas imposed by your account so that you have enough time to apply for an increase before you hit a quota.&lt;/p&gt; &lt;p&gt;For example, you could use one of the Amazon Web Services SDKs to do the following:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Call &lt;code&gt;DescribeLimits&lt;/code&gt; for a particular Region to obtain your current account quotas on provisioned capacity there.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Create a variable to hold the aggregate read capacity units provisioned for all your tables in that Region, and one to hold the aggregate write capacity units. Zero them both.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Call &lt;code&gt;ListTables&lt;/code&gt; to obtain a list of all your DynamoDB tables.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For each table name listed by &lt;code&gt;ListTables&lt;/code&gt;, do the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Call &lt;code&gt;DescribeTable&lt;/code&gt; with the table name.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use the data returned by &lt;code&gt;DescribeTable&lt;/code&gt; to add the read capacity units and write capacity units provisioned for the table itself to your variables.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the table has one or more global secondary indexes (GSIs), loop over these GSIs and add their provisioned capacity values to your variables as well.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Report the account quotas for that Region returned by &lt;code&gt;DescribeLimits&lt;/code&gt;, along with the total current provisioned capacity levels you have calculated.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;This will let you see whether you are getting close to your account-level quotas.&lt;/p&gt; &lt;p&gt;The per-table quotas apply only when you are creating a new table. They restrict the sum of the provisioned capacity of the new table itself and all its global secondary indexes.&lt;/p&gt; &lt;p&gt;For existing tables and their GSIs, DynamoDB doesn&#39;t let you increase provisioned capacity extremely rapidly, but the only quota that applies is that the aggregate provisioned capacity over all your tables and GSIs cannot exceed either of the per-account quotas.&lt;/p&gt; &lt;note&gt; &lt;p&gt; &lt;code&gt;DescribeLimits&lt;/code&gt; should only be called periodically. You can expect throttling errors if you call it more than once in a minute.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;The &lt;code&gt;DescribeLimits&lt;/code&gt; Request element has no content.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param body  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DescribeLimitsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeLimitsOutput> describeLimitsWithHttpInfo(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull Object body, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = describeLimitsValidateBeforeCall(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DescribeLimitsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns the current provisioned-capacity quotas for your Amazon Web Services account in a Region, both for the Region as a whole and for any one DynamoDB table that you create there.&lt;/p&gt; &lt;p&gt;When you establish an Amazon Web Services account, the account has initial quotas on the maximum read capacity units and write capacity units that you can provision across all of your DynamoDB tables in a given Region. Also, there are per-table quotas that apply when you create a table there. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html\&quot;&gt;Service, Account, and Table Quotas&lt;/a&gt; page in the &lt;i&gt;Amazon DynamoDB Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;Although you can increase these quotas by filing a case at &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/support/home#/\&quot;&gt;Amazon Web Services Support Center&lt;/a&gt;, obtaining the increase is not instantaneous. The &lt;code&gt;DescribeLimits&lt;/code&gt; action lets you write code to compare the capacity you are currently using to those quotas imposed by your account so that you have enough time to apply for an increase before you hit a quota.&lt;/p&gt; &lt;p&gt;For example, you could use one of the Amazon Web Services SDKs to do the following:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Call &lt;code&gt;DescribeLimits&lt;/code&gt; for a particular Region to obtain your current account quotas on provisioned capacity there.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Create a variable to hold the aggregate read capacity units provisioned for all your tables in that Region, and one to hold the aggregate write capacity units. Zero them both.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Call &lt;code&gt;ListTables&lt;/code&gt; to obtain a list of all your DynamoDB tables.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For each table name listed by &lt;code&gt;ListTables&lt;/code&gt;, do the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Call &lt;code&gt;DescribeTable&lt;/code&gt; with the table name.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use the data returned by &lt;code&gt;DescribeTable&lt;/code&gt; to add the read capacity units and write capacity units provisioned for the table itself to your variables.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the table has one or more global secondary indexes (GSIs), loop over these GSIs and add their provisioned capacity values to your variables as well.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Report the account quotas for that Region returned by &lt;code&gt;DescribeLimits&lt;/code&gt;, along with the total current provisioned capacity levels you have calculated.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;This will let you see whether you are getting close to your account-level quotas.&lt;/p&gt; &lt;p&gt;The per-table quotas apply only when you are creating a new table. They restrict the sum of the provisioned capacity of the new table itself and all its global secondary indexes.&lt;/p&gt; &lt;p&gt;For existing tables and their GSIs, DynamoDB doesn&#39;t let you increase provisioned capacity extremely rapidly, but the only quota that applies is that the aggregate provisioned capacity over all your tables and GSIs cannot exceed either of the per-account quotas.&lt;/p&gt; &lt;note&gt; &lt;p&gt; &lt;code&gt;DescribeLimits&lt;/code&gt; should only be called periodically. You can expect throttling errors if you call it more than once in a minute.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;The &lt;code&gt;DescribeLimits&lt;/code&gt; Request element has no content.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param body  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeLimitsAsync(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull Object body, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback<DescribeLimitsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeLimitsValidateBeforeCall(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DescribeLimitsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeTable
     * @param xAmzTarget  (required)
     * @param describeTableInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeTableCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull DescribeTableInput describeTableInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeTableInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=DynamoDB_20120810.DescribeTable";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }


        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }


        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }


        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }


        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }


        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }


        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }


        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }


        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeTableValidateBeforeCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull DescribeTableInput describeTableInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeTable(Async)");
        }

        // verify the required parameter 'describeTableInput' is set
        if (describeTableInput == null) {
            throw new ApiException("Missing the required parameter 'describeTableInput' when calling describeTable(Async)");
        }

        return describeTableCall(xAmzTarget, describeTableInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns information about the table, including the current status of the table, when it was created, the primary key schema, and any indexes on the table.&lt;/p&gt; &lt;important&gt; &lt;p&gt;This operation only applies to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.V2.html\&quot;&gt;Version 2019.11.21 (Current)&lt;/a&gt; of global tables. &lt;/p&gt; &lt;/important&gt; &lt;note&gt; &lt;p&gt;If you issue a &lt;code&gt;DescribeTable&lt;/code&gt; request immediately after a &lt;code&gt;CreateTable&lt;/code&gt; request, DynamoDB might return a &lt;code&gt;ResourceNotFoundException&lt;/code&gt;. This is because &lt;code&gt;DescribeTable&lt;/code&gt; uses an eventually consistent query, and the metadata for your table might not be available at that moment. Wait for a few seconds, and then try the &lt;code&gt;DescribeTable&lt;/code&gt; request again.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param describeTableInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DescribeTableOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public DescribeTableOutput describeTable(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull DescribeTableInput describeTableInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DescribeTableOutput> localVarResp = describeTableWithHttpInfo(xAmzTarget, describeTableInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns information about the table, including the current status of the table, when it was created, the primary key schema, and any indexes on the table.&lt;/p&gt; &lt;important&gt; &lt;p&gt;This operation only applies to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.V2.html\&quot;&gt;Version 2019.11.21 (Current)&lt;/a&gt; of global tables. &lt;/p&gt; &lt;/important&gt; &lt;note&gt; &lt;p&gt;If you issue a &lt;code&gt;DescribeTable&lt;/code&gt; request immediately after a &lt;code&gt;CreateTable&lt;/code&gt; request, DynamoDB might return a &lt;code&gt;ResourceNotFoundException&lt;/code&gt;. This is because &lt;code&gt;DescribeTable&lt;/code&gt; uses an eventually consistent query, and the metadata for your table might not be available at that moment. Wait for a few seconds, and then try the &lt;code&gt;DescribeTable&lt;/code&gt; request again.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param describeTableInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DescribeTableOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeTableOutput> describeTableWithHttpInfo(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull DescribeTableInput describeTableInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = describeTableValidateBeforeCall(xAmzTarget, describeTableInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DescribeTableOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns information about the table, including the current status of the table, when it was created, the primary key schema, and any indexes on the table.&lt;/p&gt; &lt;important&gt; &lt;p&gt;This operation only applies to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.V2.html\&quot;&gt;Version 2019.11.21 (Current)&lt;/a&gt; of global tables. &lt;/p&gt; &lt;/important&gt; &lt;note&gt; &lt;p&gt;If you issue a &lt;code&gt;DescribeTable&lt;/code&gt; request immediately after a &lt;code&gt;CreateTable&lt;/code&gt; request, DynamoDB might return a &lt;code&gt;ResourceNotFoundException&lt;/code&gt;. This is because &lt;code&gt;DescribeTable&lt;/code&gt; uses an eventually consistent query, and the metadata for your table might not be available at that moment. Wait for a few seconds, and then try the &lt;code&gt;DescribeTable&lt;/code&gt; request again.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param describeTableInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeTableAsync(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull DescribeTableInput describeTableInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback<DescribeTableOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeTableValidateBeforeCall(xAmzTarget, describeTableInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DescribeTableOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeTableReplicaAutoScaling
     * @param xAmzTarget  (required)
     * @param describeTableReplicaAutoScalingInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeTableReplicaAutoScalingCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull DescribeTableReplicaAutoScalingInput describeTableReplicaAutoScalingInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeTableReplicaAutoScalingInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=DynamoDB_20120810.DescribeTableReplicaAutoScaling";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }


        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }


        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }


        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }


        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }


        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }


        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }


        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }


        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeTableReplicaAutoScalingValidateBeforeCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull DescribeTableReplicaAutoScalingInput describeTableReplicaAutoScalingInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeTableReplicaAutoScaling(Async)");
        }

        // verify the required parameter 'describeTableReplicaAutoScalingInput' is set
        if (describeTableReplicaAutoScalingInput == null) {
            throw new ApiException("Missing the required parameter 'describeTableReplicaAutoScalingInput' when calling describeTableReplicaAutoScaling(Async)");
        }

        return describeTableReplicaAutoScalingCall(xAmzTarget, describeTableReplicaAutoScalingInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Describes auto scaling settings across replicas of the global table at once.&lt;/p&gt; &lt;important&gt; &lt;p&gt;This operation only applies to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.V2.html\&quot;&gt;Version 2019.11.21 (Current)&lt;/a&gt; of global tables.&lt;/p&gt; &lt;/important&gt;
     * @param xAmzTarget  (required)
     * @param describeTableReplicaAutoScalingInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DescribeTableReplicaAutoScalingOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public DescribeTableReplicaAutoScalingOutput describeTableReplicaAutoScaling(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull DescribeTableReplicaAutoScalingInput describeTableReplicaAutoScalingInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DescribeTableReplicaAutoScalingOutput> localVarResp = describeTableReplicaAutoScalingWithHttpInfo(xAmzTarget, describeTableReplicaAutoScalingInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Describes auto scaling settings across replicas of the global table at once.&lt;/p&gt; &lt;important&gt; &lt;p&gt;This operation only applies to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.V2.html\&quot;&gt;Version 2019.11.21 (Current)&lt;/a&gt; of global tables.&lt;/p&gt; &lt;/important&gt;
     * @param xAmzTarget  (required)
     * @param describeTableReplicaAutoScalingInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DescribeTableReplicaAutoScalingOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeTableReplicaAutoScalingOutput> describeTableReplicaAutoScalingWithHttpInfo(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull DescribeTableReplicaAutoScalingInput describeTableReplicaAutoScalingInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = describeTableReplicaAutoScalingValidateBeforeCall(xAmzTarget, describeTableReplicaAutoScalingInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DescribeTableReplicaAutoScalingOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Describes auto scaling settings across replicas of the global table at once.&lt;/p&gt; &lt;important&gt; &lt;p&gt;This operation only applies to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.V2.html\&quot;&gt;Version 2019.11.21 (Current)&lt;/a&gt; of global tables.&lt;/p&gt; &lt;/important&gt;
     * @param xAmzTarget  (required)
     * @param describeTableReplicaAutoScalingInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeTableReplicaAutoScalingAsync(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull DescribeTableReplicaAutoScalingInput describeTableReplicaAutoScalingInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback<DescribeTableReplicaAutoScalingOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeTableReplicaAutoScalingValidateBeforeCall(xAmzTarget, describeTableReplicaAutoScalingInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DescribeTableReplicaAutoScalingOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeTimeToLive
     * @param xAmzTarget  (required)
     * @param describeTimeToLiveInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeTimeToLiveCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull DescribeTimeToLiveInput describeTimeToLiveInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeTimeToLiveInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=DynamoDB_20120810.DescribeTimeToLive";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }


        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }


        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }


        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }


        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }


        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }


        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }


        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }


        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeTimeToLiveValidateBeforeCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull DescribeTimeToLiveInput describeTimeToLiveInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeTimeToLive(Async)");
        }

        // verify the required parameter 'describeTimeToLiveInput' is set
        if (describeTimeToLiveInput == null) {
            throw new ApiException("Missing the required parameter 'describeTimeToLiveInput' when calling describeTimeToLive(Async)");
        }

        return describeTimeToLiveCall(xAmzTarget, describeTimeToLiveInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Gives a description of the Time to Live (TTL) status on the specified table. 
     * @param xAmzTarget  (required)
     * @param describeTimeToLiveInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DescribeTimeToLiveOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public DescribeTimeToLiveOutput describeTimeToLive(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull DescribeTimeToLiveInput describeTimeToLiveInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DescribeTimeToLiveOutput> localVarResp = describeTimeToLiveWithHttpInfo(xAmzTarget, describeTimeToLiveInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Gives a description of the Time to Live (TTL) status on the specified table. 
     * @param xAmzTarget  (required)
     * @param describeTimeToLiveInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DescribeTimeToLiveOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeTimeToLiveOutput> describeTimeToLiveWithHttpInfo(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull DescribeTimeToLiveInput describeTimeToLiveInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = describeTimeToLiveValidateBeforeCall(xAmzTarget, describeTimeToLiveInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DescribeTimeToLiveOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gives a description of the Time to Live (TTL) status on the specified table. 
     * @param xAmzTarget  (required)
     * @param describeTimeToLiveInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeTimeToLiveAsync(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull DescribeTimeToLiveInput describeTimeToLiveInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback<DescribeTimeToLiveOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeTimeToLiveValidateBeforeCall(xAmzTarget, describeTimeToLiveInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DescribeTimeToLiveOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for disableKinesisStreamingDestination
     * @param xAmzTarget  (required)
     * @param kinesisStreamingDestinationInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceInUseException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disableKinesisStreamingDestinationCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull KinesisStreamingDestinationInput kinesisStreamingDestinationInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = kinesisStreamingDestinationInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=DynamoDB_20120810.DisableKinesisStreamingDestination";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }


        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }


        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }


        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }


        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }


        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }


        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }


        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }


        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call disableKinesisStreamingDestinationValidateBeforeCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull KinesisStreamingDestinationInput kinesisStreamingDestinationInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling disableKinesisStreamingDestination(Async)");
        }

        // verify the required parameter 'kinesisStreamingDestinationInput' is set
        if (kinesisStreamingDestinationInput == null) {
            throw new ApiException("Missing the required parameter 'kinesisStreamingDestinationInput' when calling disableKinesisStreamingDestination(Async)");
        }

        return disableKinesisStreamingDestinationCall(xAmzTarget, kinesisStreamingDestinationInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Stops replication from the DynamoDB table to the Kinesis data stream. This is done without deleting either of the resources.
     * @param xAmzTarget  (required)
     * @param kinesisStreamingDestinationInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return KinesisStreamingDestinationOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceInUseException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public KinesisStreamingDestinationOutput disableKinesisStreamingDestination(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull KinesisStreamingDestinationInput kinesisStreamingDestinationInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders) throws ApiException {
        ApiResponse<KinesisStreamingDestinationOutput> localVarResp = disableKinesisStreamingDestinationWithHttpInfo(xAmzTarget, kinesisStreamingDestinationInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Stops replication from the DynamoDB table to the Kinesis data stream. This is done without deleting either of the resources.
     * @param xAmzTarget  (required)
     * @param kinesisStreamingDestinationInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;KinesisStreamingDestinationOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceInUseException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KinesisStreamingDestinationOutput> disableKinesisStreamingDestinationWithHttpInfo(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull KinesisStreamingDestinationInput kinesisStreamingDestinationInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = disableKinesisStreamingDestinationValidateBeforeCall(xAmzTarget, kinesisStreamingDestinationInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<KinesisStreamingDestinationOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Stops replication from the DynamoDB table to the Kinesis data stream. This is done without deleting either of the resources.
     * @param xAmzTarget  (required)
     * @param kinesisStreamingDestinationInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceInUseException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disableKinesisStreamingDestinationAsync(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull KinesisStreamingDestinationInput kinesisStreamingDestinationInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback<KinesisStreamingDestinationOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = disableKinesisStreamingDestinationValidateBeforeCall(xAmzTarget, kinesisStreamingDestinationInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<KinesisStreamingDestinationOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enableKinesisStreamingDestination
     * @param xAmzTarget  (required)
     * @param kinesisStreamingDestinationInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceInUseException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enableKinesisStreamingDestinationCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull KinesisStreamingDestinationInput kinesisStreamingDestinationInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = kinesisStreamingDestinationInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=DynamoDB_20120810.EnableKinesisStreamingDestination";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }


        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }


        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }


        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }


        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }


        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }


        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }


        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }


        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enableKinesisStreamingDestinationValidateBeforeCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull KinesisStreamingDestinationInput kinesisStreamingDestinationInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling enableKinesisStreamingDestination(Async)");
        }

        // verify the required parameter 'kinesisStreamingDestinationInput' is set
        if (kinesisStreamingDestinationInput == null) {
            throw new ApiException("Missing the required parameter 'kinesisStreamingDestinationInput' when calling enableKinesisStreamingDestination(Async)");
        }

        return enableKinesisStreamingDestinationCall(xAmzTarget, kinesisStreamingDestinationInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Starts table data replication to the specified Kinesis data stream at a timestamp chosen during the enable workflow. If this operation doesn&#39;t return results immediately, use DescribeKinesisStreamingDestination to check if streaming to the Kinesis data stream is ACTIVE.
     * @param xAmzTarget  (required)
     * @param kinesisStreamingDestinationInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return KinesisStreamingDestinationOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceInUseException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public KinesisStreamingDestinationOutput enableKinesisStreamingDestination(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull KinesisStreamingDestinationInput kinesisStreamingDestinationInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders) throws ApiException {
        ApiResponse<KinesisStreamingDestinationOutput> localVarResp = enableKinesisStreamingDestinationWithHttpInfo(xAmzTarget, kinesisStreamingDestinationInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Starts table data replication to the specified Kinesis data stream at a timestamp chosen during the enable workflow. If this operation doesn&#39;t return results immediately, use DescribeKinesisStreamingDestination to check if streaming to the Kinesis data stream is ACTIVE.
     * @param xAmzTarget  (required)
     * @param kinesisStreamingDestinationInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;KinesisStreamingDestinationOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceInUseException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KinesisStreamingDestinationOutput> enableKinesisStreamingDestinationWithHttpInfo(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull KinesisStreamingDestinationInput kinesisStreamingDestinationInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = enableKinesisStreamingDestinationValidateBeforeCall(xAmzTarget, kinesisStreamingDestinationInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<KinesisStreamingDestinationOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Starts table data replication to the specified Kinesis data stream at a timestamp chosen during the enable workflow. If this operation doesn&#39;t return results immediately, use DescribeKinesisStreamingDestination to check if streaming to the Kinesis data stream is ACTIVE.
     * @param xAmzTarget  (required)
     * @param kinesisStreamingDestinationInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceInUseException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enableKinesisStreamingDestinationAsync(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull KinesisStreamingDestinationInput kinesisStreamingDestinationInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback<KinesisStreamingDestinationOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = enableKinesisStreamingDestinationValidateBeforeCall(xAmzTarget, kinesisStreamingDestinationInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<KinesisStreamingDestinationOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for executeStatement
     * @param xAmzTarget  (required)
     * @param executeStatementInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ConditionalCheckFailedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ProvisionedThroughputExceededException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ItemCollectionSizeLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TransactionConflictException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> RequestLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> DuplicateItemException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call executeStatementCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull ExecuteStatementInput executeStatementInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = executeStatementInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=DynamoDB_20120810.ExecuteStatement";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }


        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }


        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }


        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }


        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }


        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }


        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }


        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }


        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call executeStatementValidateBeforeCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull ExecuteStatementInput executeStatementInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling executeStatement(Async)");
        }

        // verify the required parameter 'executeStatementInput' is set
        if (executeStatementInput == null) {
            throw new ApiException("Missing the required parameter 'executeStatementInput' when calling executeStatement(Async)");
        }

        return executeStatementCall(xAmzTarget, executeStatementInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;This operation allows you to perform reads and singleton writes on data stored in DynamoDB, using PartiQL.&lt;/p&gt; &lt;p&gt;For PartiQL reads (&lt;code&gt;SELECT&lt;/code&gt; statement), if the total number of processed items exceeds the maximum dataset size limit of 1 MB, the read stops and results are returned to the user as a &lt;code&gt;LastEvaluatedKey&lt;/code&gt; value to continue the read in a subsequent operation. If the filter criteria in &lt;code&gt;WHERE&lt;/code&gt; clause does not match any data, the read will return an empty result set.&lt;/p&gt; &lt;p&gt;A single &lt;code&gt;SELECT&lt;/code&gt; statement response can return up to the maximum number of items (if using the Limit parameter) or a maximum of 1 MB of data (and then apply any filtering to the results using &lt;code&gt;WHERE&lt;/code&gt; clause). If &lt;code&gt;LastEvaluatedKey&lt;/code&gt; is present in the response, you need to paginate the result set. If &lt;code&gt;NextToken&lt;/code&gt; is present, you need to paginate the result set and include &lt;code&gt;NextToken&lt;/code&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param executeStatementInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ExecuteStatementOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ConditionalCheckFailedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ProvisionedThroughputExceededException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ItemCollectionSizeLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TransactionConflictException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> RequestLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> DuplicateItemException </td><td>  -  </td></tr>
     </table>
     */
    public ExecuteStatementOutput executeStatement(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull ExecuteStatementInput executeStatementInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders) throws ApiException {
        ApiResponse<ExecuteStatementOutput> localVarResp = executeStatementWithHttpInfo(xAmzTarget, executeStatementInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;This operation allows you to perform reads and singleton writes on data stored in DynamoDB, using PartiQL.&lt;/p&gt; &lt;p&gt;For PartiQL reads (&lt;code&gt;SELECT&lt;/code&gt; statement), if the total number of processed items exceeds the maximum dataset size limit of 1 MB, the read stops and results are returned to the user as a &lt;code&gt;LastEvaluatedKey&lt;/code&gt; value to continue the read in a subsequent operation. If the filter criteria in &lt;code&gt;WHERE&lt;/code&gt; clause does not match any data, the read will return an empty result set.&lt;/p&gt; &lt;p&gt;A single &lt;code&gt;SELECT&lt;/code&gt; statement response can return up to the maximum number of items (if using the Limit parameter) or a maximum of 1 MB of data (and then apply any filtering to the results using &lt;code&gt;WHERE&lt;/code&gt; clause). If &lt;code&gt;LastEvaluatedKey&lt;/code&gt; is present in the response, you need to paginate the result set. If &lt;code&gt;NextToken&lt;/code&gt; is present, you need to paginate the result set and include &lt;code&gt;NextToken&lt;/code&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param executeStatementInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;ExecuteStatementOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ConditionalCheckFailedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ProvisionedThroughputExceededException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ItemCollectionSizeLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TransactionConflictException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> RequestLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> DuplicateItemException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExecuteStatementOutput> executeStatementWithHttpInfo(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull ExecuteStatementInput executeStatementInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = executeStatementValidateBeforeCall(xAmzTarget, executeStatementInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<ExecuteStatementOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;This operation allows you to perform reads and singleton writes on data stored in DynamoDB, using PartiQL.&lt;/p&gt; &lt;p&gt;For PartiQL reads (&lt;code&gt;SELECT&lt;/code&gt; statement), if the total number of processed items exceeds the maximum dataset size limit of 1 MB, the read stops and results are returned to the user as a &lt;code&gt;LastEvaluatedKey&lt;/code&gt; value to continue the read in a subsequent operation. If the filter criteria in &lt;code&gt;WHERE&lt;/code&gt; clause does not match any data, the read will return an empty result set.&lt;/p&gt; &lt;p&gt;A single &lt;code&gt;SELECT&lt;/code&gt; statement response can return up to the maximum number of items (if using the Limit parameter) or a maximum of 1 MB of data (and then apply any filtering to the results using &lt;code&gt;WHERE&lt;/code&gt; clause). If &lt;code&gt;LastEvaluatedKey&lt;/code&gt; is present in the response, you need to paginate the result set. If &lt;code&gt;NextToken&lt;/code&gt; is present, you need to paginate the result set and include &lt;code&gt;NextToken&lt;/code&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param executeStatementInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ConditionalCheckFailedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ProvisionedThroughputExceededException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ItemCollectionSizeLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TransactionConflictException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> RequestLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> DuplicateItemException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call executeStatementAsync(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull ExecuteStatementInput executeStatementInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback<ExecuteStatementOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = executeStatementValidateBeforeCall(xAmzTarget, executeStatementInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<ExecuteStatementOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for executeTransaction
     * @param xAmzTarget  (required)
     * @param executeTransactionInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TransactionCanceledException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TransactionInProgressException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> IdempotentParameterMismatchException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ProvisionedThroughputExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> RequestLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call executeTransactionCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull ExecuteTransactionInput executeTransactionInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = executeTransactionInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=DynamoDB_20120810.ExecuteTransaction";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }


        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }


        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }


        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }


        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }


        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }


        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }


        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }


        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call executeTransactionValidateBeforeCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull ExecuteTransactionInput executeTransactionInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling executeTransaction(Async)");
        }

        // verify the required parameter 'executeTransactionInput' is set
        if (executeTransactionInput == null) {
            throw new ApiException("Missing the required parameter 'executeTransactionInput' when calling executeTransaction(Async)");
        }

        return executeTransactionCall(xAmzTarget, executeTransactionInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;This operation allows you to perform transactional reads or writes on data stored in DynamoDB, using PartiQL.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The entire transaction must consist of either read statements or write statements, you cannot mix both in one transaction. The EXISTS function is an exception and can be used to check the condition of specific attributes of the item in a similar manner to &lt;code&gt;ConditionCheck&lt;/code&gt; in the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/transaction-apis.html#transaction-apis-txwriteitems\&quot;&gt;TransactWriteItems&lt;/a&gt; API.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param executeTransactionInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ExecuteTransactionOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TransactionCanceledException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TransactionInProgressException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> IdempotentParameterMismatchException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ProvisionedThroughputExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> RequestLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public ExecuteTransactionOutput executeTransaction(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull ExecuteTransactionInput executeTransactionInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders) throws ApiException {
        ApiResponse<ExecuteTransactionOutput> localVarResp = executeTransactionWithHttpInfo(xAmzTarget, executeTransactionInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;This operation allows you to perform transactional reads or writes on data stored in DynamoDB, using PartiQL.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The entire transaction must consist of either read statements or write statements, you cannot mix both in one transaction. The EXISTS function is an exception and can be used to check the condition of specific attributes of the item in a similar manner to &lt;code&gt;ConditionCheck&lt;/code&gt; in the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/transaction-apis.html#transaction-apis-txwriteitems\&quot;&gt;TransactWriteItems&lt;/a&gt; API.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param executeTransactionInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;ExecuteTransactionOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TransactionCanceledException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TransactionInProgressException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> IdempotentParameterMismatchException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ProvisionedThroughputExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> RequestLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExecuteTransactionOutput> executeTransactionWithHttpInfo(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull ExecuteTransactionInput executeTransactionInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = executeTransactionValidateBeforeCall(xAmzTarget, executeTransactionInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<ExecuteTransactionOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;This operation allows you to perform transactional reads or writes on data stored in DynamoDB, using PartiQL.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The entire transaction must consist of either read statements or write statements, you cannot mix both in one transaction. The EXISTS function is an exception and can be used to check the condition of specific attributes of the item in a similar manner to &lt;code&gt;ConditionCheck&lt;/code&gt; in the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/transaction-apis.html#transaction-apis-txwriteitems\&quot;&gt;TransactWriteItems&lt;/a&gt; API.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param executeTransactionInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TransactionCanceledException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TransactionInProgressException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> IdempotentParameterMismatchException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ProvisionedThroughputExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> RequestLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call executeTransactionAsync(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull ExecuteTransactionInput executeTransactionInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback<ExecuteTransactionOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = executeTransactionValidateBeforeCall(xAmzTarget, executeTransactionInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<ExecuteTransactionOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for exportTableToPointInTime
     * @param xAmzTarget  (required)
     * @param exportTableToPointInTimeInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TableNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> PointInTimeRecoveryUnavailableException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidExportTimeException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ExportConflictException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportTableToPointInTimeCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull ExportTableToPointInTimeInput exportTableToPointInTimeInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = exportTableToPointInTimeInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=DynamoDB_20120810.ExportTableToPointInTime";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }


        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }


        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }


        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }


        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }


        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }


        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }


        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }


        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call exportTableToPointInTimeValidateBeforeCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull ExportTableToPointInTimeInput exportTableToPointInTimeInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling exportTableToPointInTime(Async)");
        }

        // verify the required parameter 'exportTableToPointInTimeInput' is set
        if (exportTableToPointInTimeInput == null) {
            throw new ApiException("Missing the required parameter 'exportTableToPointInTimeInput' when calling exportTableToPointInTime(Async)");
        }

        return exportTableToPointInTimeCall(xAmzTarget, exportTableToPointInTimeInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Exports table data to an S3 bucket. The table must have point in time recovery enabled, and you can export data from any time within the point in time recovery window.
     * @param xAmzTarget  (required)
     * @param exportTableToPointInTimeInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ExportTableToPointInTimeOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TableNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> PointInTimeRecoveryUnavailableException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidExportTimeException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ExportConflictException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public ExportTableToPointInTimeOutput exportTableToPointInTime(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull ExportTableToPointInTimeInput exportTableToPointInTimeInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders) throws ApiException {
        ApiResponse<ExportTableToPointInTimeOutput> localVarResp = exportTableToPointInTimeWithHttpInfo(xAmzTarget, exportTableToPointInTimeInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Exports table data to an S3 bucket. The table must have point in time recovery enabled, and you can export data from any time within the point in time recovery window.
     * @param xAmzTarget  (required)
     * @param exportTableToPointInTimeInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;ExportTableToPointInTimeOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TableNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> PointInTimeRecoveryUnavailableException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidExportTimeException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ExportConflictException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExportTableToPointInTimeOutput> exportTableToPointInTimeWithHttpInfo(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull ExportTableToPointInTimeInput exportTableToPointInTimeInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = exportTableToPointInTimeValidateBeforeCall(xAmzTarget, exportTableToPointInTimeInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<ExportTableToPointInTimeOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Exports table data to an S3 bucket. The table must have point in time recovery enabled, and you can export data from any time within the point in time recovery window.
     * @param xAmzTarget  (required)
     * @param exportTableToPointInTimeInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TableNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> PointInTimeRecoveryUnavailableException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidExportTimeException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ExportConflictException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportTableToPointInTimeAsync(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull ExportTableToPointInTimeInput exportTableToPointInTimeInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback<ExportTableToPointInTimeOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = exportTableToPointInTimeValidateBeforeCall(xAmzTarget, exportTableToPointInTimeInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<ExportTableToPointInTimeOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getItem
     * @param xAmzTarget  (required)
     * @param getItemInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ProvisionedThroughputExceededException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RequestLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getItemCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull GetItemInput getItemInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getItemInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=DynamoDB_20120810.GetItem";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }


        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }


        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }


        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }


        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }


        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }


        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }


        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }


        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getItemValidateBeforeCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull GetItemInput getItemInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling getItem(Async)");
        }

        // verify the required parameter 'getItemInput' is set
        if (getItemInput == null) {
            throw new ApiException("Missing the required parameter 'getItemInput' when calling getItem(Async)");
        }

        return getItemCall(xAmzTarget, getItemInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;The &lt;code&gt;GetItem&lt;/code&gt; operation returns a set of attributes for the item with the given primary key. If there is no matching item, &lt;code&gt;GetItem&lt;/code&gt; does not return any data and there will be no &lt;code&gt;Item&lt;/code&gt; element in the response.&lt;/p&gt; &lt;p&gt; &lt;code&gt;GetItem&lt;/code&gt; provides an eventually consistent read by default. If your application requires a strongly consistent read, set &lt;code&gt;ConsistentRead&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;. Although a strongly consistent read might take more time than an eventually consistent read, it always returns the last updated value.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param getItemInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetItemOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ProvisionedThroughputExceededException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RequestLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public GetItemOutput getItem(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull GetItemInput getItemInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetItemOutput> localVarResp = getItemWithHttpInfo(xAmzTarget, getItemInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;The &lt;code&gt;GetItem&lt;/code&gt; operation returns a set of attributes for the item with the given primary key. If there is no matching item, &lt;code&gt;GetItem&lt;/code&gt; does not return any data and there will be no &lt;code&gt;Item&lt;/code&gt; element in the response.&lt;/p&gt; &lt;p&gt; &lt;code&gt;GetItem&lt;/code&gt; provides an eventually consistent read by default. If your application requires a strongly consistent read, set &lt;code&gt;ConsistentRead&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;. Although a strongly consistent read might take more time than an eventually consistent read, it always returns the last updated value.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param getItemInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetItemOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ProvisionedThroughputExceededException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RequestLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetItemOutput> getItemWithHttpInfo(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull GetItemInput getItemInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getItemValidateBeforeCall(xAmzTarget, getItemInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetItemOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;The &lt;code&gt;GetItem&lt;/code&gt; operation returns a set of attributes for the item with the given primary key. If there is no matching item, &lt;code&gt;GetItem&lt;/code&gt; does not return any data and there will be no &lt;code&gt;Item&lt;/code&gt; element in the response.&lt;/p&gt; &lt;p&gt; &lt;code&gt;GetItem&lt;/code&gt; provides an eventually consistent read by default. If your application requires a strongly consistent read, set &lt;code&gt;ConsistentRead&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;. Although a strongly consistent read might take more time than an eventually consistent read, it always returns the last updated value.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param getItemInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ProvisionedThroughputExceededException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RequestLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getItemAsync(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull GetItemInput getItemInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback<GetItemOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = getItemValidateBeforeCall(xAmzTarget, getItemInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetItemOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for importTable
     * @param xAmzTarget  (required)
     * @param importTableInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceInUseException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ImportConflictException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importTableCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull ImportTableInput importTableInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = importTableInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=DynamoDB_20120810.ImportTable";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }


        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }


        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }


        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }


        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }


        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }


        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }


        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }


        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call importTableValidateBeforeCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull ImportTableInput importTableInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling importTable(Async)");
        }

        // verify the required parameter 'importTableInput' is set
        if (importTableInput == null) {
            throw new ApiException("Missing the required parameter 'importTableInput' when calling importTable(Async)");
        }

        return importTableCall(xAmzTarget, importTableInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     *  Imports table data from an S3 bucket. 
     * @param xAmzTarget  (required)
     * @param importTableInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ImportTableOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceInUseException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ImportConflictException </td><td>  -  </td></tr>
     </table>
     */
    public ImportTableOutput importTable(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull ImportTableInput importTableInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders) throws ApiException {
        ApiResponse<ImportTableOutput> localVarResp = importTableWithHttpInfo(xAmzTarget, importTableInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     *  Imports table data from an S3 bucket. 
     * @param xAmzTarget  (required)
     * @param importTableInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;ImportTableOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceInUseException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ImportConflictException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImportTableOutput> importTableWithHttpInfo(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull ImportTableInput importTableInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = importTableValidateBeforeCall(xAmzTarget, importTableInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<ImportTableOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *  Imports table data from an S3 bucket. 
     * @param xAmzTarget  (required)
     * @param importTableInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceInUseException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ImportConflictException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importTableAsync(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull ImportTableInput importTableInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback<ImportTableOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = importTableValidateBeforeCall(xAmzTarget, importTableInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<ImportTableOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listBackups
     * @param xAmzTarget  (required)
     * @param listBackupsInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listBackupsCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull ListBackupsInput listBackupsInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listBackupsInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=DynamoDB_20120810.ListBackups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }


        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }


        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }


        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }


        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }


        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }


        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }


        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }


        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listBackupsValidateBeforeCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull ListBackupsInput listBackupsInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling listBackups(Async)");
        }

        // verify the required parameter 'listBackupsInput' is set
        if (listBackupsInput == null) {
            throw new ApiException("Missing the required parameter 'listBackupsInput' when calling listBackups(Async)");
        }

        return listBackupsCall(xAmzTarget, listBackupsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;List backups associated with an Amazon Web Services account. To list backups for a given table, specify &lt;code&gt;TableName&lt;/code&gt;. &lt;code&gt;ListBackups&lt;/code&gt; returns a paginated list of results with at most 1 MB worth of items in a page. You can also specify a maximum number of entries to be returned in a page.&lt;/p&gt; &lt;p&gt;In the request, start time is inclusive, but end time is exclusive. Note that these boundaries are for the time at which the original backup was requested.&lt;/p&gt; &lt;p&gt;You can call &lt;code&gt;ListBackups&lt;/code&gt; a maximum of five times per second.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listBackupsInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ListBackupsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public ListBackupsOutput listBackups(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull ListBackupsInput listBackupsInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders) throws ApiException {
        ApiResponse<ListBackupsOutput> localVarResp = listBackupsWithHttpInfo(xAmzTarget, listBackupsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;List backups associated with an Amazon Web Services account. To list backups for a given table, specify &lt;code&gt;TableName&lt;/code&gt;. &lt;code&gt;ListBackups&lt;/code&gt; returns a paginated list of results with at most 1 MB worth of items in a page. You can also specify a maximum number of entries to be returned in a page.&lt;/p&gt; &lt;p&gt;In the request, start time is inclusive, but end time is exclusive. Note that these boundaries are for the time at which the original backup was requested.&lt;/p&gt; &lt;p&gt;You can call &lt;code&gt;ListBackups&lt;/code&gt; a maximum of five times per second.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listBackupsInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;ListBackupsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListBackupsOutput> listBackupsWithHttpInfo(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull ListBackupsInput listBackupsInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = listBackupsValidateBeforeCall(xAmzTarget, listBackupsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<ListBackupsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;List backups associated with an Amazon Web Services account. To list backups for a given table, specify &lt;code&gt;TableName&lt;/code&gt;. &lt;code&gt;ListBackups&lt;/code&gt; returns a paginated list of results with at most 1 MB worth of items in a page. You can also specify a maximum number of entries to be returned in a page.&lt;/p&gt; &lt;p&gt;In the request, start time is inclusive, but end time is exclusive. Note that these boundaries are for the time at which the original backup was requested.&lt;/p&gt; &lt;p&gt;You can call &lt;code&gt;ListBackups&lt;/code&gt; a maximum of five times per second.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listBackupsInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listBackupsAsync(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull ListBackupsInput listBackupsInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback<ListBackupsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = listBackupsValidateBeforeCall(xAmzTarget, listBackupsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<ListBackupsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listContributorInsights
     * @param xAmzTarget  (required)
     * @param listContributorInsightsInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listContributorInsightsCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull ListContributorInsightsInput listContributorInsightsInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, @javax.annotation.Nullable String maxResults, @javax.annotation.Nullable String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listContributorInsightsInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=DynamoDB_20120810.ListContributorInsights";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }


        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }


        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }


        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }


        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }


        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }


        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }


        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }


        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listContributorInsightsValidateBeforeCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull ListContributorInsightsInput listContributorInsightsInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, @javax.annotation.Nullable String maxResults, @javax.annotation.Nullable String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling listContributorInsights(Async)");
        }

        // verify the required parameter 'listContributorInsightsInput' is set
        if (listContributorInsightsInput == null) {
            throw new ApiException("Missing the required parameter 'listContributorInsightsInput' when calling listContributorInsights(Async)");
        }

        return listContributorInsightsCall(xAmzTarget, listContributorInsightsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);

    }

    /**
     * 
     * Returns a list of ContributorInsightsSummary for a table and all its global secondary indexes.
     * @param xAmzTarget  (required)
     * @param listContributorInsightsInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ListContributorInsightsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public ListContributorInsightsOutput listContributorInsights(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull ListContributorInsightsInput listContributorInsightsInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, @javax.annotation.Nullable String maxResults, @javax.annotation.Nullable String nextToken) throws ApiException {
        ApiResponse<ListContributorInsightsOutput> localVarResp = listContributorInsightsWithHttpInfo(xAmzTarget, listContributorInsightsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of ContributorInsightsSummary for a table and all its global secondary indexes.
     * @param xAmzTarget  (required)
     * @param listContributorInsightsInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;ListContributorInsightsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListContributorInsightsOutput> listContributorInsightsWithHttpInfo(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull ListContributorInsightsInput listContributorInsightsInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, @javax.annotation.Nullable String maxResults, @javax.annotation.Nullable String nextToken) throws ApiException {
        okhttp3.Call localVarCall = listContributorInsightsValidateBeforeCall(xAmzTarget, listContributorInsightsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<ListContributorInsightsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of ContributorInsightsSummary for a table and all its global secondary indexes.
     * @param xAmzTarget  (required)
     * @param listContributorInsightsInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listContributorInsightsAsync(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull ListContributorInsightsInput listContributorInsightsInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, @javax.annotation.Nullable String maxResults, @javax.annotation.Nullable String nextToken, final ApiCallback<ListContributorInsightsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = listContributorInsightsValidateBeforeCall(xAmzTarget, listContributorInsightsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListContributorInsightsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listExports
     * @param xAmzTarget  (required)
     * @param listExportsInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listExportsCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull ListExportsInput listExportsInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, @javax.annotation.Nullable String maxResults, @javax.annotation.Nullable String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listExportsInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=DynamoDB_20120810.ListExports";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }


        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }


        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }


        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }


        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }


        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }


        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }


        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }


        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listExportsValidateBeforeCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull ListExportsInput listExportsInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, @javax.annotation.Nullable String maxResults, @javax.annotation.Nullable String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling listExports(Async)");
        }

        // verify the required parameter 'listExportsInput' is set
        if (listExportsInput == null) {
            throw new ApiException("Missing the required parameter 'listExportsInput' when calling listExports(Async)");
        }

        return listExportsCall(xAmzTarget, listExportsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);

    }

    /**
     * 
     * Lists completed exports within the past 90 days.
     * @param xAmzTarget  (required)
     * @param listExportsInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ListExportsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public ListExportsOutput listExports(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull ListExportsInput listExportsInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, @javax.annotation.Nullable String maxResults, @javax.annotation.Nullable String nextToken) throws ApiException {
        ApiResponse<ListExportsOutput> localVarResp = listExportsWithHttpInfo(xAmzTarget, listExportsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists completed exports within the past 90 days.
     * @param xAmzTarget  (required)
     * @param listExportsInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;ListExportsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListExportsOutput> listExportsWithHttpInfo(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull ListExportsInput listExportsInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, @javax.annotation.Nullable String maxResults, @javax.annotation.Nullable String nextToken) throws ApiException {
        okhttp3.Call localVarCall = listExportsValidateBeforeCall(xAmzTarget, listExportsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<ListExportsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists completed exports within the past 90 days.
     * @param xAmzTarget  (required)
     * @param listExportsInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listExportsAsync(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull ListExportsInput listExportsInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, @javax.annotation.Nullable String maxResults, @javax.annotation.Nullable String nextToken, final ApiCallback<ListExportsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = listExportsValidateBeforeCall(xAmzTarget, listExportsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListExportsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listGlobalTables
     * @param xAmzTarget  (required)
     * @param listGlobalTablesInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listGlobalTablesCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull ListGlobalTablesInput listGlobalTablesInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listGlobalTablesInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=DynamoDB_20120810.ListGlobalTables";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }


        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }


        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }


        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }


        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }


        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }


        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }


        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }


        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listGlobalTablesValidateBeforeCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull ListGlobalTablesInput listGlobalTablesInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling listGlobalTables(Async)");
        }

        // verify the required parameter 'listGlobalTablesInput' is set
        if (listGlobalTablesInput == null) {
            throw new ApiException("Missing the required parameter 'listGlobalTablesInput' when calling listGlobalTables(Async)");
        }

        return listGlobalTablesCall(xAmzTarget, listGlobalTablesInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Lists all global tables that have a replica in the specified Region.&lt;/p&gt; &lt;important&gt; &lt;p&gt;This operation only applies to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.V1.html\&quot;&gt;Version 2017.11.29 (Legacy)&lt;/a&gt; of global tables. We recommend using &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.V2.html\&quot;&gt;Version 2019.11.21 (Current)&lt;/a&gt; when creating new global tables, as it provides greater flexibility, higher efficiency and consumes less write capacity than 2017.11.29 (Legacy). To determine which version you are using, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.DetermineVersion.html\&quot;&gt;Determining the version&lt;/a&gt;. To update existing global tables from version 2017.11.29 (Legacy) to version 2019.11.21 (Current), see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/V2globaltables_upgrade.html\&quot;&gt; Updating global tables&lt;/a&gt;. &lt;/p&gt; &lt;/important&gt;
     * @param xAmzTarget  (required)
     * @param listGlobalTablesInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ListGlobalTablesOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public ListGlobalTablesOutput listGlobalTables(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull ListGlobalTablesInput listGlobalTablesInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders) throws ApiException {
        ApiResponse<ListGlobalTablesOutput> localVarResp = listGlobalTablesWithHttpInfo(xAmzTarget, listGlobalTablesInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Lists all global tables that have a replica in the specified Region.&lt;/p&gt; &lt;important&gt; &lt;p&gt;This operation only applies to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.V1.html\&quot;&gt;Version 2017.11.29 (Legacy)&lt;/a&gt; of global tables. We recommend using &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.V2.html\&quot;&gt;Version 2019.11.21 (Current)&lt;/a&gt; when creating new global tables, as it provides greater flexibility, higher efficiency and consumes less write capacity than 2017.11.29 (Legacy). To determine which version you are using, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.DetermineVersion.html\&quot;&gt;Determining the version&lt;/a&gt;. To update existing global tables from version 2017.11.29 (Legacy) to version 2019.11.21 (Current), see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/V2globaltables_upgrade.html\&quot;&gt; Updating global tables&lt;/a&gt;. &lt;/p&gt; &lt;/important&gt;
     * @param xAmzTarget  (required)
     * @param listGlobalTablesInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;ListGlobalTablesOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListGlobalTablesOutput> listGlobalTablesWithHttpInfo(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull ListGlobalTablesInput listGlobalTablesInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = listGlobalTablesValidateBeforeCall(xAmzTarget, listGlobalTablesInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<ListGlobalTablesOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Lists all global tables that have a replica in the specified Region.&lt;/p&gt; &lt;important&gt; &lt;p&gt;This operation only applies to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.V1.html\&quot;&gt;Version 2017.11.29 (Legacy)&lt;/a&gt; of global tables. We recommend using &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.V2.html\&quot;&gt;Version 2019.11.21 (Current)&lt;/a&gt; when creating new global tables, as it provides greater flexibility, higher efficiency and consumes less write capacity than 2017.11.29 (Legacy). To determine which version you are using, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.DetermineVersion.html\&quot;&gt;Determining the version&lt;/a&gt;. To update existing global tables from version 2017.11.29 (Legacy) to version 2019.11.21 (Current), see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/V2globaltables_upgrade.html\&quot;&gt; Updating global tables&lt;/a&gt;. &lt;/p&gt; &lt;/important&gt;
     * @param xAmzTarget  (required)
     * @param listGlobalTablesInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listGlobalTablesAsync(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull ListGlobalTablesInput listGlobalTablesInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback<ListGlobalTablesOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = listGlobalTablesValidateBeforeCall(xAmzTarget, listGlobalTablesInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<ListGlobalTablesOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listImports
     * @param xAmzTarget  (required)
     * @param listImportsInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param pageSize Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listImportsCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull ListImportsInput listImportsInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, @javax.annotation.Nullable String pageSize, @javax.annotation.Nullable String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listImportsInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=DynamoDB_20120810.ListImports";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }


        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }


        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }


        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }


        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }


        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }


        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }


        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }


        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listImportsValidateBeforeCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull ListImportsInput listImportsInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, @javax.annotation.Nullable String pageSize, @javax.annotation.Nullable String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling listImports(Async)");
        }

        // verify the required parameter 'listImportsInput' is set
        if (listImportsInput == null) {
            throw new ApiException("Missing the required parameter 'listImportsInput' when calling listImports(Async)");
        }

        return listImportsCall(xAmzTarget, listImportsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, pageSize, nextToken, _callback);

    }

    /**
     * 
     *  Lists completed imports within the past 90 days. 
     * @param xAmzTarget  (required)
     * @param listImportsInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param pageSize Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ListImportsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public ListImportsOutput listImports(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull ListImportsInput listImportsInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, @javax.annotation.Nullable String pageSize, @javax.annotation.Nullable String nextToken) throws ApiException {
        ApiResponse<ListImportsOutput> localVarResp = listImportsWithHttpInfo(xAmzTarget, listImportsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, pageSize, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     *  Lists completed imports within the past 90 days. 
     * @param xAmzTarget  (required)
     * @param listImportsInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param pageSize Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;ListImportsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListImportsOutput> listImportsWithHttpInfo(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull ListImportsInput listImportsInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, @javax.annotation.Nullable String pageSize, @javax.annotation.Nullable String nextToken) throws ApiException {
        okhttp3.Call localVarCall = listImportsValidateBeforeCall(xAmzTarget, listImportsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, pageSize, nextToken, null);
        Type localVarReturnType = new TypeToken<ListImportsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *  Lists completed imports within the past 90 days. 
     * @param xAmzTarget  (required)
     * @param listImportsInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param pageSize Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listImportsAsync(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull ListImportsInput listImportsInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, @javax.annotation.Nullable String pageSize, @javax.annotation.Nullable String nextToken, final ApiCallback<ListImportsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = listImportsValidateBeforeCall(xAmzTarget, listImportsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, pageSize, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListImportsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listTables
     * @param xAmzTarget  (required)
     * @param listTablesInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param limit Pagination limit (optional)
     * @param exclusiveStartTableName Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTablesCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull ListTablesInput listTablesInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String exclusiveStartTableName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listTablesInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=DynamoDB_20120810.ListTables";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Limit", limit));
        }

        if (exclusiveStartTableName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ExclusiveStartTableName", exclusiveStartTableName));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }


        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }


        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }


        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }


        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }


        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }


        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }


        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }


        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTablesValidateBeforeCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull ListTablesInput listTablesInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String exclusiveStartTableName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling listTables(Async)");
        }

        // verify the required parameter 'listTablesInput' is set
        if (listTablesInput == null) {
            throw new ApiException("Missing the required parameter 'listTablesInput' when calling listTables(Async)");
        }

        return listTablesCall(xAmzTarget, listTablesInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, limit, exclusiveStartTableName, _callback);

    }

    /**
     * 
     * Returns an array of table names associated with the current account and endpoint. The output from &lt;code&gt;ListTables&lt;/code&gt; is paginated, with each page returning a maximum of 100 table names.
     * @param xAmzTarget  (required)
     * @param listTablesInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param limit Pagination limit (optional)
     * @param exclusiveStartTableName Pagination token (optional)
     * @return ListTablesOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public ListTablesOutput listTables(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull ListTablesInput listTablesInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String exclusiveStartTableName) throws ApiException {
        ApiResponse<ListTablesOutput> localVarResp = listTablesWithHttpInfo(xAmzTarget, listTablesInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, limit, exclusiveStartTableName);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns an array of table names associated with the current account and endpoint. The output from &lt;code&gt;ListTables&lt;/code&gt; is paginated, with each page returning a maximum of 100 table names.
     * @param xAmzTarget  (required)
     * @param listTablesInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param limit Pagination limit (optional)
     * @param exclusiveStartTableName Pagination token (optional)
     * @return ApiResponse&lt;ListTablesOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListTablesOutput> listTablesWithHttpInfo(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull ListTablesInput listTablesInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String exclusiveStartTableName) throws ApiException {
        okhttp3.Call localVarCall = listTablesValidateBeforeCall(xAmzTarget, listTablesInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, limit, exclusiveStartTableName, null);
        Type localVarReturnType = new TypeToken<ListTablesOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns an array of table names associated with the current account and endpoint. The output from &lt;code&gt;ListTables&lt;/code&gt; is paginated, with each page returning a maximum of 100 table names.
     * @param xAmzTarget  (required)
     * @param listTablesInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param limit Pagination limit (optional)
     * @param exclusiveStartTableName Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTablesAsync(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull ListTablesInput listTablesInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String exclusiveStartTableName, final ApiCallback<ListTablesOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTablesValidateBeforeCall(xAmzTarget, listTablesInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, limit, exclusiveStartTableName, _callback);
        Type localVarReturnType = new TypeToken<ListTablesOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listTagsOfResource
     * @param xAmzTarget  (required)
     * @param listTagsOfResourceInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTagsOfResourceCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull ListTagsOfResourceInput listTagsOfResourceInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listTagsOfResourceInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=DynamoDB_20120810.ListTagsOfResource";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }


        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }


        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }


        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }


        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }


        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }


        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }


        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }


        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTagsOfResourceValidateBeforeCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull ListTagsOfResourceInput listTagsOfResourceInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling listTagsOfResource(Async)");
        }

        // verify the required parameter 'listTagsOfResourceInput' is set
        if (listTagsOfResourceInput == null) {
            throw new ApiException("Missing the required parameter 'listTagsOfResourceInput' when calling listTagsOfResource(Async)");
        }

        return listTagsOfResourceCall(xAmzTarget, listTagsOfResourceInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;List all tags on an Amazon DynamoDB resource. You can call ListTagsOfResource up to 10 times per second, per account.&lt;/p&gt; &lt;p&gt;For an overview on tagging DynamoDB resources, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Tagging.html\&quot;&gt;Tagging for DynamoDB&lt;/a&gt; in the &lt;i&gt;Amazon DynamoDB Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listTagsOfResourceInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ListTagsOfResourceOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public ListTagsOfResourceOutput listTagsOfResource(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull ListTagsOfResourceInput listTagsOfResourceInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders) throws ApiException {
        ApiResponse<ListTagsOfResourceOutput> localVarResp = listTagsOfResourceWithHttpInfo(xAmzTarget, listTagsOfResourceInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;List all tags on an Amazon DynamoDB resource. You can call ListTagsOfResource up to 10 times per second, per account.&lt;/p&gt; &lt;p&gt;For an overview on tagging DynamoDB resources, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Tagging.html\&quot;&gt;Tagging for DynamoDB&lt;/a&gt; in the &lt;i&gt;Amazon DynamoDB Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listTagsOfResourceInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;ListTagsOfResourceOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListTagsOfResourceOutput> listTagsOfResourceWithHttpInfo(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull ListTagsOfResourceInput listTagsOfResourceInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = listTagsOfResourceValidateBeforeCall(xAmzTarget, listTagsOfResourceInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<ListTagsOfResourceOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;List all tags on an Amazon DynamoDB resource. You can call ListTagsOfResource up to 10 times per second, per account.&lt;/p&gt; &lt;p&gt;For an overview on tagging DynamoDB resources, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Tagging.html\&quot;&gt;Tagging for DynamoDB&lt;/a&gt; in the &lt;i&gt;Amazon DynamoDB Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listTagsOfResourceInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTagsOfResourceAsync(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull ListTagsOfResourceInput listTagsOfResourceInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback<ListTagsOfResourceOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTagsOfResourceValidateBeforeCall(xAmzTarget, listTagsOfResourceInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<ListTagsOfResourceOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putItem
     * @param xAmzTarget  (required)
     * @param putItemInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ConditionalCheckFailedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ProvisionedThroughputExceededException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ItemCollectionSizeLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TransactionConflictException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> RequestLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putItemCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull PutItemInput putItemInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putItemInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=DynamoDB_20120810.PutItem";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }


        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }


        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }


        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }


        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }


        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }


        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }


        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }


        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putItemValidateBeforeCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull PutItemInput putItemInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling putItem(Async)");
        }

        // verify the required parameter 'putItemInput' is set
        if (putItemInput == null) {
            throw new ApiException("Missing the required parameter 'putItemInput' when calling putItem(Async)");
        }

        return putItemCall(xAmzTarget, putItemInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a new item, or replaces an old item with a new item. If an item that has the same primary key as the new item already exists in the specified table, the new item completely replaces the existing item. You can perform a conditional put operation (add a new item if one with the specified primary key doesn&#39;t exist), or replace an existing item if it has certain attribute values. You can return the item&#39;s attribute values in the same operation, using the &lt;code&gt;ReturnValues&lt;/code&gt; parameter.&lt;/p&gt; &lt;p&gt;When you add an item, the primary key attributes are the only required attributes. &lt;/p&gt; &lt;p&gt;Empty String and Binary attribute values are allowed. Attribute values of type String and Binary must have a length greater than zero if the attribute is used as a key attribute for a table or index. Set type attributes cannot be empty. &lt;/p&gt; &lt;p&gt;Invalid Requests with empty values will be rejected with a &lt;code&gt;ValidationException&lt;/code&gt; exception.&lt;/p&gt; &lt;note&gt; &lt;p&gt;To prevent a new item from replacing an existing item, use a conditional expression that contains the &lt;code&gt;attribute_not_exists&lt;/code&gt; function with the name of the attribute being used as the partition key for the table. Since every record must contain that attribute, the &lt;code&gt;attribute_not_exists&lt;/code&gt; function will only succeed if no matching item exists.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;For more information about &lt;code&gt;PutItem&lt;/code&gt;, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithItems.html\&quot;&gt;Working with Items&lt;/a&gt; in the &lt;i&gt;Amazon DynamoDB Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param putItemInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return PutItemOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ConditionalCheckFailedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ProvisionedThroughputExceededException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ItemCollectionSizeLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TransactionConflictException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> RequestLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public PutItemOutput putItem(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull PutItemInput putItemInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders) throws ApiException {
        ApiResponse<PutItemOutput> localVarResp = putItemWithHttpInfo(xAmzTarget, putItemInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a new item, or replaces an old item with a new item. If an item that has the same primary key as the new item already exists in the specified table, the new item completely replaces the existing item. You can perform a conditional put operation (add a new item if one with the specified primary key doesn&#39;t exist), or replace an existing item if it has certain attribute values. You can return the item&#39;s attribute values in the same operation, using the &lt;code&gt;ReturnValues&lt;/code&gt; parameter.&lt;/p&gt; &lt;p&gt;When you add an item, the primary key attributes are the only required attributes. &lt;/p&gt; &lt;p&gt;Empty String and Binary attribute values are allowed. Attribute values of type String and Binary must have a length greater than zero if the attribute is used as a key attribute for a table or index. Set type attributes cannot be empty. &lt;/p&gt; &lt;p&gt;Invalid Requests with empty values will be rejected with a &lt;code&gt;ValidationException&lt;/code&gt; exception.&lt;/p&gt; &lt;note&gt; &lt;p&gt;To prevent a new item from replacing an existing item, use a conditional expression that contains the &lt;code&gt;attribute_not_exists&lt;/code&gt; function with the name of the attribute being used as the partition key for the table. Since every record must contain that attribute, the &lt;code&gt;attribute_not_exists&lt;/code&gt; function will only succeed if no matching item exists.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;For more information about &lt;code&gt;PutItem&lt;/code&gt;, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithItems.html\&quot;&gt;Working with Items&lt;/a&gt; in the &lt;i&gt;Amazon DynamoDB Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param putItemInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;PutItemOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ConditionalCheckFailedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ProvisionedThroughputExceededException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ItemCollectionSizeLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TransactionConflictException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> RequestLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PutItemOutput> putItemWithHttpInfo(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull PutItemInput putItemInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = putItemValidateBeforeCall(xAmzTarget, putItemInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<PutItemOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a new item, or replaces an old item with a new item. If an item that has the same primary key as the new item already exists in the specified table, the new item completely replaces the existing item. You can perform a conditional put operation (add a new item if one with the specified primary key doesn&#39;t exist), or replace an existing item if it has certain attribute values. You can return the item&#39;s attribute values in the same operation, using the &lt;code&gt;ReturnValues&lt;/code&gt; parameter.&lt;/p&gt; &lt;p&gt;When you add an item, the primary key attributes are the only required attributes. &lt;/p&gt; &lt;p&gt;Empty String and Binary attribute values are allowed. Attribute values of type String and Binary must have a length greater than zero if the attribute is used as a key attribute for a table or index. Set type attributes cannot be empty. &lt;/p&gt; &lt;p&gt;Invalid Requests with empty values will be rejected with a &lt;code&gt;ValidationException&lt;/code&gt; exception.&lt;/p&gt; &lt;note&gt; &lt;p&gt;To prevent a new item from replacing an existing item, use a conditional expression that contains the &lt;code&gt;attribute_not_exists&lt;/code&gt; function with the name of the attribute being used as the partition key for the table. Since every record must contain that attribute, the &lt;code&gt;attribute_not_exists&lt;/code&gt; function will only succeed if no matching item exists.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;For more information about &lt;code&gt;PutItem&lt;/code&gt;, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithItems.html\&quot;&gt;Working with Items&lt;/a&gt; in the &lt;i&gt;Amazon DynamoDB Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param putItemInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ConditionalCheckFailedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ProvisionedThroughputExceededException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ItemCollectionSizeLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TransactionConflictException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> RequestLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putItemAsync(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull PutItemInput putItemInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback<PutItemOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = putItemValidateBeforeCall(xAmzTarget, putItemInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<PutItemOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for query
     * @param xAmzTarget  (required)
     * @param queryInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param limit Pagination limit (optional)
     * @param exclusiveStartKey Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ProvisionedThroughputExceededException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RequestLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull QueryInput queryInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String exclusiveStartKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = queryInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=DynamoDB_20120810.Query";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Limit", limit));
        }

        if (exclusiveStartKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ExclusiveStartKey", exclusiveStartKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }


        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }


        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }


        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }


        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }


        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }


        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }


        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }


        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryValidateBeforeCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull QueryInput queryInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String exclusiveStartKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling query(Async)");
        }

        // verify the required parameter 'queryInput' is set
        if (queryInput == null) {
            throw new ApiException("Missing the required parameter 'queryInput' when calling query(Async)");
        }

        return queryCall(xAmzTarget, queryInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, limit, exclusiveStartKey, _callback);

    }

    /**
     * 
     * &lt;p&gt;You must provide the name of the partition key attribute and a single value for that attribute. &lt;code&gt;Query&lt;/code&gt; returns all items with that partition key value. Optionally, you can provide a sort key attribute and use a comparison operator to refine the search results.&lt;/p&gt; &lt;p&gt;Use the &lt;code&gt;KeyConditionExpression&lt;/code&gt; parameter to provide a specific value for the partition key. The &lt;code&gt;Query&lt;/code&gt; operation will return all of the items from the table or index with that partition key value. You can optionally narrow the scope of the &lt;code&gt;Query&lt;/code&gt; operation by specifying a sort key value and a comparison operator in &lt;code&gt;KeyConditionExpression&lt;/code&gt;. To further refine the &lt;code&gt;Query&lt;/code&gt; results, you can optionally provide a &lt;code&gt;FilterExpression&lt;/code&gt;. A &lt;code&gt;FilterExpression&lt;/code&gt; determines which items within the results should be returned to you. All of the other results are discarded. &lt;/p&gt; &lt;p&gt; A &lt;code&gt;Query&lt;/code&gt; operation always returns a result set. If no matching items are found, the result set will be empty. Queries that do not return results consume the minimum number of read capacity units for that type of read operation. &lt;/p&gt; &lt;note&gt; &lt;p&gt; DynamoDB calculates the number of read capacity units consumed based on item size, not on the amount of data that is returned to an application. The number of capacity units consumed will be the same whether you request all of the attributes (the default behavior) or just some of them (using a projection expression). The number will also be the same whether or not you use a &lt;code&gt;FilterExpression&lt;/code&gt;. &lt;/p&gt; &lt;/note&gt; &lt;p&gt; &lt;code&gt;Query&lt;/code&gt; results are always sorted by the sort key value. If the data type of the sort key is Number, the results are returned in numeric order; otherwise, the results are returned in order of UTF-8 bytes. By default, the sort order is ascending. To reverse the order, set the &lt;code&gt;ScanIndexForward&lt;/code&gt; parameter to false. &lt;/p&gt; &lt;p&gt; A single &lt;code&gt;Query&lt;/code&gt; operation will read up to the maximum number of items set (if using the &lt;code&gt;Limit&lt;/code&gt; parameter) or a maximum of 1 MB of data and then apply any filtering to the results using &lt;code&gt;FilterExpression&lt;/code&gt;. If &lt;code&gt;LastEvaluatedKey&lt;/code&gt; is present in the response, you will need to paginate the result set. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Query.html#Query.Pagination\&quot;&gt;Paginating the Results&lt;/a&gt; in the &lt;i&gt;Amazon DynamoDB Developer Guide&lt;/i&gt;. &lt;/p&gt; &lt;p&gt; &lt;code&gt;FilterExpression&lt;/code&gt; is applied after a &lt;code&gt;Query&lt;/code&gt; finishes, but before the results are returned. A &lt;code&gt;FilterExpression&lt;/code&gt; cannot contain partition key or sort key attributes. You need to specify those attributes in the &lt;code&gt;KeyConditionExpression&lt;/code&gt;. &lt;/p&gt; &lt;note&gt; &lt;p&gt; A &lt;code&gt;Query&lt;/code&gt; operation can return an empty result set and a &lt;code&gt;LastEvaluatedKey&lt;/code&gt; if all the items read for the page of results are filtered out. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;You can query a table, a local secondary index, or a global secondary index. For a query on a table or on a local secondary index, you can set the &lt;code&gt;ConsistentRead&lt;/code&gt; parameter to &lt;code&gt;true&lt;/code&gt; and obtain a strongly consistent result. Global secondary indexes support eventually consistent reads only, so do not specify &lt;code&gt;ConsistentRead&lt;/code&gt; when querying a global secondary index.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param queryInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param limit Pagination limit (optional)
     * @param exclusiveStartKey Pagination token (optional)
     * @return QueryOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ProvisionedThroughputExceededException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RequestLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public QueryOutput query(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull QueryInput queryInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String exclusiveStartKey) throws ApiException {
        ApiResponse<QueryOutput> localVarResp = queryWithHttpInfo(xAmzTarget, queryInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, limit, exclusiveStartKey);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;You must provide the name of the partition key attribute and a single value for that attribute. &lt;code&gt;Query&lt;/code&gt; returns all items with that partition key value. Optionally, you can provide a sort key attribute and use a comparison operator to refine the search results.&lt;/p&gt; &lt;p&gt;Use the &lt;code&gt;KeyConditionExpression&lt;/code&gt; parameter to provide a specific value for the partition key. The &lt;code&gt;Query&lt;/code&gt; operation will return all of the items from the table or index with that partition key value. You can optionally narrow the scope of the &lt;code&gt;Query&lt;/code&gt; operation by specifying a sort key value and a comparison operator in &lt;code&gt;KeyConditionExpression&lt;/code&gt;. To further refine the &lt;code&gt;Query&lt;/code&gt; results, you can optionally provide a &lt;code&gt;FilterExpression&lt;/code&gt;. A &lt;code&gt;FilterExpression&lt;/code&gt; determines which items within the results should be returned to you. All of the other results are discarded. &lt;/p&gt; &lt;p&gt; A &lt;code&gt;Query&lt;/code&gt; operation always returns a result set. If no matching items are found, the result set will be empty. Queries that do not return results consume the minimum number of read capacity units for that type of read operation. &lt;/p&gt; &lt;note&gt; &lt;p&gt; DynamoDB calculates the number of read capacity units consumed based on item size, not on the amount of data that is returned to an application. The number of capacity units consumed will be the same whether you request all of the attributes (the default behavior) or just some of them (using a projection expression). The number will also be the same whether or not you use a &lt;code&gt;FilterExpression&lt;/code&gt;. &lt;/p&gt; &lt;/note&gt; &lt;p&gt; &lt;code&gt;Query&lt;/code&gt; results are always sorted by the sort key value. If the data type of the sort key is Number, the results are returned in numeric order; otherwise, the results are returned in order of UTF-8 bytes. By default, the sort order is ascending. To reverse the order, set the &lt;code&gt;ScanIndexForward&lt;/code&gt; parameter to false. &lt;/p&gt; &lt;p&gt; A single &lt;code&gt;Query&lt;/code&gt; operation will read up to the maximum number of items set (if using the &lt;code&gt;Limit&lt;/code&gt; parameter) or a maximum of 1 MB of data and then apply any filtering to the results using &lt;code&gt;FilterExpression&lt;/code&gt;. If &lt;code&gt;LastEvaluatedKey&lt;/code&gt; is present in the response, you will need to paginate the result set. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Query.html#Query.Pagination\&quot;&gt;Paginating the Results&lt;/a&gt; in the &lt;i&gt;Amazon DynamoDB Developer Guide&lt;/i&gt;. &lt;/p&gt; &lt;p&gt; &lt;code&gt;FilterExpression&lt;/code&gt; is applied after a &lt;code&gt;Query&lt;/code&gt; finishes, but before the results are returned. A &lt;code&gt;FilterExpression&lt;/code&gt; cannot contain partition key or sort key attributes. You need to specify those attributes in the &lt;code&gt;KeyConditionExpression&lt;/code&gt;. &lt;/p&gt; &lt;note&gt; &lt;p&gt; A &lt;code&gt;Query&lt;/code&gt; operation can return an empty result set and a &lt;code&gt;LastEvaluatedKey&lt;/code&gt; if all the items read for the page of results are filtered out. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;You can query a table, a local secondary index, or a global secondary index. For a query on a table or on a local secondary index, you can set the &lt;code&gt;ConsistentRead&lt;/code&gt; parameter to &lt;code&gt;true&lt;/code&gt; and obtain a strongly consistent result. Global secondary indexes support eventually consistent reads only, so do not specify &lt;code&gt;ConsistentRead&lt;/code&gt; when querying a global secondary index.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param queryInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param limit Pagination limit (optional)
     * @param exclusiveStartKey Pagination token (optional)
     * @return ApiResponse&lt;QueryOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ProvisionedThroughputExceededException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RequestLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<QueryOutput> queryWithHttpInfo(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull QueryInput queryInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String exclusiveStartKey) throws ApiException {
        okhttp3.Call localVarCall = queryValidateBeforeCall(xAmzTarget, queryInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, limit, exclusiveStartKey, null);
        Type localVarReturnType = new TypeToken<QueryOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;You must provide the name of the partition key attribute and a single value for that attribute. &lt;code&gt;Query&lt;/code&gt; returns all items with that partition key value. Optionally, you can provide a sort key attribute and use a comparison operator to refine the search results.&lt;/p&gt; &lt;p&gt;Use the &lt;code&gt;KeyConditionExpression&lt;/code&gt; parameter to provide a specific value for the partition key. The &lt;code&gt;Query&lt;/code&gt; operation will return all of the items from the table or index with that partition key value. You can optionally narrow the scope of the &lt;code&gt;Query&lt;/code&gt; operation by specifying a sort key value and a comparison operator in &lt;code&gt;KeyConditionExpression&lt;/code&gt;. To further refine the &lt;code&gt;Query&lt;/code&gt; results, you can optionally provide a &lt;code&gt;FilterExpression&lt;/code&gt;. A &lt;code&gt;FilterExpression&lt;/code&gt; determines which items within the results should be returned to you. All of the other results are discarded. &lt;/p&gt; &lt;p&gt; A &lt;code&gt;Query&lt;/code&gt; operation always returns a result set. If no matching items are found, the result set will be empty. Queries that do not return results consume the minimum number of read capacity units for that type of read operation. &lt;/p&gt; &lt;note&gt; &lt;p&gt; DynamoDB calculates the number of read capacity units consumed based on item size, not on the amount of data that is returned to an application. The number of capacity units consumed will be the same whether you request all of the attributes (the default behavior) or just some of them (using a projection expression). The number will also be the same whether or not you use a &lt;code&gt;FilterExpression&lt;/code&gt;. &lt;/p&gt; &lt;/note&gt; &lt;p&gt; &lt;code&gt;Query&lt;/code&gt; results are always sorted by the sort key value. If the data type of the sort key is Number, the results are returned in numeric order; otherwise, the results are returned in order of UTF-8 bytes. By default, the sort order is ascending. To reverse the order, set the &lt;code&gt;ScanIndexForward&lt;/code&gt; parameter to false. &lt;/p&gt; &lt;p&gt; A single &lt;code&gt;Query&lt;/code&gt; operation will read up to the maximum number of items set (if using the &lt;code&gt;Limit&lt;/code&gt; parameter) or a maximum of 1 MB of data and then apply any filtering to the results using &lt;code&gt;FilterExpression&lt;/code&gt;. If &lt;code&gt;LastEvaluatedKey&lt;/code&gt; is present in the response, you will need to paginate the result set. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Query.html#Query.Pagination\&quot;&gt;Paginating the Results&lt;/a&gt; in the &lt;i&gt;Amazon DynamoDB Developer Guide&lt;/i&gt;. &lt;/p&gt; &lt;p&gt; &lt;code&gt;FilterExpression&lt;/code&gt; is applied after a &lt;code&gt;Query&lt;/code&gt; finishes, but before the results are returned. A &lt;code&gt;FilterExpression&lt;/code&gt; cannot contain partition key or sort key attributes. You need to specify those attributes in the &lt;code&gt;KeyConditionExpression&lt;/code&gt;. &lt;/p&gt; &lt;note&gt; &lt;p&gt; A &lt;code&gt;Query&lt;/code&gt; operation can return an empty result set and a &lt;code&gt;LastEvaluatedKey&lt;/code&gt; if all the items read for the page of results are filtered out. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;You can query a table, a local secondary index, or a global secondary index. For a query on a table or on a local secondary index, you can set the &lt;code&gt;ConsistentRead&lt;/code&gt; parameter to &lt;code&gt;true&lt;/code&gt; and obtain a strongly consistent result. Global secondary indexes support eventually consistent reads only, so do not specify &lt;code&gt;ConsistentRead&lt;/code&gt; when querying a global secondary index.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param queryInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param limit Pagination limit (optional)
     * @param exclusiveStartKey Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ProvisionedThroughputExceededException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RequestLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryAsync(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull QueryInput queryInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String exclusiveStartKey, final ApiCallback<QueryOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = queryValidateBeforeCall(xAmzTarget, queryInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, limit, exclusiveStartKey, _callback);
        Type localVarReturnType = new TypeToken<QueryOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for restoreTableFromBackup
     * @param xAmzTarget  (required)
     * @param restoreTableFromBackupInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TableAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TableInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BackupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BackupInUseException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call restoreTableFromBackupCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull RestoreTableFromBackupInput restoreTableFromBackupInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = restoreTableFromBackupInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=DynamoDB_20120810.RestoreTableFromBackup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }


        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }


        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }


        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }


        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }


        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }


        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }


        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }


        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call restoreTableFromBackupValidateBeforeCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull RestoreTableFromBackupInput restoreTableFromBackupInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling restoreTableFromBackup(Async)");
        }

        // verify the required parameter 'restoreTableFromBackupInput' is set
        if (restoreTableFromBackupInput == null) {
            throw new ApiException("Missing the required parameter 'restoreTableFromBackupInput' when calling restoreTableFromBackup(Async)");
        }

        return restoreTableFromBackupCall(xAmzTarget, restoreTableFromBackupInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a new table from an existing backup. Any number of users can execute up to 50 concurrent restores (any type of restore) in a given account. &lt;/p&gt; &lt;p&gt;You can call &lt;code&gt;RestoreTableFromBackup&lt;/code&gt; at a maximum rate of 10 times per second.&lt;/p&gt; &lt;p&gt;You must manually set up the following on the restored table:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Auto scaling policies&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;IAM policies&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Amazon CloudWatch metrics and alarms&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Tags&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Stream settings&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Time to Live (TTL) settings&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param restoreTableFromBackupInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return RestoreTableFromBackupOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TableAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TableInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BackupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BackupInUseException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public RestoreTableFromBackupOutput restoreTableFromBackup(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull RestoreTableFromBackupInput restoreTableFromBackupInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders) throws ApiException {
        ApiResponse<RestoreTableFromBackupOutput> localVarResp = restoreTableFromBackupWithHttpInfo(xAmzTarget, restoreTableFromBackupInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a new table from an existing backup. Any number of users can execute up to 50 concurrent restores (any type of restore) in a given account. &lt;/p&gt; &lt;p&gt;You can call &lt;code&gt;RestoreTableFromBackup&lt;/code&gt; at a maximum rate of 10 times per second.&lt;/p&gt; &lt;p&gt;You must manually set up the following on the restored table:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Auto scaling policies&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;IAM policies&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Amazon CloudWatch metrics and alarms&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Tags&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Stream settings&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Time to Live (TTL) settings&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param restoreTableFromBackupInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;RestoreTableFromBackupOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TableAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TableInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BackupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BackupInUseException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RestoreTableFromBackupOutput> restoreTableFromBackupWithHttpInfo(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull RestoreTableFromBackupInput restoreTableFromBackupInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = restoreTableFromBackupValidateBeforeCall(xAmzTarget, restoreTableFromBackupInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<RestoreTableFromBackupOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a new table from an existing backup. Any number of users can execute up to 50 concurrent restores (any type of restore) in a given account. &lt;/p&gt; &lt;p&gt;You can call &lt;code&gt;RestoreTableFromBackup&lt;/code&gt; at a maximum rate of 10 times per second.&lt;/p&gt; &lt;p&gt;You must manually set up the following on the restored table:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Auto scaling policies&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;IAM policies&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Amazon CloudWatch metrics and alarms&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Tags&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Stream settings&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Time to Live (TTL) settings&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param restoreTableFromBackupInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TableAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TableInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BackupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BackupInUseException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call restoreTableFromBackupAsync(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull RestoreTableFromBackupInput restoreTableFromBackupInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback<RestoreTableFromBackupOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = restoreTableFromBackupValidateBeforeCall(xAmzTarget, restoreTableFromBackupInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<RestoreTableFromBackupOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for restoreTableToPointInTime
     * @param xAmzTarget  (required)
     * @param restoreTableToPointInTimeInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TableAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TableNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TableInUseException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidRestoreTimeException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> PointInTimeRecoveryUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call restoreTableToPointInTimeCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull RestoreTableToPointInTimeInput restoreTableToPointInTimeInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = restoreTableToPointInTimeInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=DynamoDB_20120810.RestoreTableToPointInTime";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }


        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }


        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }


        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }


        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }


        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }


        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }


        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }


        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call restoreTableToPointInTimeValidateBeforeCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull RestoreTableToPointInTimeInput restoreTableToPointInTimeInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling restoreTableToPointInTime(Async)");
        }

        // verify the required parameter 'restoreTableToPointInTimeInput' is set
        if (restoreTableToPointInTimeInput == null) {
            throw new ApiException("Missing the required parameter 'restoreTableToPointInTimeInput' when calling restoreTableToPointInTime(Async)");
        }

        return restoreTableToPointInTimeCall(xAmzTarget, restoreTableToPointInTimeInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Restores the specified table to the specified point in time within &lt;code&gt;EarliestRestorableDateTime&lt;/code&gt; and &lt;code&gt;LatestRestorableDateTime&lt;/code&gt;. You can restore your table to any point in time during the last 35 days. Any number of users can execute up to 4 concurrent restores (any type of restore) in a given account. &lt;/p&gt; &lt;p&gt; When you restore using point in time recovery, DynamoDB restores your table data to the state based on the selected date and time (day:hour:minute:second) to a new table. &lt;/p&gt; &lt;p&gt; Along with data, the following are also included on the new restored table using point in time recovery: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Global secondary indexes (GSIs)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Local secondary indexes (LSIs)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Provisioned read and write capacity&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Encryption settings&lt;/p&gt; &lt;important&gt; &lt;p&gt; All these settings come from the current settings of the source table at the time of restore. &lt;/p&gt; &lt;/important&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;You must manually set up the following on the restored table:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Auto scaling policies&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;IAM policies&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Amazon CloudWatch metrics and alarms&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Tags&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Stream settings&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Time to Live (TTL) settings&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Point in time recovery settings&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param restoreTableToPointInTimeInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return RestoreTableToPointInTimeOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TableAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TableNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TableInUseException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidRestoreTimeException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> PointInTimeRecoveryUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public RestoreTableToPointInTimeOutput restoreTableToPointInTime(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull RestoreTableToPointInTimeInput restoreTableToPointInTimeInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders) throws ApiException {
        ApiResponse<RestoreTableToPointInTimeOutput> localVarResp = restoreTableToPointInTimeWithHttpInfo(xAmzTarget, restoreTableToPointInTimeInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Restores the specified table to the specified point in time within &lt;code&gt;EarliestRestorableDateTime&lt;/code&gt; and &lt;code&gt;LatestRestorableDateTime&lt;/code&gt;. You can restore your table to any point in time during the last 35 days. Any number of users can execute up to 4 concurrent restores (any type of restore) in a given account. &lt;/p&gt; &lt;p&gt; When you restore using point in time recovery, DynamoDB restores your table data to the state based on the selected date and time (day:hour:minute:second) to a new table. &lt;/p&gt; &lt;p&gt; Along with data, the following are also included on the new restored table using point in time recovery: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Global secondary indexes (GSIs)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Local secondary indexes (LSIs)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Provisioned read and write capacity&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Encryption settings&lt;/p&gt; &lt;important&gt; &lt;p&gt; All these settings come from the current settings of the source table at the time of restore. &lt;/p&gt; &lt;/important&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;You must manually set up the following on the restored table:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Auto scaling policies&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;IAM policies&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Amazon CloudWatch metrics and alarms&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Tags&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Stream settings&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Time to Live (TTL) settings&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Point in time recovery settings&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param restoreTableToPointInTimeInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;RestoreTableToPointInTimeOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TableAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TableNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TableInUseException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidRestoreTimeException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> PointInTimeRecoveryUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RestoreTableToPointInTimeOutput> restoreTableToPointInTimeWithHttpInfo(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull RestoreTableToPointInTimeInput restoreTableToPointInTimeInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = restoreTableToPointInTimeValidateBeforeCall(xAmzTarget, restoreTableToPointInTimeInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<RestoreTableToPointInTimeOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Restores the specified table to the specified point in time within &lt;code&gt;EarliestRestorableDateTime&lt;/code&gt; and &lt;code&gt;LatestRestorableDateTime&lt;/code&gt;. You can restore your table to any point in time during the last 35 days. Any number of users can execute up to 4 concurrent restores (any type of restore) in a given account. &lt;/p&gt; &lt;p&gt; When you restore using point in time recovery, DynamoDB restores your table data to the state based on the selected date and time (day:hour:minute:second) to a new table. &lt;/p&gt; &lt;p&gt; Along with data, the following are also included on the new restored table using point in time recovery: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Global secondary indexes (GSIs)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Local secondary indexes (LSIs)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Provisioned read and write capacity&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Encryption settings&lt;/p&gt; &lt;important&gt; &lt;p&gt; All these settings come from the current settings of the source table at the time of restore. &lt;/p&gt; &lt;/important&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;You must manually set up the following on the restored table:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Auto scaling policies&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;IAM policies&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Amazon CloudWatch metrics and alarms&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Tags&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Stream settings&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Time to Live (TTL) settings&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Point in time recovery settings&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param restoreTableToPointInTimeInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TableAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TableNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TableInUseException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidRestoreTimeException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> PointInTimeRecoveryUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call restoreTableToPointInTimeAsync(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull RestoreTableToPointInTimeInput restoreTableToPointInTimeInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback<RestoreTableToPointInTimeOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = restoreTableToPointInTimeValidateBeforeCall(xAmzTarget, restoreTableToPointInTimeInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<RestoreTableToPointInTimeOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for scan
     * @param xAmzTarget  (required)
     * @param scanInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param limit Pagination limit (optional)
     * @param exclusiveStartKey Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ProvisionedThroughputExceededException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RequestLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scanCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull ScanInput scanInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String exclusiveStartKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = scanInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=DynamoDB_20120810.Scan";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Limit", limit));
        }

        if (exclusiveStartKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ExclusiveStartKey", exclusiveStartKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }


        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }


        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }


        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }


        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }


        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }


        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }


        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }


        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scanValidateBeforeCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull ScanInput scanInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String exclusiveStartKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling scan(Async)");
        }

        // verify the required parameter 'scanInput' is set
        if (scanInput == null) {
            throw new ApiException("Missing the required parameter 'scanInput' when calling scan(Async)");
        }

        return scanCall(xAmzTarget, scanInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, limit, exclusiveStartKey, _callback);

    }

    /**
     * 
     * &lt;p&gt;The &lt;code&gt;Scan&lt;/code&gt; operation returns one or more items and item attributes by accessing every item in a table or a secondary index. To have DynamoDB return fewer items, you can provide a &lt;code&gt;FilterExpression&lt;/code&gt; operation.&lt;/p&gt; &lt;p&gt;If the total size of scanned items exceeds the maximum dataset size limit of 1 MB, the scan completes and results are returned to the user. The &lt;code&gt;LastEvaluatedKey&lt;/code&gt; value is also returned and the requestor can use the &lt;code&gt;LastEvaluatedKey&lt;/code&gt; to continue the scan in a subsequent operation. Each scan response also includes number of items that were scanned (ScannedCount) as part of the request. If using a &lt;code&gt;FilterExpression&lt;/code&gt;, a scan result can result in no items meeting the criteria and the &lt;code&gt;Count&lt;/code&gt; will result in zero. If you did not use a &lt;code&gt;FilterExpression&lt;/code&gt; in the scan request, then &lt;code&gt;Count&lt;/code&gt; is the same as &lt;code&gt;ScannedCount&lt;/code&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt; &lt;code&gt;Count&lt;/code&gt; and &lt;code&gt;ScannedCount&lt;/code&gt; only return the count of items specific to a single scan request and, unless the table is less than 1MB, do not represent the total number of items in the table. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;A single &lt;code&gt;Scan&lt;/code&gt; operation first reads up to the maximum number of items set (if using the &lt;code&gt;Limit&lt;/code&gt; parameter) or a maximum of 1 MB of data and then applies any filtering to the results if a &lt;code&gt;FilterExpression&lt;/code&gt; is provided. If &lt;code&gt;LastEvaluatedKey&lt;/code&gt; is present in the response, pagination is required to complete the full table scan. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Scan.html#Scan.Pagination\&quot;&gt;Paginating the Results&lt;/a&gt; in the &lt;i&gt;Amazon DynamoDB Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt; &lt;code&gt;Scan&lt;/code&gt; operations proceed sequentially; however, for faster performance on a large table or secondary index, applications can request a parallel &lt;code&gt;Scan&lt;/code&gt; operation by providing the &lt;code&gt;Segment&lt;/code&gt; and &lt;code&gt;TotalSegments&lt;/code&gt; parameters. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Scan.html#Scan.ParallelScan\&quot;&gt;Parallel Scan&lt;/a&gt; in the &lt;i&gt;Amazon DynamoDB Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;By default, a &lt;code&gt;Scan&lt;/code&gt; uses eventually consistent reads when accessing the items in a table. Therefore, the results from an eventually consistent &lt;code&gt;Scan&lt;/code&gt; may not include the latest item changes at the time the scan iterates through each item in the table. If you require a strongly consistent read of each item as the scan iterates through the items in the table, you can set the &lt;code&gt;ConsistentRead&lt;/code&gt; parameter to true. Strong consistency only relates to the consistency of the read at the item level.&lt;/p&gt; &lt;note&gt; &lt;p&gt; DynamoDB does not provide snapshot isolation for a scan operation when the &lt;code&gt;ConsistentRead&lt;/code&gt; parameter is set to true. Thus, a DynamoDB scan operation does not guarantee that all reads in a scan see a consistent snapshot of the table when the scan operation was requested. &lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param scanInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param limit Pagination limit (optional)
     * @param exclusiveStartKey Pagination token (optional)
     * @return ScanOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ProvisionedThroughputExceededException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RequestLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public ScanOutput scan(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull ScanInput scanInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String exclusiveStartKey) throws ApiException {
        ApiResponse<ScanOutput> localVarResp = scanWithHttpInfo(xAmzTarget, scanInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, limit, exclusiveStartKey);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;The &lt;code&gt;Scan&lt;/code&gt; operation returns one or more items and item attributes by accessing every item in a table or a secondary index. To have DynamoDB return fewer items, you can provide a &lt;code&gt;FilterExpression&lt;/code&gt; operation.&lt;/p&gt; &lt;p&gt;If the total size of scanned items exceeds the maximum dataset size limit of 1 MB, the scan completes and results are returned to the user. The &lt;code&gt;LastEvaluatedKey&lt;/code&gt; value is also returned and the requestor can use the &lt;code&gt;LastEvaluatedKey&lt;/code&gt; to continue the scan in a subsequent operation. Each scan response also includes number of items that were scanned (ScannedCount) as part of the request. If using a &lt;code&gt;FilterExpression&lt;/code&gt;, a scan result can result in no items meeting the criteria and the &lt;code&gt;Count&lt;/code&gt; will result in zero. If you did not use a &lt;code&gt;FilterExpression&lt;/code&gt; in the scan request, then &lt;code&gt;Count&lt;/code&gt; is the same as &lt;code&gt;ScannedCount&lt;/code&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt; &lt;code&gt;Count&lt;/code&gt; and &lt;code&gt;ScannedCount&lt;/code&gt; only return the count of items specific to a single scan request and, unless the table is less than 1MB, do not represent the total number of items in the table. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;A single &lt;code&gt;Scan&lt;/code&gt; operation first reads up to the maximum number of items set (if using the &lt;code&gt;Limit&lt;/code&gt; parameter) or a maximum of 1 MB of data and then applies any filtering to the results if a &lt;code&gt;FilterExpression&lt;/code&gt; is provided. If &lt;code&gt;LastEvaluatedKey&lt;/code&gt; is present in the response, pagination is required to complete the full table scan. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Scan.html#Scan.Pagination\&quot;&gt;Paginating the Results&lt;/a&gt; in the &lt;i&gt;Amazon DynamoDB Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt; &lt;code&gt;Scan&lt;/code&gt; operations proceed sequentially; however, for faster performance on a large table or secondary index, applications can request a parallel &lt;code&gt;Scan&lt;/code&gt; operation by providing the &lt;code&gt;Segment&lt;/code&gt; and &lt;code&gt;TotalSegments&lt;/code&gt; parameters. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Scan.html#Scan.ParallelScan\&quot;&gt;Parallel Scan&lt;/a&gt; in the &lt;i&gt;Amazon DynamoDB Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;By default, a &lt;code&gt;Scan&lt;/code&gt; uses eventually consistent reads when accessing the items in a table. Therefore, the results from an eventually consistent &lt;code&gt;Scan&lt;/code&gt; may not include the latest item changes at the time the scan iterates through each item in the table. If you require a strongly consistent read of each item as the scan iterates through the items in the table, you can set the &lt;code&gt;ConsistentRead&lt;/code&gt; parameter to true. Strong consistency only relates to the consistency of the read at the item level.&lt;/p&gt; &lt;note&gt; &lt;p&gt; DynamoDB does not provide snapshot isolation for a scan operation when the &lt;code&gt;ConsistentRead&lt;/code&gt; parameter is set to true. Thus, a DynamoDB scan operation does not guarantee that all reads in a scan see a consistent snapshot of the table when the scan operation was requested. &lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param scanInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param limit Pagination limit (optional)
     * @param exclusiveStartKey Pagination token (optional)
     * @return ApiResponse&lt;ScanOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ProvisionedThroughputExceededException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RequestLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScanOutput> scanWithHttpInfo(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull ScanInput scanInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String exclusiveStartKey) throws ApiException {
        okhttp3.Call localVarCall = scanValidateBeforeCall(xAmzTarget, scanInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, limit, exclusiveStartKey, null);
        Type localVarReturnType = new TypeToken<ScanOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;The &lt;code&gt;Scan&lt;/code&gt; operation returns one or more items and item attributes by accessing every item in a table or a secondary index. To have DynamoDB return fewer items, you can provide a &lt;code&gt;FilterExpression&lt;/code&gt; operation.&lt;/p&gt; &lt;p&gt;If the total size of scanned items exceeds the maximum dataset size limit of 1 MB, the scan completes and results are returned to the user. The &lt;code&gt;LastEvaluatedKey&lt;/code&gt; value is also returned and the requestor can use the &lt;code&gt;LastEvaluatedKey&lt;/code&gt; to continue the scan in a subsequent operation. Each scan response also includes number of items that were scanned (ScannedCount) as part of the request. If using a &lt;code&gt;FilterExpression&lt;/code&gt;, a scan result can result in no items meeting the criteria and the &lt;code&gt;Count&lt;/code&gt; will result in zero. If you did not use a &lt;code&gt;FilterExpression&lt;/code&gt; in the scan request, then &lt;code&gt;Count&lt;/code&gt; is the same as &lt;code&gt;ScannedCount&lt;/code&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt; &lt;code&gt;Count&lt;/code&gt; and &lt;code&gt;ScannedCount&lt;/code&gt; only return the count of items specific to a single scan request and, unless the table is less than 1MB, do not represent the total number of items in the table. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;A single &lt;code&gt;Scan&lt;/code&gt; operation first reads up to the maximum number of items set (if using the &lt;code&gt;Limit&lt;/code&gt; parameter) or a maximum of 1 MB of data and then applies any filtering to the results if a &lt;code&gt;FilterExpression&lt;/code&gt; is provided. If &lt;code&gt;LastEvaluatedKey&lt;/code&gt; is present in the response, pagination is required to complete the full table scan. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Scan.html#Scan.Pagination\&quot;&gt;Paginating the Results&lt;/a&gt; in the &lt;i&gt;Amazon DynamoDB Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt; &lt;code&gt;Scan&lt;/code&gt; operations proceed sequentially; however, for faster performance on a large table or secondary index, applications can request a parallel &lt;code&gt;Scan&lt;/code&gt; operation by providing the &lt;code&gt;Segment&lt;/code&gt; and &lt;code&gt;TotalSegments&lt;/code&gt; parameters. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Scan.html#Scan.ParallelScan\&quot;&gt;Parallel Scan&lt;/a&gt; in the &lt;i&gt;Amazon DynamoDB Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;By default, a &lt;code&gt;Scan&lt;/code&gt; uses eventually consistent reads when accessing the items in a table. Therefore, the results from an eventually consistent &lt;code&gt;Scan&lt;/code&gt; may not include the latest item changes at the time the scan iterates through each item in the table. If you require a strongly consistent read of each item as the scan iterates through the items in the table, you can set the &lt;code&gt;ConsistentRead&lt;/code&gt; parameter to true. Strong consistency only relates to the consistency of the read at the item level.&lt;/p&gt; &lt;note&gt; &lt;p&gt; DynamoDB does not provide snapshot isolation for a scan operation when the &lt;code&gt;ConsistentRead&lt;/code&gt; parameter is set to true. Thus, a DynamoDB scan operation does not guarantee that all reads in a scan see a consistent snapshot of the table when the scan operation was requested. &lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param scanInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param limit Pagination limit (optional)
     * @param exclusiveStartKey Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ProvisionedThroughputExceededException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RequestLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scanAsync(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull ScanInput scanInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String exclusiveStartKey, final ApiCallback<ScanOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = scanValidateBeforeCall(xAmzTarget, scanInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, limit, exclusiveStartKey, _callback);
        Type localVarReturnType = new TypeToken<ScanOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tagResource
     * @param xAmzTarget  (required)
     * @param tagResourceInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceInUseException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tagResourceCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull TagResourceInput tagResourceInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tagResourceInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=DynamoDB_20120810.TagResource";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }


        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }


        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }


        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }


        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }


        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }


        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }


        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }


        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tagResourceValidateBeforeCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull TagResourceInput tagResourceInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling tagResource(Async)");
        }

        // verify the required parameter 'tagResourceInput' is set
        if (tagResourceInput == null) {
            throw new ApiException("Missing the required parameter 'tagResourceInput' when calling tagResource(Async)");
        }

        return tagResourceCall(xAmzTarget, tagResourceInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Associate a set of tags with an Amazon DynamoDB resource. You can then activate these user-defined tags so that they appear on the Billing and Cost Management console for cost allocation tracking. You can call TagResource up to five times per second, per account. &lt;/p&gt; &lt;p&gt;For an overview on tagging DynamoDB resources, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Tagging.html\&quot;&gt;Tagging for DynamoDB&lt;/a&gt; in the &lt;i&gt;Amazon DynamoDB Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param tagResourceInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceInUseException </td><td>  -  </td></tr>
     </table>
     */
    public void tagResource(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull TagResourceInput tagResourceInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders) throws ApiException {
        tagResourceWithHttpInfo(xAmzTarget, tagResourceInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * &lt;p&gt;Associate a set of tags with an Amazon DynamoDB resource. You can then activate these user-defined tags so that they appear on the Billing and Cost Management console for cost allocation tracking. You can call TagResource up to five times per second, per account. &lt;/p&gt; &lt;p&gt;For an overview on tagging DynamoDB resources, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Tagging.html\&quot;&gt;Tagging for DynamoDB&lt;/a&gt; in the &lt;i&gt;Amazon DynamoDB Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param tagResourceInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceInUseException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> tagResourceWithHttpInfo(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull TagResourceInput tagResourceInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = tagResourceValidateBeforeCall(xAmzTarget, tagResourceInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Associate a set of tags with an Amazon DynamoDB resource. You can then activate these user-defined tags so that they appear on the Billing and Cost Management console for cost allocation tracking. You can call TagResource up to five times per second, per account. &lt;/p&gt; &lt;p&gt;For an overview on tagging DynamoDB resources, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Tagging.html\&quot;&gt;Tagging for DynamoDB&lt;/a&gt; in the &lt;i&gt;Amazon DynamoDB Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param tagResourceInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceInUseException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tagResourceAsync(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull TagResourceInput tagResourceInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = tagResourceValidateBeforeCall(xAmzTarget, tagResourceInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for transactGetItems
     * @param xAmzTarget  (required)
     * @param transactGetItemsInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TransactionCanceledException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ProvisionedThroughputExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RequestLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactGetItemsCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull TransactGetItemsInput transactGetItemsInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transactGetItemsInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=DynamoDB_20120810.TransactGetItems";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }


        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }


        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }


        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }


        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }


        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }


        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }


        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }


        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transactGetItemsValidateBeforeCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull TransactGetItemsInput transactGetItemsInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling transactGetItems(Async)");
        }

        // verify the required parameter 'transactGetItemsInput' is set
        if (transactGetItemsInput == null) {
            throw new ApiException("Missing the required parameter 'transactGetItemsInput' when calling transactGetItems(Async)");
        }

        return transactGetItemsCall(xAmzTarget, transactGetItemsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt; &lt;code&gt;TransactGetItems&lt;/code&gt; is a synchronous operation that atomically retrieves multiple items from one or more tables (but not from indexes) in a single account and Region. A &lt;code&gt;TransactGetItems&lt;/code&gt; call can contain up to 100 &lt;code&gt;TransactGetItem&lt;/code&gt; objects, each of which contains a &lt;code&gt;Get&lt;/code&gt; structure that specifies an item to retrieve from a table in the account and Region. A call to &lt;code&gt;TransactGetItems&lt;/code&gt; cannot retrieve items from tables in more than one Amazon Web Services account or Region. The aggregate size of the items in the transaction cannot exceed 4 MB.&lt;/p&gt; &lt;p&gt;DynamoDB rejects the entire &lt;code&gt;TransactGetItems&lt;/code&gt; request if any of the following is true:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A conflicting operation is in the process of updating an item to be read.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;There is insufficient provisioned capacity for the transaction to be completed.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;There is a user error, such as an invalid data format.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The aggregate size of the items in the transaction exceeded 4 MB.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param transactGetItemsInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return TransactGetItemsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TransactionCanceledException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ProvisionedThroughputExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RequestLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public TransactGetItemsOutput transactGetItems(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull TransactGetItemsInput transactGetItemsInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders) throws ApiException {
        ApiResponse<TransactGetItemsOutput> localVarResp = transactGetItemsWithHttpInfo(xAmzTarget, transactGetItemsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt; &lt;code&gt;TransactGetItems&lt;/code&gt; is a synchronous operation that atomically retrieves multiple items from one or more tables (but not from indexes) in a single account and Region. A &lt;code&gt;TransactGetItems&lt;/code&gt; call can contain up to 100 &lt;code&gt;TransactGetItem&lt;/code&gt; objects, each of which contains a &lt;code&gt;Get&lt;/code&gt; structure that specifies an item to retrieve from a table in the account and Region. A call to &lt;code&gt;TransactGetItems&lt;/code&gt; cannot retrieve items from tables in more than one Amazon Web Services account or Region. The aggregate size of the items in the transaction cannot exceed 4 MB.&lt;/p&gt; &lt;p&gt;DynamoDB rejects the entire &lt;code&gt;TransactGetItems&lt;/code&gt; request if any of the following is true:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A conflicting operation is in the process of updating an item to be read.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;There is insufficient provisioned capacity for the transaction to be completed.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;There is a user error, such as an invalid data format.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The aggregate size of the items in the transaction exceeded 4 MB.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param transactGetItemsInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;TransactGetItemsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TransactionCanceledException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ProvisionedThroughputExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RequestLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TransactGetItemsOutput> transactGetItemsWithHttpInfo(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull TransactGetItemsInput transactGetItemsInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = transactGetItemsValidateBeforeCall(xAmzTarget, transactGetItemsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<TransactGetItemsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt; &lt;code&gt;TransactGetItems&lt;/code&gt; is a synchronous operation that atomically retrieves multiple items from one or more tables (but not from indexes) in a single account and Region. A &lt;code&gt;TransactGetItems&lt;/code&gt; call can contain up to 100 &lt;code&gt;TransactGetItem&lt;/code&gt; objects, each of which contains a &lt;code&gt;Get&lt;/code&gt; structure that specifies an item to retrieve from a table in the account and Region. A call to &lt;code&gt;TransactGetItems&lt;/code&gt; cannot retrieve items from tables in more than one Amazon Web Services account or Region. The aggregate size of the items in the transaction cannot exceed 4 MB.&lt;/p&gt; &lt;p&gt;DynamoDB rejects the entire &lt;code&gt;TransactGetItems&lt;/code&gt; request if any of the following is true:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A conflicting operation is in the process of updating an item to be read.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;There is insufficient provisioned capacity for the transaction to be completed.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;There is a user error, such as an invalid data format.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The aggregate size of the items in the transaction exceeded 4 MB.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param transactGetItemsInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TransactionCanceledException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ProvisionedThroughputExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RequestLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactGetItemsAsync(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull TransactGetItemsInput transactGetItemsInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback<TransactGetItemsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = transactGetItemsValidateBeforeCall(xAmzTarget, transactGetItemsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<TransactGetItemsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transactWriteItems
     * @param xAmzTarget  (required)
     * @param transactWriteItemsInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TransactionCanceledException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TransactionInProgressException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> IdempotentParameterMismatchException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ProvisionedThroughputExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> RequestLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactWriteItemsCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull TransactWriteItemsInput transactWriteItemsInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transactWriteItemsInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=DynamoDB_20120810.TransactWriteItems";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }


        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }


        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }


        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }


        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }


        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }


        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }


        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }


        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transactWriteItemsValidateBeforeCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull TransactWriteItemsInput transactWriteItemsInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling transactWriteItems(Async)");
        }

        // verify the required parameter 'transactWriteItemsInput' is set
        if (transactWriteItemsInput == null) {
            throw new ApiException("Missing the required parameter 'transactWriteItemsInput' when calling transactWriteItems(Async)");
        }

        return transactWriteItemsCall(xAmzTarget, transactWriteItemsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt; &lt;code&gt;TransactWriteItems&lt;/code&gt; is a synchronous write operation that groups up to 100 action requests. These actions can target items in different tables, but not in different Amazon Web Services accounts or Regions, and no two actions can target the same item. For example, you cannot both &lt;code&gt;ConditionCheck&lt;/code&gt; and &lt;code&gt;Update&lt;/code&gt; the same item. The aggregate size of the items in the transaction cannot exceed 4 MB.&lt;/p&gt; &lt;p&gt;The actions are completed atomically so that either all of them succeed, or all of them fail. They are defined by the following objects:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Put&lt;/code&gt;  —   Initiates a &lt;code&gt;PutItem&lt;/code&gt; operation to write a new item. This structure specifies the primary key of the item to be written, the name of the table to write it in, an optional condition expression that must be satisfied for the write to succeed, a list of the item&#39;s attributes, and a field indicating whether to retrieve the item&#39;s attributes if the condition is not met.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Update&lt;/code&gt;  —   Initiates an &lt;code&gt;UpdateItem&lt;/code&gt; operation to update an existing item. This structure specifies the primary key of the item to be updated, the name of the table where it resides, an optional condition expression that must be satisfied for the update to succeed, an expression that defines one or more attributes to be updated, and a field indicating whether to retrieve the item&#39;s attributes if the condition is not met.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Delete&lt;/code&gt;  —   Initiates a &lt;code&gt;DeleteItem&lt;/code&gt; operation to delete an existing item. This structure specifies the primary key of the item to be deleted, the name of the table where it resides, an optional condition expression that must be satisfied for the deletion to succeed, and a field indicating whether to retrieve the item&#39;s attributes if the condition is not met.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ConditionCheck&lt;/code&gt;  —   Applies a condition to an item that is not being modified by the transaction. This structure specifies the primary key of the item to be checked, the name of the table where it resides, a condition expression that must be satisfied for the transaction to succeed, and a field indicating whether to retrieve the item&#39;s attributes if the condition is not met.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;DynamoDB rejects the entire &lt;code&gt;TransactWriteItems&lt;/code&gt; request if any of the following is true:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A condition in one of the condition expressions is not met.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;An ongoing operation is in the process of updating the same item.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;There is insufficient provisioned capacity for the transaction to be completed.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;An item size becomes too large (bigger than 400 KB), a local secondary index (LSI) becomes too large, or a similar validation error occurs because of changes made by the transaction.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The aggregate size of the items in the transaction exceeds 4 MB.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;There is a user error, such as an invalid data format.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param transactWriteItemsInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return TransactWriteItemsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TransactionCanceledException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TransactionInProgressException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> IdempotentParameterMismatchException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ProvisionedThroughputExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> RequestLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public TransactWriteItemsOutput transactWriteItems(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull TransactWriteItemsInput transactWriteItemsInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders) throws ApiException {
        ApiResponse<TransactWriteItemsOutput> localVarResp = transactWriteItemsWithHttpInfo(xAmzTarget, transactWriteItemsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt; &lt;code&gt;TransactWriteItems&lt;/code&gt; is a synchronous write operation that groups up to 100 action requests. These actions can target items in different tables, but not in different Amazon Web Services accounts or Regions, and no two actions can target the same item. For example, you cannot both &lt;code&gt;ConditionCheck&lt;/code&gt; and &lt;code&gt;Update&lt;/code&gt; the same item. The aggregate size of the items in the transaction cannot exceed 4 MB.&lt;/p&gt; &lt;p&gt;The actions are completed atomically so that either all of them succeed, or all of them fail. They are defined by the following objects:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Put&lt;/code&gt;  —   Initiates a &lt;code&gt;PutItem&lt;/code&gt; operation to write a new item. This structure specifies the primary key of the item to be written, the name of the table to write it in, an optional condition expression that must be satisfied for the write to succeed, a list of the item&#39;s attributes, and a field indicating whether to retrieve the item&#39;s attributes if the condition is not met.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Update&lt;/code&gt;  —   Initiates an &lt;code&gt;UpdateItem&lt;/code&gt; operation to update an existing item. This structure specifies the primary key of the item to be updated, the name of the table where it resides, an optional condition expression that must be satisfied for the update to succeed, an expression that defines one or more attributes to be updated, and a field indicating whether to retrieve the item&#39;s attributes if the condition is not met.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Delete&lt;/code&gt;  —   Initiates a &lt;code&gt;DeleteItem&lt;/code&gt; operation to delete an existing item. This structure specifies the primary key of the item to be deleted, the name of the table where it resides, an optional condition expression that must be satisfied for the deletion to succeed, and a field indicating whether to retrieve the item&#39;s attributes if the condition is not met.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ConditionCheck&lt;/code&gt;  —   Applies a condition to an item that is not being modified by the transaction. This structure specifies the primary key of the item to be checked, the name of the table where it resides, a condition expression that must be satisfied for the transaction to succeed, and a field indicating whether to retrieve the item&#39;s attributes if the condition is not met.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;DynamoDB rejects the entire &lt;code&gt;TransactWriteItems&lt;/code&gt; request if any of the following is true:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A condition in one of the condition expressions is not met.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;An ongoing operation is in the process of updating the same item.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;There is insufficient provisioned capacity for the transaction to be completed.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;An item size becomes too large (bigger than 400 KB), a local secondary index (LSI) becomes too large, or a similar validation error occurs because of changes made by the transaction.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The aggregate size of the items in the transaction exceeds 4 MB.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;There is a user error, such as an invalid data format.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param transactWriteItemsInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;TransactWriteItemsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TransactionCanceledException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TransactionInProgressException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> IdempotentParameterMismatchException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ProvisionedThroughputExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> RequestLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TransactWriteItemsOutput> transactWriteItemsWithHttpInfo(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull TransactWriteItemsInput transactWriteItemsInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = transactWriteItemsValidateBeforeCall(xAmzTarget, transactWriteItemsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<TransactWriteItemsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt; &lt;code&gt;TransactWriteItems&lt;/code&gt; is a synchronous write operation that groups up to 100 action requests. These actions can target items in different tables, but not in different Amazon Web Services accounts or Regions, and no two actions can target the same item. For example, you cannot both &lt;code&gt;ConditionCheck&lt;/code&gt; and &lt;code&gt;Update&lt;/code&gt; the same item. The aggregate size of the items in the transaction cannot exceed 4 MB.&lt;/p&gt; &lt;p&gt;The actions are completed atomically so that either all of them succeed, or all of them fail. They are defined by the following objects:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Put&lt;/code&gt;  —   Initiates a &lt;code&gt;PutItem&lt;/code&gt; operation to write a new item. This structure specifies the primary key of the item to be written, the name of the table to write it in, an optional condition expression that must be satisfied for the write to succeed, a list of the item&#39;s attributes, and a field indicating whether to retrieve the item&#39;s attributes if the condition is not met.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Update&lt;/code&gt;  —   Initiates an &lt;code&gt;UpdateItem&lt;/code&gt; operation to update an existing item. This structure specifies the primary key of the item to be updated, the name of the table where it resides, an optional condition expression that must be satisfied for the update to succeed, an expression that defines one or more attributes to be updated, and a field indicating whether to retrieve the item&#39;s attributes if the condition is not met.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Delete&lt;/code&gt;  —   Initiates a &lt;code&gt;DeleteItem&lt;/code&gt; operation to delete an existing item. This structure specifies the primary key of the item to be deleted, the name of the table where it resides, an optional condition expression that must be satisfied for the deletion to succeed, and a field indicating whether to retrieve the item&#39;s attributes if the condition is not met.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ConditionCheck&lt;/code&gt;  —   Applies a condition to an item that is not being modified by the transaction. This structure specifies the primary key of the item to be checked, the name of the table where it resides, a condition expression that must be satisfied for the transaction to succeed, and a field indicating whether to retrieve the item&#39;s attributes if the condition is not met.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;DynamoDB rejects the entire &lt;code&gt;TransactWriteItems&lt;/code&gt; request if any of the following is true:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A condition in one of the condition expressions is not met.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;An ongoing operation is in the process of updating the same item.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;There is insufficient provisioned capacity for the transaction to be completed.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;An item size becomes too large (bigger than 400 KB), a local secondary index (LSI) becomes too large, or a similar validation error occurs because of changes made by the transaction.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The aggregate size of the items in the transaction exceeds 4 MB.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;There is a user error, such as an invalid data format.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param transactWriteItemsInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TransactionCanceledException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TransactionInProgressException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> IdempotentParameterMismatchException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ProvisionedThroughputExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> RequestLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactWriteItemsAsync(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull TransactWriteItemsInput transactWriteItemsInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback<TransactWriteItemsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = transactWriteItemsValidateBeforeCall(xAmzTarget, transactWriteItemsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<TransactWriteItemsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for untagResource
     * @param xAmzTarget  (required)
     * @param untagResourceInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceInUseException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call untagResourceCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull UntagResourceInput untagResourceInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = untagResourceInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=DynamoDB_20120810.UntagResource";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }


        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }


        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }


        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }


        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }


        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }


        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }


        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }


        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call untagResourceValidateBeforeCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull UntagResourceInput untagResourceInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling untagResource(Async)");
        }

        // verify the required parameter 'untagResourceInput' is set
        if (untagResourceInput == null) {
            throw new ApiException("Missing the required parameter 'untagResourceInput' when calling untagResource(Async)");
        }

        return untagResourceCall(xAmzTarget, untagResourceInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Removes the association of tags from an Amazon DynamoDB resource. You can call &lt;code&gt;UntagResource&lt;/code&gt; up to five times per second, per account. &lt;/p&gt; &lt;p&gt;For an overview on tagging DynamoDB resources, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Tagging.html\&quot;&gt;Tagging for DynamoDB&lt;/a&gt; in the &lt;i&gt;Amazon DynamoDB Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param untagResourceInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceInUseException </td><td>  -  </td></tr>
     </table>
     */
    public void untagResource(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull UntagResourceInput untagResourceInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders) throws ApiException {
        untagResourceWithHttpInfo(xAmzTarget, untagResourceInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * &lt;p&gt;Removes the association of tags from an Amazon DynamoDB resource. You can call &lt;code&gt;UntagResource&lt;/code&gt; up to five times per second, per account. &lt;/p&gt; &lt;p&gt;For an overview on tagging DynamoDB resources, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Tagging.html\&quot;&gt;Tagging for DynamoDB&lt;/a&gt; in the &lt;i&gt;Amazon DynamoDB Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param untagResourceInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceInUseException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> untagResourceWithHttpInfo(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull UntagResourceInput untagResourceInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = untagResourceValidateBeforeCall(xAmzTarget, untagResourceInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Removes the association of tags from an Amazon DynamoDB resource. You can call &lt;code&gt;UntagResource&lt;/code&gt; up to five times per second, per account. &lt;/p&gt; &lt;p&gt;For an overview on tagging DynamoDB resources, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Tagging.html\&quot;&gt;Tagging for DynamoDB&lt;/a&gt; in the &lt;i&gt;Amazon DynamoDB Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param untagResourceInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceInUseException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call untagResourceAsync(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull UntagResourceInput untagResourceInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = untagResourceValidateBeforeCall(xAmzTarget, untagResourceInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateContinuousBackups
     * @param xAmzTarget  (required)
     * @param updateContinuousBackupsInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TableNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ContinuousBackupsUnavailableException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateContinuousBackupsCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull UpdateContinuousBackupsInput updateContinuousBackupsInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateContinuousBackupsInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=DynamoDB_20120810.UpdateContinuousBackups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }


        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }


        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }


        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }


        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }


        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }


        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }


        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }


        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateContinuousBackupsValidateBeforeCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull UpdateContinuousBackupsInput updateContinuousBackupsInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling updateContinuousBackups(Async)");
        }

        // verify the required parameter 'updateContinuousBackupsInput' is set
        if (updateContinuousBackupsInput == null) {
            throw new ApiException("Missing the required parameter 'updateContinuousBackupsInput' when calling updateContinuousBackups(Async)");
        }

        return updateContinuousBackupsCall(xAmzTarget, updateContinuousBackupsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt; &lt;code&gt;UpdateContinuousBackups&lt;/code&gt; enables or disables point in time recovery for the specified table. A successful &lt;code&gt;UpdateContinuousBackups&lt;/code&gt; call returns the current &lt;code&gt;ContinuousBackupsDescription&lt;/code&gt;. Continuous backups are &lt;code&gt;ENABLED&lt;/code&gt; on all tables at table creation. If point in time recovery is enabled, &lt;code&gt;PointInTimeRecoveryStatus&lt;/code&gt; will be set to ENABLED.&lt;/p&gt; &lt;p&gt; Once continuous backups and point in time recovery are enabled, you can restore to any point in time within &lt;code&gt;EarliestRestorableDateTime&lt;/code&gt; and &lt;code&gt;LatestRestorableDateTime&lt;/code&gt;. &lt;/p&gt; &lt;p&gt; &lt;code&gt;LatestRestorableDateTime&lt;/code&gt; is typically 5 minutes before the current time. You can restore your table to any point in time during the last 35 days. &lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param updateContinuousBackupsInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return UpdateContinuousBackupsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TableNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ContinuousBackupsUnavailableException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public UpdateContinuousBackupsOutput updateContinuousBackups(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull UpdateContinuousBackupsInput updateContinuousBackupsInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders) throws ApiException {
        ApiResponse<UpdateContinuousBackupsOutput> localVarResp = updateContinuousBackupsWithHttpInfo(xAmzTarget, updateContinuousBackupsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt; &lt;code&gt;UpdateContinuousBackups&lt;/code&gt; enables or disables point in time recovery for the specified table. A successful &lt;code&gt;UpdateContinuousBackups&lt;/code&gt; call returns the current &lt;code&gt;ContinuousBackupsDescription&lt;/code&gt;. Continuous backups are &lt;code&gt;ENABLED&lt;/code&gt; on all tables at table creation. If point in time recovery is enabled, &lt;code&gt;PointInTimeRecoveryStatus&lt;/code&gt; will be set to ENABLED.&lt;/p&gt; &lt;p&gt; Once continuous backups and point in time recovery are enabled, you can restore to any point in time within &lt;code&gt;EarliestRestorableDateTime&lt;/code&gt; and &lt;code&gt;LatestRestorableDateTime&lt;/code&gt;. &lt;/p&gt; &lt;p&gt; &lt;code&gt;LatestRestorableDateTime&lt;/code&gt; is typically 5 minutes before the current time. You can restore your table to any point in time during the last 35 days. &lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param updateContinuousBackupsInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;UpdateContinuousBackupsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TableNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ContinuousBackupsUnavailableException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateContinuousBackupsOutput> updateContinuousBackupsWithHttpInfo(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull UpdateContinuousBackupsInput updateContinuousBackupsInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateContinuousBackupsValidateBeforeCall(xAmzTarget, updateContinuousBackupsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<UpdateContinuousBackupsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt; &lt;code&gt;UpdateContinuousBackups&lt;/code&gt; enables or disables point in time recovery for the specified table. A successful &lt;code&gt;UpdateContinuousBackups&lt;/code&gt; call returns the current &lt;code&gt;ContinuousBackupsDescription&lt;/code&gt;. Continuous backups are &lt;code&gt;ENABLED&lt;/code&gt; on all tables at table creation. If point in time recovery is enabled, &lt;code&gt;PointInTimeRecoveryStatus&lt;/code&gt; will be set to ENABLED.&lt;/p&gt; &lt;p&gt; Once continuous backups and point in time recovery are enabled, you can restore to any point in time within &lt;code&gt;EarliestRestorableDateTime&lt;/code&gt; and &lt;code&gt;LatestRestorableDateTime&lt;/code&gt;. &lt;/p&gt; &lt;p&gt; &lt;code&gt;LatestRestorableDateTime&lt;/code&gt; is typically 5 minutes before the current time. You can restore your table to any point in time during the last 35 days. &lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param updateContinuousBackupsInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TableNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ContinuousBackupsUnavailableException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateContinuousBackupsAsync(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull UpdateContinuousBackupsInput updateContinuousBackupsInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback<UpdateContinuousBackupsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateContinuousBackupsValidateBeforeCall(xAmzTarget, updateContinuousBackupsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<UpdateContinuousBackupsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateContributorInsights
     * @param xAmzTarget  (required)
     * @param updateContributorInsightsInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateContributorInsightsCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull UpdateContributorInsightsInput updateContributorInsightsInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateContributorInsightsInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=DynamoDB_20120810.UpdateContributorInsights";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }


        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }


        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }


        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }


        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }


        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }


        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }


        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }


        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateContributorInsightsValidateBeforeCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull UpdateContributorInsightsInput updateContributorInsightsInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling updateContributorInsights(Async)");
        }

        // verify the required parameter 'updateContributorInsightsInput' is set
        if (updateContributorInsightsInput == null) {
            throw new ApiException("Missing the required parameter 'updateContributorInsightsInput' when calling updateContributorInsights(Async)");
        }

        return updateContributorInsightsCall(xAmzTarget, updateContributorInsightsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Updates the status for contributor insights for a specific table or index. CloudWatch Contributor Insights for DynamoDB graphs display the partition key and (if applicable) sort key of frequently accessed items and frequently throttled items in plaintext. If you require the use of Amazon Web Services Key Management Service (KMS) to encrypt this table’s partition key and sort key data with an Amazon Web Services managed key or customer managed key, you should not enable CloudWatch Contributor Insights for DynamoDB for this table.
     * @param xAmzTarget  (required)
     * @param updateContributorInsightsInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return UpdateContributorInsightsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public UpdateContributorInsightsOutput updateContributorInsights(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull UpdateContributorInsightsInput updateContributorInsightsInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders) throws ApiException {
        ApiResponse<UpdateContributorInsightsOutput> localVarResp = updateContributorInsightsWithHttpInfo(xAmzTarget, updateContributorInsightsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates the status for contributor insights for a specific table or index. CloudWatch Contributor Insights for DynamoDB graphs display the partition key and (if applicable) sort key of frequently accessed items and frequently throttled items in plaintext. If you require the use of Amazon Web Services Key Management Service (KMS) to encrypt this table’s partition key and sort key data with an Amazon Web Services managed key or customer managed key, you should not enable CloudWatch Contributor Insights for DynamoDB for this table.
     * @param xAmzTarget  (required)
     * @param updateContributorInsightsInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;UpdateContributorInsightsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateContributorInsightsOutput> updateContributorInsightsWithHttpInfo(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull UpdateContributorInsightsInput updateContributorInsightsInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateContributorInsightsValidateBeforeCall(xAmzTarget, updateContributorInsightsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<UpdateContributorInsightsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates the status for contributor insights for a specific table or index. CloudWatch Contributor Insights for DynamoDB graphs display the partition key and (if applicable) sort key of frequently accessed items and frequently throttled items in plaintext. If you require the use of Amazon Web Services Key Management Service (KMS) to encrypt this table’s partition key and sort key data with an Amazon Web Services managed key or customer managed key, you should not enable CloudWatch Contributor Insights for DynamoDB for this table.
     * @param xAmzTarget  (required)
     * @param updateContributorInsightsInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateContributorInsightsAsync(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull UpdateContributorInsightsInput updateContributorInsightsInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback<UpdateContributorInsightsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateContributorInsightsValidateBeforeCall(xAmzTarget, updateContributorInsightsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<UpdateContributorInsightsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateGlobalTable
     * @param xAmzTarget  (required)
     * @param updateGlobalTableInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> GlobalTableNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ReplicaAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ReplicaNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TableNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGlobalTableCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull UpdateGlobalTableInput updateGlobalTableInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateGlobalTableInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=DynamoDB_20120810.UpdateGlobalTable";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }


        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }


        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }


        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }


        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }


        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }


        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }


        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }


        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateGlobalTableValidateBeforeCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull UpdateGlobalTableInput updateGlobalTableInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling updateGlobalTable(Async)");
        }

        // verify the required parameter 'updateGlobalTableInput' is set
        if (updateGlobalTableInput == null) {
            throw new ApiException("Missing the required parameter 'updateGlobalTableInput' when calling updateGlobalTable(Async)");
        }

        return updateGlobalTableCall(xAmzTarget, updateGlobalTableInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Adds or removes replicas in the specified global table. The global table must already exist to be able to use this operation. Any replica to be added must be empty, have the same name as the global table, have the same key schema, have DynamoDB Streams enabled, and have the same provisioned and maximum write capacity units.&lt;/p&gt; &lt;important&gt; &lt;p&gt;This operation only applies to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.V1.html\&quot;&gt;Version 2017.11.29 (Legacy)&lt;/a&gt; of global tables. We recommend using &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.V2.html\&quot;&gt;Version 2019.11.21 (Current)&lt;/a&gt; when creating new global tables, as it provides greater flexibility, higher efficiency and consumes less write capacity than 2017.11.29 (Legacy). To determine which version you are using, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.DetermineVersion.html\&quot;&gt;Determining the version&lt;/a&gt;. To update existing global tables from version 2017.11.29 (Legacy) to version 2019.11.21 (Current), see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/V2globaltables_upgrade.html\&quot;&gt; Updating global tables&lt;/a&gt;. &lt;/p&gt; &lt;/important&gt; &lt;note&gt; &lt;p&gt; This operation only applies to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.V1.html\&quot;&gt;Version 2017.11.29&lt;/a&gt; of global tables. If you are using global tables &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.V2.html\&quot;&gt;Version 2019.11.21&lt;/a&gt; you can use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_DescribeTable.html\&quot;&gt;DescribeTable&lt;/a&gt; instead. &lt;/p&gt; &lt;p&gt; Although you can use &lt;code&gt;UpdateGlobalTable&lt;/code&gt; to add replicas and remove replicas in a single request, for simplicity we recommend that you issue separate requests for adding or removing replicas. &lt;/p&gt; &lt;/note&gt; &lt;p&gt; If global secondary indexes are specified, then the following conditions must also be met: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; The global secondary indexes must have the same name. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; The global secondary indexes must have the same hash key and sort key (if present). &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; The global secondary indexes must have the same provisioned and maximum write capacity units. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param updateGlobalTableInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return UpdateGlobalTableOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> GlobalTableNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ReplicaAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ReplicaNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TableNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public UpdateGlobalTableOutput updateGlobalTable(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull UpdateGlobalTableInput updateGlobalTableInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders) throws ApiException {
        ApiResponse<UpdateGlobalTableOutput> localVarResp = updateGlobalTableWithHttpInfo(xAmzTarget, updateGlobalTableInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Adds or removes replicas in the specified global table. The global table must already exist to be able to use this operation. Any replica to be added must be empty, have the same name as the global table, have the same key schema, have DynamoDB Streams enabled, and have the same provisioned and maximum write capacity units.&lt;/p&gt; &lt;important&gt; &lt;p&gt;This operation only applies to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.V1.html\&quot;&gt;Version 2017.11.29 (Legacy)&lt;/a&gt; of global tables. We recommend using &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.V2.html\&quot;&gt;Version 2019.11.21 (Current)&lt;/a&gt; when creating new global tables, as it provides greater flexibility, higher efficiency and consumes less write capacity than 2017.11.29 (Legacy). To determine which version you are using, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.DetermineVersion.html\&quot;&gt;Determining the version&lt;/a&gt;. To update existing global tables from version 2017.11.29 (Legacy) to version 2019.11.21 (Current), see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/V2globaltables_upgrade.html\&quot;&gt; Updating global tables&lt;/a&gt;. &lt;/p&gt; &lt;/important&gt; &lt;note&gt; &lt;p&gt; This operation only applies to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.V1.html\&quot;&gt;Version 2017.11.29&lt;/a&gt; of global tables. If you are using global tables &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.V2.html\&quot;&gt;Version 2019.11.21&lt;/a&gt; you can use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_DescribeTable.html\&quot;&gt;DescribeTable&lt;/a&gt; instead. &lt;/p&gt; &lt;p&gt; Although you can use &lt;code&gt;UpdateGlobalTable&lt;/code&gt; to add replicas and remove replicas in a single request, for simplicity we recommend that you issue separate requests for adding or removing replicas. &lt;/p&gt; &lt;/note&gt; &lt;p&gt; If global secondary indexes are specified, then the following conditions must also be met: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; The global secondary indexes must have the same name. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; The global secondary indexes must have the same hash key and sort key (if present). &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; The global secondary indexes must have the same provisioned and maximum write capacity units. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param updateGlobalTableInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;UpdateGlobalTableOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> GlobalTableNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ReplicaAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ReplicaNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TableNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateGlobalTableOutput> updateGlobalTableWithHttpInfo(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull UpdateGlobalTableInput updateGlobalTableInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateGlobalTableValidateBeforeCall(xAmzTarget, updateGlobalTableInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<UpdateGlobalTableOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Adds or removes replicas in the specified global table. The global table must already exist to be able to use this operation. Any replica to be added must be empty, have the same name as the global table, have the same key schema, have DynamoDB Streams enabled, and have the same provisioned and maximum write capacity units.&lt;/p&gt; &lt;important&gt; &lt;p&gt;This operation only applies to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.V1.html\&quot;&gt;Version 2017.11.29 (Legacy)&lt;/a&gt; of global tables. We recommend using &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.V2.html\&quot;&gt;Version 2019.11.21 (Current)&lt;/a&gt; when creating new global tables, as it provides greater flexibility, higher efficiency and consumes less write capacity than 2017.11.29 (Legacy). To determine which version you are using, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.DetermineVersion.html\&quot;&gt;Determining the version&lt;/a&gt;. To update existing global tables from version 2017.11.29 (Legacy) to version 2019.11.21 (Current), see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/V2globaltables_upgrade.html\&quot;&gt; Updating global tables&lt;/a&gt;. &lt;/p&gt; &lt;/important&gt; &lt;note&gt; &lt;p&gt; This operation only applies to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.V1.html\&quot;&gt;Version 2017.11.29&lt;/a&gt; of global tables. If you are using global tables &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.V2.html\&quot;&gt;Version 2019.11.21&lt;/a&gt; you can use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_DescribeTable.html\&quot;&gt;DescribeTable&lt;/a&gt; instead. &lt;/p&gt; &lt;p&gt; Although you can use &lt;code&gt;UpdateGlobalTable&lt;/code&gt; to add replicas and remove replicas in a single request, for simplicity we recommend that you issue separate requests for adding or removing replicas. &lt;/p&gt; &lt;/note&gt; &lt;p&gt; If global secondary indexes are specified, then the following conditions must also be met: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; The global secondary indexes must have the same name. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; The global secondary indexes must have the same hash key and sort key (if present). &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; The global secondary indexes must have the same provisioned and maximum write capacity units. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param updateGlobalTableInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> GlobalTableNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ReplicaAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ReplicaNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TableNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGlobalTableAsync(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull UpdateGlobalTableInput updateGlobalTableInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback<UpdateGlobalTableOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateGlobalTableValidateBeforeCall(xAmzTarget, updateGlobalTableInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<UpdateGlobalTableOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateGlobalTableSettings
     * @param xAmzTarget  (required)
     * @param updateGlobalTableSettingsInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalTableNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ReplicaNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> IndexNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceInUseException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGlobalTableSettingsCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull UpdateGlobalTableSettingsInput updateGlobalTableSettingsInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateGlobalTableSettingsInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=DynamoDB_20120810.UpdateGlobalTableSettings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }


        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }


        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }


        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }


        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }


        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }


        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }


        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }


        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateGlobalTableSettingsValidateBeforeCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull UpdateGlobalTableSettingsInput updateGlobalTableSettingsInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling updateGlobalTableSettings(Async)");
        }

        // verify the required parameter 'updateGlobalTableSettingsInput' is set
        if (updateGlobalTableSettingsInput == null) {
            throw new ApiException("Missing the required parameter 'updateGlobalTableSettingsInput' when calling updateGlobalTableSettings(Async)");
        }

        return updateGlobalTableSettingsCall(xAmzTarget, updateGlobalTableSettingsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Updates settings for a global table.&lt;/p&gt; &lt;important&gt; &lt;p&gt;This operation only applies to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.V1.html\&quot;&gt;Version 2017.11.29 (Legacy)&lt;/a&gt; of global tables. We recommend using &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.V2.html\&quot;&gt;Version 2019.11.21 (Current)&lt;/a&gt; when creating new global tables, as it provides greater flexibility, higher efficiency and consumes less write capacity than 2017.11.29 (Legacy). To determine which version you are using, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.DetermineVersion.html\&quot;&gt;Determining the version&lt;/a&gt;. To update existing global tables from version 2017.11.29 (Legacy) to version 2019.11.21 (Current), see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/V2globaltables_upgrade.html\&quot;&gt; Updating global tables&lt;/a&gt;. &lt;/p&gt; &lt;/important&gt;
     * @param xAmzTarget  (required)
     * @param updateGlobalTableSettingsInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return UpdateGlobalTableSettingsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalTableNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ReplicaNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> IndexNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceInUseException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public UpdateGlobalTableSettingsOutput updateGlobalTableSettings(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull UpdateGlobalTableSettingsInput updateGlobalTableSettingsInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders) throws ApiException {
        ApiResponse<UpdateGlobalTableSettingsOutput> localVarResp = updateGlobalTableSettingsWithHttpInfo(xAmzTarget, updateGlobalTableSettingsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Updates settings for a global table.&lt;/p&gt; &lt;important&gt; &lt;p&gt;This operation only applies to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.V1.html\&quot;&gt;Version 2017.11.29 (Legacy)&lt;/a&gt; of global tables. We recommend using &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.V2.html\&quot;&gt;Version 2019.11.21 (Current)&lt;/a&gt; when creating new global tables, as it provides greater flexibility, higher efficiency and consumes less write capacity than 2017.11.29 (Legacy). To determine which version you are using, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.DetermineVersion.html\&quot;&gt;Determining the version&lt;/a&gt;. To update existing global tables from version 2017.11.29 (Legacy) to version 2019.11.21 (Current), see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/V2globaltables_upgrade.html\&quot;&gt; Updating global tables&lt;/a&gt;. &lt;/p&gt; &lt;/important&gt;
     * @param xAmzTarget  (required)
     * @param updateGlobalTableSettingsInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;UpdateGlobalTableSettingsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalTableNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ReplicaNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> IndexNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceInUseException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateGlobalTableSettingsOutput> updateGlobalTableSettingsWithHttpInfo(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull UpdateGlobalTableSettingsInput updateGlobalTableSettingsInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateGlobalTableSettingsValidateBeforeCall(xAmzTarget, updateGlobalTableSettingsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<UpdateGlobalTableSettingsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Updates settings for a global table.&lt;/p&gt; &lt;important&gt; &lt;p&gt;This operation only applies to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.V1.html\&quot;&gt;Version 2017.11.29 (Legacy)&lt;/a&gt; of global tables. We recommend using &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.V2.html\&quot;&gt;Version 2019.11.21 (Current)&lt;/a&gt; when creating new global tables, as it provides greater flexibility, higher efficiency and consumes less write capacity than 2017.11.29 (Legacy). To determine which version you are using, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.DetermineVersion.html\&quot;&gt;Determining the version&lt;/a&gt;. To update existing global tables from version 2017.11.29 (Legacy) to version 2019.11.21 (Current), see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/V2globaltables_upgrade.html\&quot;&gt; Updating global tables&lt;/a&gt;. &lt;/p&gt; &lt;/important&gt;
     * @param xAmzTarget  (required)
     * @param updateGlobalTableSettingsInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalTableNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ReplicaNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> IndexNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceInUseException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGlobalTableSettingsAsync(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull UpdateGlobalTableSettingsInput updateGlobalTableSettingsInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback<UpdateGlobalTableSettingsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateGlobalTableSettingsValidateBeforeCall(xAmzTarget, updateGlobalTableSettingsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<UpdateGlobalTableSettingsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateItem
     * @param xAmzTarget  (required)
     * @param updateItemInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ConditionalCheckFailedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ProvisionedThroughputExceededException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ItemCollectionSizeLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TransactionConflictException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> RequestLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateItemCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull UpdateItemInput updateItemInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateItemInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=DynamoDB_20120810.UpdateItem";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }


        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }


        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }


        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }


        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }


        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }


        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }


        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }


        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateItemValidateBeforeCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull UpdateItemInput updateItemInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling updateItem(Async)");
        }

        // verify the required parameter 'updateItemInput' is set
        if (updateItemInput == null) {
            throw new ApiException("Missing the required parameter 'updateItemInput' when calling updateItem(Async)");
        }

        return updateItemCall(xAmzTarget, updateItemInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Edits an existing item&#39;s attributes, or adds a new item to the table if it does not already exist. You can put, delete, or add attribute values. You can also perform a conditional update on an existing item (insert a new attribute name-value pair if it doesn&#39;t exist, or replace an existing name-value pair if it has certain expected attribute values).&lt;/p&gt; &lt;p&gt;You can also return the item&#39;s attribute values in the same &lt;code&gt;UpdateItem&lt;/code&gt; operation using the &lt;code&gt;ReturnValues&lt;/code&gt; parameter.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param updateItemInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return UpdateItemOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ConditionalCheckFailedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ProvisionedThroughputExceededException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ItemCollectionSizeLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TransactionConflictException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> RequestLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public UpdateItemOutput updateItem(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull UpdateItemInput updateItemInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders) throws ApiException {
        ApiResponse<UpdateItemOutput> localVarResp = updateItemWithHttpInfo(xAmzTarget, updateItemInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Edits an existing item&#39;s attributes, or adds a new item to the table if it does not already exist. You can put, delete, or add attribute values. You can also perform a conditional update on an existing item (insert a new attribute name-value pair if it doesn&#39;t exist, or replace an existing name-value pair if it has certain expected attribute values).&lt;/p&gt; &lt;p&gt;You can also return the item&#39;s attribute values in the same &lt;code&gt;UpdateItem&lt;/code&gt; operation using the &lt;code&gt;ReturnValues&lt;/code&gt; parameter.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param updateItemInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;UpdateItemOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ConditionalCheckFailedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ProvisionedThroughputExceededException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ItemCollectionSizeLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TransactionConflictException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> RequestLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateItemOutput> updateItemWithHttpInfo(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull UpdateItemInput updateItemInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateItemValidateBeforeCall(xAmzTarget, updateItemInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<UpdateItemOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Edits an existing item&#39;s attributes, or adds a new item to the table if it does not already exist. You can put, delete, or add attribute values. You can also perform a conditional update on an existing item (insert a new attribute name-value pair if it doesn&#39;t exist, or replace an existing name-value pair if it has certain expected attribute values).&lt;/p&gt; &lt;p&gt;You can also return the item&#39;s attribute values in the same &lt;code&gt;UpdateItem&lt;/code&gt; operation using the &lt;code&gt;ReturnValues&lt;/code&gt; parameter.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param updateItemInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ConditionalCheckFailedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ProvisionedThroughputExceededException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ItemCollectionSizeLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TransactionConflictException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> RequestLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateItemAsync(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull UpdateItemInput updateItemInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback<UpdateItemOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateItemValidateBeforeCall(xAmzTarget, updateItemInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<UpdateItemOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateTable
     * @param xAmzTarget  (required)
     * @param updateTableInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceInUseException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTableCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull UpdateTableInput updateTableInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateTableInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=DynamoDB_20120810.UpdateTable";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }


        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }


        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }


        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }


        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }


        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }


        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }


        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }


        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTableValidateBeforeCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull UpdateTableInput updateTableInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling updateTable(Async)");
        }

        // verify the required parameter 'updateTableInput' is set
        if (updateTableInput == null) {
            throw new ApiException("Missing the required parameter 'updateTableInput' when calling updateTable(Async)");
        }

        return updateTableCall(xAmzTarget, updateTableInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Modifies the provisioned throughput settings, global secondary indexes, or DynamoDB Streams settings for a given table.&lt;/p&gt; &lt;important&gt; &lt;p&gt;This operation only applies to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.V2.html\&quot;&gt;Version 2019.11.21 (Current)&lt;/a&gt; of global tables. &lt;/p&gt; &lt;/important&gt; &lt;p&gt;You can only perform one of the following operations at once:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Modify the provisioned throughput settings of the table.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Remove a global secondary index from the table.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Create a new global secondary index on the table. After the index begins backfilling, you can use &lt;code&gt;UpdateTable&lt;/code&gt; to perform other operations.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; &lt;code&gt;UpdateTable&lt;/code&gt; is an asynchronous operation; while it is executing, the table status changes from &lt;code&gt;ACTIVE&lt;/code&gt; to &lt;code&gt;UPDATING&lt;/code&gt;. While it is &lt;code&gt;UPDATING&lt;/code&gt;, you cannot issue another &lt;code&gt;UpdateTable&lt;/code&gt; request. When the table returns to the &lt;code&gt;ACTIVE&lt;/code&gt; state, the &lt;code&gt;UpdateTable&lt;/code&gt; operation is complete.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param updateTableInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return UpdateTableOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceInUseException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public UpdateTableOutput updateTable(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull UpdateTableInput updateTableInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders) throws ApiException {
        ApiResponse<UpdateTableOutput> localVarResp = updateTableWithHttpInfo(xAmzTarget, updateTableInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Modifies the provisioned throughput settings, global secondary indexes, or DynamoDB Streams settings for a given table.&lt;/p&gt; &lt;important&gt; &lt;p&gt;This operation only applies to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.V2.html\&quot;&gt;Version 2019.11.21 (Current)&lt;/a&gt; of global tables. &lt;/p&gt; &lt;/important&gt; &lt;p&gt;You can only perform one of the following operations at once:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Modify the provisioned throughput settings of the table.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Remove a global secondary index from the table.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Create a new global secondary index on the table. After the index begins backfilling, you can use &lt;code&gt;UpdateTable&lt;/code&gt; to perform other operations.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; &lt;code&gt;UpdateTable&lt;/code&gt; is an asynchronous operation; while it is executing, the table status changes from &lt;code&gt;ACTIVE&lt;/code&gt; to &lt;code&gt;UPDATING&lt;/code&gt;. While it is &lt;code&gt;UPDATING&lt;/code&gt;, you cannot issue another &lt;code&gt;UpdateTable&lt;/code&gt; request. When the table returns to the &lt;code&gt;ACTIVE&lt;/code&gt; state, the &lt;code&gt;UpdateTable&lt;/code&gt; operation is complete.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param updateTableInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;UpdateTableOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceInUseException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateTableOutput> updateTableWithHttpInfo(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull UpdateTableInput updateTableInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateTableValidateBeforeCall(xAmzTarget, updateTableInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<UpdateTableOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Modifies the provisioned throughput settings, global secondary indexes, or DynamoDB Streams settings for a given table.&lt;/p&gt; &lt;important&gt; &lt;p&gt;This operation only applies to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.V2.html\&quot;&gt;Version 2019.11.21 (Current)&lt;/a&gt; of global tables. &lt;/p&gt; &lt;/important&gt; &lt;p&gt;You can only perform one of the following operations at once:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Modify the provisioned throughput settings of the table.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Remove a global secondary index from the table.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Create a new global secondary index on the table. After the index begins backfilling, you can use &lt;code&gt;UpdateTable&lt;/code&gt; to perform other operations.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; &lt;code&gt;UpdateTable&lt;/code&gt; is an asynchronous operation; while it is executing, the table status changes from &lt;code&gt;ACTIVE&lt;/code&gt; to &lt;code&gt;UPDATING&lt;/code&gt;. While it is &lt;code&gt;UPDATING&lt;/code&gt;, you cannot issue another &lt;code&gt;UpdateTable&lt;/code&gt; request. When the table returns to the &lt;code&gt;ACTIVE&lt;/code&gt; state, the &lt;code&gt;UpdateTable&lt;/code&gt; operation is complete.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param updateTableInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceInUseException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTableAsync(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull UpdateTableInput updateTableInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback<UpdateTableOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTableValidateBeforeCall(xAmzTarget, updateTableInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<UpdateTableOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateTableReplicaAutoScaling
     * @param xAmzTarget  (required)
     * @param updateTableReplicaAutoScalingInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTableReplicaAutoScalingCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull UpdateTableReplicaAutoScalingInput updateTableReplicaAutoScalingInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateTableReplicaAutoScalingInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=DynamoDB_20120810.UpdateTableReplicaAutoScaling";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }


        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }


        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }


        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }


        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }


        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }


        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }


        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }


        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTableReplicaAutoScalingValidateBeforeCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull UpdateTableReplicaAutoScalingInput updateTableReplicaAutoScalingInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling updateTableReplicaAutoScaling(Async)");
        }

        // verify the required parameter 'updateTableReplicaAutoScalingInput' is set
        if (updateTableReplicaAutoScalingInput == null) {
            throw new ApiException("Missing the required parameter 'updateTableReplicaAutoScalingInput' when calling updateTableReplicaAutoScaling(Async)");
        }

        return updateTableReplicaAutoScalingCall(xAmzTarget, updateTableReplicaAutoScalingInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Updates auto scaling settings on your global tables at once.&lt;/p&gt; &lt;important&gt; &lt;p&gt;This operation only applies to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.V2.html\&quot;&gt;Version 2019.11.21 (Current)&lt;/a&gt; of global tables. &lt;/p&gt; &lt;/important&gt;
     * @param xAmzTarget  (required)
     * @param updateTableReplicaAutoScalingInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return UpdateTableReplicaAutoScalingOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public UpdateTableReplicaAutoScalingOutput updateTableReplicaAutoScaling(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull UpdateTableReplicaAutoScalingInput updateTableReplicaAutoScalingInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders) throws ApiException {
        ApiResponse<UpdateTableReplicaAutoScalingOutput> localVarResp = updateTableReplicaAutoScalingWithHttpInfo(xAmzTarget, updateTableReplicaAutoScalingInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Updates auto scaling settings on your global tables at once.&lt;/p&gt; &lt;important&gt; &lt;p&gt;This operation only applies to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.V2.html\&quot;&gt;Version 2019.11.21 (Current)&lt;/a&gt; of global tables. &lt;/p&gt; &lt;/important&gt;
     * @param xAmzTarget  (required)
     * @param updateTableReplicaAutoScalingInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;UpdateTableReplicaAutoScalingOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateTableReplicaAutoScalingOutput> updateTableReplicaAutoScalingWithHttpInfo(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull UpdateTableReplicaAutoScalingInput updateTableReplicaAutoScalingInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateTableReplicaAutoScalingValidateBeforeCall(xAmzTarget, updateTableReplicaAutoScalingInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<UpdateTableReplicaAutoScalingOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Updates auto scaling settings on your global tables at once.&lt;/p&gt; &lt;important&gt; &lt;p&gt;This operation only applies to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.V2.html\&quot;&gt;Version 2019.11.21 (Current)&lt;/a&gt; of global tables. &lt;/p&gt; &lt;/important&gt;
     * @param xAmzTarget  (required)
     * @param updateTableReplicaAutoScalingInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTableReplicaAutoScalingAsync(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull UpdateTableReplicaAutoScalingInput updateTableReplicaAutoScalingInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback<UpdateTableReplicaAutoScalingOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTableReplicaAutoScalingValidateBeforeCall(xAmzTarget, updateTableReplicaAutoScalingInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<UpdateTableReplicaAutoScalingOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateTimeToLive
     * @param xAmzTarget  (required)
     * @param updateTimeToLiveInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceInUseException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTimeToLiveCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull UpdateTimeToLiveInput updateTimeToLiveInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateTimeToLiveInput;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=DynamoDB_20120810.UpdateTimeToLive";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }


        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }


        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }


        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }


        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }


        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }


        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }


        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }


        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTimeToLiveValidateBeforeCall(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull UpdateTimeToLiveInput updateTimeToLiveInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling updateTimeToLive(Async)");
        }

        // verify the required parameter 'updateTimeToLiveInput' is set
        if (updateTimeToLiveInput == null) {
            throw new ApiException("Missing the required parameter 'updateTimeToLiveInput' when calling updateTimeToLive(Async)");
        }

        return updateTimeToLiveCall(xAmzTarget, updateTimeToLiveInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;The &lt;code&gt;UpdateTimeToLive&lt;/code&gt; method enables or disables Time to Live (TTL) for the specified table. A successful &lt;code&gt;UpdateTimeToLive&lt;/code&gt; call returns the current &lt;code&gt;TimeToLiveSpecification&lt;/code&gt;. It can take up to one hour for the change to fully process. Any additional &lt;code&gt;UpdateTimeToLive&lt;/code&gt; calls for the same table during this one hour duration result in a &lt;code&gt;ValidationException&lt;/code&gt;. &lt;/p&gt; &lt;p&gt;TTL compares the current time in epoch time format to the time stored in the TTL attribute of an item. If the epoch time value stored in the attribute is less than the current time, the item is marked as expired and subsequently deleted.&lt;/p&gt; &lt;note&gt; &lt;p&gt; The epoch time format is the number of seconds elapsed since 12:00:00 AM January 1, 1970 UTC. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;DynamoDB deletes expired items on a best-effort basis to ensure availability of throughput for other data operations. &lt;/p&gt; &lt;important&gt; &lt;p&gt;DynamoDB typically deletes expired items within two days of expiration. The exact duration within which an item gets deleted after expiration is specific to the nature of the workload. Items that have expired and not been deleted will still show up in reads, queries, and scans.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;As items are deleted, they are removed from any local secondary index and global secondary index immediately in the same eventually consistent way as a standard delete operation.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/TTL.html\&quot;&gt;Time To Live&lt;/a&gt; in the Amazon DynamoDB Developer Guide. &lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param updateTimeToLiveInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return UpdateTimeToLiveOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceInUseException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public UpdateTimeToLiveOutput updateTimeToLive(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull UpdateTimeToLiveInput updateTimeToLiveInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders) throws ApiException {
        ApiResponse<UpdateTimeToLiveOutput> localVarResp = updateTimeToLiveWithHttpInfo(xAmzTarget, updateTimeToLiveInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;The &lt;code&gt;UpdateTimeToLive&lt;/code&gt; method enables or disables Time to Live (TTL) for the specified table. A successful &lt;code&gt;UpdateTimeToLive&lt;/code&gt; call returns the current &lt;code&gt;TimeToLiveSpecification&lt;/code&gt;. It can take up to one hour for the change to fully process. Any additional &lt;code&gt;UpdateTimeToLive&lt;/code&gt; calls for the same table during this one hour duration result in a &lt;code&gt;ValidationException&lt;/code&gt;. &lt;/p&gt; &lt;p&gt;TTL compares the current time in epoch time format to the time stored in the TTL attribute of an item. If the epoch time value stored in the attribute is less than the current time, the item is marked as expired and subsequently deleted.&lt;/p&gt; &lt;note&gt; &lt;p&gt; The epoch time format is the number of seconds elapsed since 12:00:00 AM January 1, 1970 UTC. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;DynamoDB deletes expired items on a best-effort basis to ensure availability of throughput for other data operations. &lt;/p&gt; &lt;important&gt; &lt;p&gt;DynamoDB typically deletes expired items within two days of expiration. The exact duration within which an item gets deleted after expiration is specific to the nature of the workload. Items that have expired and not been deleted will still show up in reads, queries, and scans.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;As items are deleted, they are removed from any local secondary index and global secondary index immediately in the same eventually consistent way as a standard delete operation.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/TTL.html\&quot;&gt;Time To Live&lt;/a&gt; in the Amazon DynamoDB Developer Guide. &lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param updateTimeToLiveInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;UpdateTimeToLiveOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceInUseException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateTimeToLiveOutput> updateTimeToLiveWithHttpInfo(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull UpdateTimeToLiveInput updateTimeToLiveInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateTimeToLiveValidateBeforeCall(xAmzTarget, updateTimeToLiveInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<UpdateTimeToLiveOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;The &lt;code&gt;UpdateTimeToLive&lt;/code&gt; method enables or disables Time to Live (TTL) for the specified table. A successful &lt;code&gt;UpdateTimeToLive&lt;/code&gt; call returns the current &lt;code&gt;TimeToLiveSpecification&lt;/code&gt;. It can take up to one hour for the change to fully process. Any additional &lt;code&gt;UpdateTimeToLive&lt;/code&gt; calls for the same table during this one hour duration result in a &lt;code&gt;ValidationException&lt;/code&gt;. &lt;/p&gt; &lt;p&gt;TTL compares the current time in epoch time format to the time stored in the TTL attribute of an item. If the epoch time value stored in the attribute is less than the current time, the item is marked as expired and subsequently deleted.&lt;/p&gt; &lt;note&gt; &lt;p&gt; The epoch time format is the number of seconds elapsed since 12:00:00 AM January 1, 1970 UTC. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;DynamoDB deletes expired items on a best-effort basis to ensure availability of throughput for other data operations. &lt;/p&gt; &lt;important&gt; &lt;p&gt;DynamoDB typically deletes expired items within two days of expiration. The exact duration within which an item gets deleted after expiration is specific to the nature of the workload. Items that have expired and not been deleted will still show up in reads, queries, and scans.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;As items are deleted, they are removed from any local secondary index and global secondary index immediately in the same eventually consistent way as a standard delete operation.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/TTL.html\&quot;&gt;Time To Live&lt;/a&gt; in the Amazon DynamoDB Developer Guide. &lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param updateTimeToLiveInput  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceInUseException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTimeToLiveAsync(@javax.annotation.Nonnull String xAmzTarget, @javax.annotation.Nonnull UpdateTimeToLiveInput updateTimeToLiveInput, @javax.annotation.Nullable String xAmzContentSha256, @javax.annotation.Nullable String xAmzDate, @javax.annotation.Nullable String xAmzAlgorithm, @javax.annotation.Nullable String xAmzCredential, @javax.annotation.Nullable String xAmzSecurityToken, @javax.annotation.Nullable String xAmzSignature, @javax.annotation.Nullable String xAmzSignedHeaders, final ApiCallback<UpdateTimeToLiveOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTimeToLiveValidateBeforeCall(xAmzTarget, updateTimeToLiveInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<UpdateTimeToLiveOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
