/*
 * Amazon DynamoDB
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database, so that you don't have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.</p> <p>With DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic. You can scale up or scale down your tables' throughput capacity without downtime or performance degradation, and use the Amazon Web Services Management Console to monitor resource utilization and performance metrics.</p> <p>DynamoDB automatically spreads the data and traffic for your tables over a sufficient number of servers to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and automatically replicated across multiple Availability Zones in an Amazon Web Services Region, providing built-in high availability and data durability.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.SSEType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents the settings used to enable server-side encryption.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T14:20:21.724079+05:30[Asia/Kolkata]", comments = "Generator version: 7.15.0")
public class SSESpecification {
  public static final String SERIALIZED_NAME_ENABLED = "Enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  @javax.annotation.Nullable
  private Boolean enabled;

  public static final String SERIALIZED_NAME_SS_E_TYPE = "SSEType";
  @SerializedName(SERIALIZED_NAME_SS_E_TYPE)
  @javax.annotation.Nullable
  private SSEType ssEType;

  public static final String SERIALIZED_NAME_KM_S_MASTER_KEY_ID = "KMSMasterKeyId";
  @SerializedName(SERIALIZED_NAME_KM_S_MASTER_KEY_ID)
  @javax.annotation.Nullable
  private String kmSMasterKeyId;

  public SSESpecification() {
  }

  public SSESpecification enabled(@javax.annotation.Nullable Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Indicates whether server-side encryption is done using an Amazon Web Services managed key or an Amazon Web Services owned key. If enabled (true), server-side encryption type is set to &lt;code&gt;KMS&lt;/code&gt; and an Amazon Web Services managed key is used (KMS charges apply). If disabled (false) or not specified, server-side encryption is set to Amazon Web Services owned key.
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(@javax.annotation.Nullable Boolean enabled) {
    this.enabled = enabled;
  }


  public SSESpecification ssEType(@javax.annotation.Nullable SSEType ssEType) {
    this.ssEType = ssEType;
    return this;
  }

  /**
   * &lt;p&gt;Server-side encryption type. The only supported value is:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;KMS&lt;/code&gt; - Server-side encryption that uses Key Management Service. The key is stored in your account and is managed by KMS (KMS charges apply).&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
   * @return ssEType
   */
  @javax.annotation.Nullable
  public SSEType getSsEType() {
    return ssEType;
  }

  public void setSsEType(@javax.annotation.Nullable SSEType ssEType) {
    this.ssEType = ssEType;
  }


  public SSESpecification kmSMasterKeyId(@javax.annotation.Nullable String kmSMasterKeyId) {
    this.kmSMasterKeyId = kmSMasterKeyId;
    return this;
  }

  /**
   * The KMS key that should be used for the KMS encryption. To specify a key, use its key ID, Amazon Resource Name (ARN), alias name, or alias ARN. Note that you should only provide this parameter if the key is different from the default DynamoDB key &lt;code&gt;alias/aws/dynamodb&lt;/code&gt;.
   * @return kmSMasterKeyId
   */
  @javax.annotation.Nullable
  public String getKmSMasterKeyId() {
    return kmSMasterKeyId;
  }

  public void setKmSMasterKeyId(@javax.annotation.Nullable String kmSMasterKeyId) {
    this.kmSMasterKeyId = kmSMasterKeyId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SSESpecification ssESpecification = (SSESpecification) o;
    return Objects.equals(this.enabled, ssESpecification.enabled) &&
        Objects.equals(this.ssEType, ssESpecification.ssEType) &&
        Objects.equals(this.kmSMasterKeyId, ssESpecification.kmSMasterKeyId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enabled, ssEType, kmSMasterKeyId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SSESpecification {\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    ssEType: ").append(toIndentedString(ssEType)).append("\n");
    sb.append("    kmSMasterKeyId: ").append(toIndentedString(kmSMasterKeyId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("Enabled", "SSEType", "KMSMasterKeyId"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SSESpecification
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SSESpecification.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SSESpecification is not found in the empty JSON string", SSESpecification.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SSESpecification.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SSESpecification` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `SSEType`
      if (jsonObj.get("SSEType") != null && !jsonObj.get("SSEType").isJsonNull()) {
        SSEType.validateJsonElement(jsonObj.get("SSEType"));
      }
      if ((jsonObj.get("KMSMasterKeyId") != null && !jsonObj.get("KMSMasterKeyId").isJsonNull()) && !jsonObj.get("KMSMasterKeyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `KMSMasterKeyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("KMSMasterKeyId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SSESpecification.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SSESpecification' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SSESpecification> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SSESpecification.class));

       return (TypeAdapter<T>) new TypeAdapter<SSESpecification>() {
           @Override
           public void write(JsonWriter out, SSESpecification value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SSESpecification read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SSESpecification given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SSESpecification
   * @throws IOException if the JSON string is invalid with respect to SSESpecification
   */
  public static SSESpecification fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SSESpecification.class);
  }

  /**
   * Convert an instance of SSESpecification to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

