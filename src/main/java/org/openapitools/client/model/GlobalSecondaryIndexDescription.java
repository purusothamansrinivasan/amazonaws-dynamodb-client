/*
 * Amazon DynamoDB
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database, so that you don't have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.</p> <p>With DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic. You can scale up or scale down your tables' throughput capacity without downtime or performance degradation, and use the Amazon Web Services Management Console to monitor resource utilization and performance metrics.</p> <p>DynamoDB automatically spreads the data and traffic for your tables over a sufficient number of servers to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and automatically replicated across multiple Availability Zones in an Amazon Web Services Region, providing built-in high availability and data durability.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.IndexStatus;
import org.openapitools.client.model.KeySchemaElement;
import org.openapitools.client.model.Projection;
import org.openapitools.client.model.ProvisionedThroughputDescription;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents the properties of a global secondary index.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T14:20:21.724079+05:30[Asia/Kolkata]", comments = "Generator version: 7.15.0")
public class GlobalSecondaryIndexDescription {
  public static final String SERIALIZED_NAME_INDEX_NAME = "IndexName";
  @SerializedName(SERIALIZED_NAME_INDEX_NAME)
  @javax.annotation.Nullable
  private String indexName;

  public static final String SERIALIZED_NAME_KEY_SCHEMA = "KeySchema";
  @SerializedName(SERIALIZED_NAME_KEY_SCHEMA)
  @javax.annotation.Nullable
  private List<KeySchemaElement> keySchema;

  public static final String SERIALIZED_NAME_PROJECTION = "Projection";
  @SerializedName(SERIALIZED_NAME_PROJECTION)
  @javax.annotation.Nullable
  private Projection projection;

  public static final String SERIALIZED_NAME_INDEX_STATUS = "IndexStatus";
  @SerializedName(SERIALIZED_NAME_INDEX_STATUS)
  @javax.annotation.Nullable
  private IndexStatus indexStatus;

  public static final String SERIALIZED_NAME_BACKFILLING = "Backfilling";
  @SerializedName(SERIALIZED_NAME_BACKFILLING)
  @javax.annotation.Nullable
  private Boolean backfilling;

  public static final String SERIALIZED_NAME_PROVISIONED_THROUGHPUT = "ProvisionedThroughput";
  @SerializedName(SERIALIZED_NAME_PROVISIONED_THROUGHPUT)
  @javax.annotation.Nullable
  private ProvisionedThroughputDescription provisionedThroughput;

  public static final String SERIALIZED_NAME_INDEX_SIZE_BYTES = "IndexSizeBytes";
  @SerializedName(SERIALIZED_NAME_INDEX_SIZE_BYTES)
  @javax.annotation.Nullable
  private Integer indexSizeBytes;

  public static final String SERIALIZED_NAME_ITEM_COUNT = "ItemCount";
  @SerializedName(SERIALIZED_NAME_ITEM_COUNT)
  @javax.annotation.Nullable
  private Integer itemCount;

  public static final String SERIALIZED_NAME_INDEX_ARN = "IndexArn";
  @SerializedName(SERIALIZED_NAME_INDEX_ARN)
  @javax.annotation.Nullable
  private String indexArn;

  public GlobalSecondaryIndexDescription() {
  }

  public GlobalSecondaryIndexDescription indexName(@javax.annotation.Nullable String indexName) {
    this.indexName = indexName;
    return this;
  }

  /**
   * The name of the global secondary index.
   * @return indexName
   */
  @javax.annotation.Nullable
  public String getIndexName() {
    return indexName;
  }

  public void setIndexName(@javax.annotation.Nullable String indexName) {
    this.indexName = indexName;
  }


  public GlobalSecondaryIndexDescription keySchema(@javax.annotation.Nullable List<KeySchemaElement> keySchema) {
    this.keySchema = keySchema;
    return this;
  }

  public GlobalSecondaryIndexDescription addKeySchemaItem(KeySchemaElement keySchemaItem) {
    if (this.keySchema == null) {
      this.keySchema = new ArrayList<>();
    }
    this.keySchema.add(keySchemaItem);
    return this;
  }

  /**
   * &lt;p&gt;The complete key schema for a global secondary index, which consists of one or more pairs of attribute names and key types:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;HASH&lt;/code&gt; - partition key&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;RANGE&lt;/code&gt; - sort key&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;The partition key of an item is also known as its &lt;i&gt;hash attribute&lt;/i&gt;. The term \&quot;hash attribute\&quot; derives from DynamoDB&#39;s usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.&lt;/p&gt; &lt;p&gt;The sort key of an item is also known as its &lt;i&gt;range attribute&lt;/i&gt;. The term \&quot;range attribute\&quot; derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.&lt;/p&gt; &lt;/note&gt;
   * @return keySchema
   */
  @javax.annotation.Nullable
  public List<KeySchemaElement> getKeySchema() {
    return keySchema;
  }

  public void setKeySchema(@javax.annotation.Nullable List<KeySchemaElement> keySchema) {
    this.keySchema = keySchema;
  }


  public GlobalSecondaryIndexDescription projection(@javax.annotation.Nullable Projection projection) {
    this.projection = projection;
    return this;
  }

  /**
   * Represents attributes that are copied (projected) from the table into the global secondary index. These are in addition to the primary key attributes and index key attributes, which are automatically projected. 
   * @return projection
   */
  @javax.annotation.Nullable
  public Projection getProjection() {
    return projection;
  }

  public void setProjection(@javax.annotation.Nullable Projection projection) {
    this.projection = projection;
  }


  public GlobalSecondaryIndexDescription indexStatus(@javax.annotation.Nullable IndexStatus indexStatus) {
    this.indexStatus = indexStatus;
    return this;
  }

  /**
   * &lt;p&gt;The current state of the global secondary index:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;CREATING&lt;/code&gt; - The index is being created.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;UPDATING&lt;/code&gt; - The index is being updated.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DELETING&lt;/code&gt; - The index is being deleted.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ACTIVE&lt;/code&gt; - The index is ready for use.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
   * @return indexStatus
   */
  @javax.annotation.Nullable
  public IndexStatus getIndexStatus() {
    return indexStatus;
  }

  public void setIndexStatus(@javax.annotation.Nullable IndexStatus indexStatus) {
    this.indexStatus = indexStatus;
  }


  public GlobalSecondaryIndexDescription backfilling(@javax.annotation.Nullable Boolean backfilling) {
    this.backfilling = backfilling;
    return this;
  }

  /**
   * &lt;p&gt;Indicates whether the index is currently backfilling. &lt;i&gt;Backfilling&lt;/i&gt; is the process of reading items from the table and determining whether they can be added to the index. (Not all items will qualify: For example, a partition key cannot have any duplicate values.) If an item can be added to the index, DynamoDB will do so. After all items have been processed, the backfilling operation is complete and &lt;code&gt;Backfilling&lt;/code&gt; is false.&lt;/p&gt; &lt;p&gt;You can delete an index that is being created during the &lt;code&gt;Backfilling&lt;/code&gt; phase when &lt;code&gt;IndexStatus&lt;/code&gt; is set to CREATING and &lt;code&gt;Backfilling&lt;/code&gt; is true. You can&#39;t delete the index that is being created when &lt;code&gt;IndexStatus&lt;/code&gt; is set to CREATING and &lt;code&gt;Backfilling&lt;/code&gt; is false. &lt;/p&gt; &lt;note&gt; &lt;p&gt;For indexes that were created during a &lt;code&gt;CreateTable&lt;/code&gt; operation, the &lt;code&gt;Backfilling&lt;/code&gt; attribute does not appear in the &lt;code&gt;DescribeTable&lt;/code&gt; output.&lt;/p&gt; &lt;/note&gt;
   * @return backfilling
   */
  @javax.annotation.Nullable
  public Boolean getBackfilling() {
    return backfilling;
  }

  public void setBackfilling(@javax.annotation.Nullable Boolean backfilling) {
    this.backfilling = backfilling;
  }


  public GlobalSecondaryIndexDescription provisionedThroughput(@javax.annotation.Nullable ProvisionedThroughputDescription provisionedThroughput) {
    this.provisionedThroughput = provisionedThroughput;
    return this;
  }

  /**
   * &lt;p&gt;Represents the provisioned throughput settings for the specified global secondary index.&lt;/p&gt; &lt;p&gt;For current minimum and maximum provisioned throughput values, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html\&quot;&gt;Service, Account, and Table Quotas&lt;/a&gt; in the &lt;i&gt;Amazon DynamoDB Developer Guide&lt;/i&gt;.&lt;/p&gt;
   * @return provisionedThroughput
   */
  @javax.annotation.Nullable
  public ProvisionedThroughputDescription getProvisionedThroughput() {
    return provisionedThroughput;
  }

  public void setProvisionedThroughput(@javax.annotation.Nullable ProvisionedThroughputDescription provisionedThroughput) {
    this.provisionedThroughput = provisionedThroughput;
  }


  public GlobalSecondaryIndexDescription indexSizeBytes(@javax.annotation.Nullable Integer indexSizeBytes) {
    this.indexSizeBytes = indexSizeBytes;
    return this;
  }

  /**
   * The total size of the specified index, in bytes. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.
   * @return indexSizeBytes
   */
  @javax.annotation.Nullable
  public Integer getIndexSizeBytes() {
    return indexSizeBytes;
  }

  public void setIndexSizeBytes(@javax.annotation.Nullable Integer indexSizeBytes) {
    this.indexSizeBytes = indexSizeBytes;
  }


  public GlobalSecondaryIndexDescription itemCount(@javax.annotation.Nullable Integer itemCount) {
    this.itemCount = itemCount;
    return this;
  }

  /**
   * The number of items in the specified index. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.
   * @return itemCount
   */
  @javax.annotation.Nullable
  public Integer getItemCount() {
    return itemCount;
  }

  public void setItemCount(@javax.annotation.Nullable Integer itemCount) {
    this.itemCount = itemCount;
  }


  public GlobalSecondaryIndexDescription indexArn(@javax.annotation.Nullable String indexArn) {
    this.indexArn = indexArn;
    return this;
  }

  /**
   * The Amazon Resource Name (ARN) that uniquely identifies the index.
   * @return indexArn
   */
  @javax.annotation.Nullable
  public String getIndexArn() {
    return indexArn;
  }

  public void setIndexArn(@javax.annotation.Nullable String indexArn) {
    this.indexArn = indexArn;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GlobalSecondaryIndexDescription globalSecondaryIndexDescription = (GlobalSecondaryIndexDescription) o;
    return Objects.equals(this.indexName, globalSecondaryIndexDescription.indexName) &&
        Objects.equals(this.keySchema, globalSecondaryIndexDescription.keySchema) &&
        Objects.equals(this.projection, globalSecondaryIndexDescription.projection) &&
        Objects.equals(this.indexStatus, globalSecondaryIndexDescription.indexStatus) &&
        Objects.equals(this.backfilling, globalSecondaryIndexDescription.backfilling) &&
        Objects.equals(this.provisionedThroughput, globalSecondaryIndexDescription.provisionedThroughput) &&
        Objects.equals(this.indexSizeBytes, globalSecondaryIndexDescription.indexSizeBytes) &&
        Objects.equals(this.itemCount, globalSecondaryIndexDescription.itemCount) &&
        Objects.equals(this.indexArn, globalSecondaryIndexDescription.indexArn);
  }

  @Override
  public int hashCode() {
    return Objects.hash(indexName, keySchema, projection, indexStatus, backfilling, provisionedThroughput, indexSizeBytes, itemCount, indexArn);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GlobalSecondaryIndexDescription {\n");
    sb.append("    indexName: ").append(toIndentedString(indexName)).append("\n");
    sb.append("    keySchema: ").append(toIndentedString(keySchema)).append("\n");
    sb.append("    projection: ").append(toIndentedString(projection)).append("\n");
    sb.append("    indexStatus: ").append(toIndentedString(indexStatus)).append("\n");
    sb.append("    backfilling: ").append(toIndentedString(backfilling)).append("\n");
    sb.append("    provisionedThroughput: ").append(toIndentedString(provisionedThroughput)).append("\n");
    sb.append("    indexSizeBytes: ").append(toIndentedString(indexSizeBytes)).append("\n");
    sb.append("    itemCount: ").append(toIndentedString(itemCount)).append("\n");
    sb.append("    indexArn: ").append(toIndentedString(indexArn)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("IndexName", "KeySchema", "Projection", "IndexStatus", "Backfilling", "ProvisionedThroughput", "IndexSizeBytes", "ItemCount", "IndexArn"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GlobalSecondaryIndexDescription
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GlobalSecondaryIndexDescription.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GlobalSecondaryIndexDescription is not found in the empty JSON string", GlobalSecondaryIndexDescription.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GlobalSecondaryIndexDescription.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GlobalSecondaryIndexDescription` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("IndexName") != null && !jsonObj.get("IndexName").isJsonNull()) && !jsonObj.get("IndexName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `IndexName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("IndexName").toString()));
      }
      if (jsonObj.get("KeySchema") != null && !jsonObj.get("KeySchema").isJsonNull()) {
        JsonArray jsonArraykeySchema = jsonObj.getAsJsonArray("KeySchema");
        if (jsonArraykeySchema != null) {
          // ensure the json data is an array
          if (!jsonObj.get("KeySchema").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `KeySchema` to be an array in the JSON string but got `%s`", jsonObj.get("KeySchema").toString()));
          }

          // validate the optional field `KeySchema` (array)
          for (int i = 0; i < jsonArraykeySchema.size(); i++) {
            KeySchemaElement.validateJsonElement(jsonArraykeySchema.get(i));
          };
        }
      }
      // validate the optional field `Projection`
      if (jsonObj.get("Projection") != null && !jsonObj.get("Projection").isJsonNull()) {
        Projection.validateJsonElement(jsonObj.get("Projection"));
      }
      // validate the optional field `IndexStatus`
      if (jsonObj.get("IndexStatus") != null && !jsonObj.get("IndexStatus").isJsonNull()) {
        IndexStatus.validateJsonElement(jsonObj.get("IndexStatus"));
      }
      // validate the optional field `ProvisionedThroughput`
      if (jsonObj.get("ProvisionedThroughput") != null && !jsonObj.get("ProvisionedThroughput").isJsonNull()) {
        ProvisionedThroughputDescription.validateJsonElement(jsonObj.get("ProvisionedThroughput"));
      }
      if ((jsonObj.get("IndexArn") != null && !jsonObj.get("IndexArn").isJsonNull()) && !jsonObj.get("IndexArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `IndexArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("IndexArn").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GlobalSecondaryIndexDescription.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GlobalSecondaryIndexDescription' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GlobalSecondaryIndexDescription> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GlobalSecondaryIndexDescription.class));

       return (TypeAdapter<T>) new TypeAdapter<GlobalSecondaryIndexDescription>() {
           @Override
           public void write(JsonWriter out, GlobalSecondaryIndexDescription value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GlobalSecondaryIndexDescription read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GlobalSecondaryIndexDescription given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GlobalSecondaryIndexDescription
   * @throws IOException if the JSON string is invalid with respect to GlobalSecondaryIndexDescription
   */
  public static GlobalSecondaryIndexDescription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GlobalSecondaryIndexDescription.class);
  }

  /**
   * Convert an instance of GlobalSecondaryIndexDescription to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

