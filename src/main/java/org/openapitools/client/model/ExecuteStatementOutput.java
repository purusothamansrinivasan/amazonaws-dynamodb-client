/*
 * Amazon DynamoDB
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database, so that you don't have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.</p> <p>With DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic. You can scale up or scale down your tables' throughput capacity without downtime or performance degradation, and use the Amazon Web Services Management Console to monitor resource utilization and performance metrics.</p> <p>DynamoDB automatically spreads the data and traffic for your tables over a sufficient number of servers to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and automatically replicated across multiple Availability Zones in an Amazon Web Services Region, providing built-in high availability and data durability.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.AttributeValue;
import org.openapitools.client.model.ConsumedCapacity;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ExecuteStatementOutput
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T14:20:21.724079+05:30[Asia/Kolkata]", comments = "Generator version: 7.15.0")
public class ExecuteStatementOutput {
  public static final String SERIALIZED_NAME_ITEMS = "Items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  @javax.annotation.Nullable
  private List<Map<String, AttributeValue>> items;

  public static final String SERIALIZED_NAME_NEXT_TOKEN = "NextToken";
  @SerializedName(SERIALIZED_NAME_NEXT_TOKEN)
  @javax.annotation.Nullable
  private String nextToken;

  public static final String SERIALIZED_NAME_CONSUMED_CAPACITY = "ConsumedCapacity";
  @SerializedName(SERIALIZED_NAME_CONSUMED_CAPACITY)
  @javax.annotation.Nullable
  private ConsumedCapacity consumedCapacity;

  public static final String SERIALIZED_NAME_LAST_EVALUATED_KEY = "LastEvaluatedKey";
  @SerializedName(SERIALIZED_NAME_LAST_EVALUATED_KEY)
  @javax.annotation.Nullable
  private Map<String, AttributeValue> lastEvaluatedKey;

  public ExecuteStatementOutput() {
  }

  public ExecuteStatementOutput items(@javax.annotation.Nullable List<Map<String, AttributeValue>> items) {
    this.items = items;
    return this;
  }

  public ExecuteStatementOutput addItemsItem(Map<String, AttributeValue> itemsItem) {
    if (this.items == null) {
      this.items = new ArrayList<>();
    }
    this.items.add(itemsItem);
    return this;
  }

  /**
   * If a read operation was used, this property will contain the result of the read operation; a map of attribute names and their values. For the write operations this value will be empty.
   * @return items
   */
  @javax.annotation.Nullable
  public List<Map<String, AttributeValue>> getItems() {
    return items;
  }

  public void setItems(@javax.annotation.Nullable List<Map<String, AttributeValue>> items) {
    this.items = items;
  }


  public ExecuteStatementOutput nextToken(@javax.annotation.Nullable String nextToken) {
    this.nextToken = nextToken;
    return this;
  }

  /**
   * If the response of a read request exceeds the response payload limit DynamoDB will set this value in the response. If set, you can use that this value in the subsequent request to get the remaining results.
   * @return nextToken
   */
  @javax.annotation.Nullable
  public String getNextToken() {
    return nextToken;
  }

  public void setNextToken(@javax.annotation.Nullable String nextToken) {
    this.nextToken = nextToken;
  }


  public ExecuteStatementOutput consumedCapacity(@javax.annotation.Nullable ConsumedCapacity consumedCapacity) {
    this.consumedCapacity = consumedCapacity;
    return this;
  }

  /**
   * Get consumedCapacity
   * @return consumedCapacity
   */
  @javax.annotation.Nullable
  public ConsumedCapacity getConsumedCapacity() {
    return consumedCapacity;
  }

  public void setConsumedCapacity(@javax.annotation.Nullable ConsumedCapacity consumedCapacity) {
    this.consumedCapacity = consumedCapacity;
  }


  public ExecuteStatementOutput lastEvaluatedKey(@javax.annotation.Nullable Map<String, AttributeValue> lastEvaluatedKey) {
    this.lastEvaluatedKey = lastEvaluatedKey;
    return this;
  }

  public ExecuteStatementOutput putLastEvaluatedKeyItem(String key, AttributeValue lastEvaluatedKeyItem) {
    if (this.lastEvaluatedKey == null) {
      this.lastEvaluatedKey = new HashMap<>();
    }
    this.lastEvaluatedKey.put(key, lastEvaluatedKeyItem);
    return this;
  }

  /**
   * The primary key of the item where the operation stopped, inclusive of the previous result set. Use this value to start a new operation, excluding this value in the new request. If &lt;code&gt;LastEvaluatedKey&lt;/code&gt; is empty, then the \&quot;last page\&quot; of results has been processed and there is no more data to be retrieved. If &lt;code&gt;LastEvaluatedKey&lt;/code&gt; is not empty, it does not necessarily mean that there is more data in the result set. The only way to know when you have reached the end of the result set is when &lt;code&gt;LastEvaluatedKey&lt;/code&gt; is empty. 
   * @return lastEvaluatedKey
   */
  @javax.annotation.Nullable
  public Map<String, AttributeValue> getLastEvaluatedKey() {
    return lastEvaluatedKey;
  }

  public void setLastEvaluatedKey(@javax.annotation.Nullable Map<String, AttributeValue> lastEvaluatedKey) {
    this.lastEvaluatedKey = lastEvaluatedKey;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExecuteStatementOutput executeStatementOutput = (ExecuteStatementOutput) o;
    return Objects.equals(this.items, executeStatementOutput.items) &&
        Objects.equals(this.nextToken, executeStatementOutput.nextToken) &&
        Objects.equals(this.consumedCapacity, executeStatementOutput.consumedCapacity) &&
        Objects.equals(this.lastEvaluatedKey, executeStatementOutput.lastEvaluatedKey);
  }

  @Override
  public int hashCode() {
    return Objects.hash(items, nextToken, consumedCapacity, lastEvaluatedKey);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExecuteStatementOutput {\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    nextToken: ").append(toIndentedString(nextToken)).append("\n");
    sb.append("    consumedCapacity: ").append(toIndentedString(consumedCapacity)).append("\n");
    sb.append("    lastEvaluatedKey: ").append(toIndentedString(lastEvaluatedKey)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("Items", "NextToken", "ConsumedCapacity", "LastEvaluatedKey"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExecuteStatementOutput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExecuteStatementOutput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExecuteStatementOutput is not found in the empty JSON string", ExecuteStatementOutput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExecuteStatementOutput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExecuteStatementOutput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("Items") != null && !jsonObj.get("Items").isJsonNull() && !jsonObj.get("Items").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Items` to be an array in the JSON string but got `%s`", jsonObj.get("Items").toString()));
      }
      if ((jsonObj.get("NextToken") != null && !jsonObj.get("NextToken").isJsonNull()) && !jsonObj.get("NextToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NextToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NextToken").toString()));
      }
      // validate the optional field `ConsumedCapacity`
      if (jsonObj.get("ConsumedCapacity") != null && !jsonObj.get("ConsumedCapacity").isJsonNull()) {
        ConsumedCapacity.validateJsonElement(jsonObj.get("ConsumedCapacity"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExecuteStatementOutput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExecuteStatementOutput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExecuteStatementOutput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExecuteStatementOutput.class));

       return (TypeAdapter<T>) new TypeAdapter<ExecuteStatementOutput>() {
           @Override
           public void write(JsonWriter out, ExecuteStatementOutput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExecuteStatementOutput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExecuteStatementOutput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExecuteStatementOutput
   * @throws IOException if the JSON string is invalid with respect to ExecuteStatementOutput
   */
  public static ExecuteStatementOutput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExecuteStatementOutput.class);
  }

  /**
   * Convert an instance of ExecuteStatementOutput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

