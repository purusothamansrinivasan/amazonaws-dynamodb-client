/*
 * Amazon DynamoDB
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database, so that you don't have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.</p> <p>With DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic. You can scale up or scale down your tables' throughput capacity without downtime or performance degradation, and use the Amazon Web Services Management Console to monitor resource utilization and performance metrics.</p> <p>DynamoDB automatically spreads the data and traffic for your tables over a sufficient number of servers to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and automatically replicated across multiple Availability Zones in an Amazon Web Services Region, providing built-in high availability and data durability.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.AttributeValue;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;Represents a set of primary keys and, for each key, the attributes to retrieve from the table.&lt;/p&gt; &lt;p&gt;For each primary key, you must provide &lt;i&gt;all&lt;/i&gt; of the key attributes. For example, with a simple primary key, you only need to provide the partition key. For a composite primary key, you must provide &lt;i&gt;both&lt;/i&gt; the partition key and the sort key.&lt;/p&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T14:20:21.724079+05:30[Asia/Kolkata]", comments = "Generator version: 7.15.0")
public class KeysAndAttributes {
  public static final String SERIALIZED_NAME_KEYS = "Keys";
  @SerializedName(SERIALIZED_NAME_KEYS)
  @javax.annotation.Nonnull
  private List<Map<String, AttributeValue>> keys;

  public static final String SERIALIZED_NAME_ATTRIBUTES_TO_GET = "AttributesToGet";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES_TO_GET)
  @javax.annotation.Nullable
  private List<String> attributesToGet;

  public static final String SERIALIZED_NAME_CONSISTENT_READ = "ConsistentRead";
  @SerializedName(SERIALIZED_NAME_CONSISTENT_READ)
  @javax.annotation.Nullable
  private Boolean consistentRead;

  public static final String SERIALIZED_NAME_PROJECTION_EXPRESSION = "ProjectionExpression";
  @SerializedName(SERIALIZED_NAME_PROJECTION_EXPRESSION)
  @javax.annotation.Nullable
  private String projectionExpression;

  public static final String SERIALIZED_NAME_EXPRESSION_ATTRIBUTE_NAMES = "ExpressionAttributeNames";
  @SerializedName(SERIALIZED_NAME_EXPRESSION_ATTRIBUTE_NAMES)
  @javax.annotation.Nullable
  private Map<String, String> expressionAttributeNames;

  public KeysAndAttributes() {
  }

  public KeysAndAttributes keys(@javax.annotation.Nonnull List<Map<String, AttributeValue>> keys) {
    this.keys = keys;
    return this;
  }

  public KeysAndAttributes addKeysItem(Map<String, AttributeValue> keysItem) {
    if (this.keys == null) {
      this.keys = new ArrayList<>();
    }
    this.keys.add(keysItem);
    return this;
  }

  /**
   * The primary key attribute values that define the items and the attributes associated with the items.
   * @return keys
   */
  @javax.annotation.Nonnull
  public List<Map<String, AttributeValue>> getKeys() {
    return keys;
  }

  public void setKeys(@javax.annotation.Nonnull List<Map<String, AttributeValue>> keys) {
    this.keys = keys;
  }


  public KeysAndAttributes attributesToGet(@javax.annotation.Nullable List<String> attributesToGet) {
    this.attributesToGet = attributesToGet;
    return this;
  }

  public KeysAndAttributes addAttributesToGetItem(String attributesToGetItem) {
    if (this.attributesToGet == null) {
      this.attributesToGet = new ArrayList<>();
    }
    this.attributesToGet.add(attributesToGetItem);
    return this;
  }

  /**
   * This is a legacy parameter. Use &lt;code&gt;ProjectionExpression&lt;/code&gt; instead. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.html\&quot;&gt;Legacy Conditional Parameters&lt;/a&gt; in the &lt;i&gt;Amazon DynamoDB Developer Guide&lt;/i&gt;.
   * @return attributesToGet
   */
  @javax.annotation.Nullable
  public List<String> getAttributesToGet() {
    return attributesToGet;
  }

  public void setAttributesToGet(@javax.annotation.Nullable List<String> attributesToGet) {
    this.attributesToGet = attributesToGet;
  }


  public KeysAndAttributes consistentRead(@javax.annotation.Nullable Boolean consistentRead) {
    this.consistentRead = consistentRead;
    return this;
  }

  /**
   * The consistency of a read operation. If set to &lt;code&gt;true&lt;/code&gt;, then a strongly consistent read is used; otherwise, an eventually consistent read is used.
   * @return consistentRead
   */
  @javax.annotation.Nullable
  public Boolean getConsistentRead() {
    return consistentRead;
  }

  public void setConsistentRead(@javax.annotation.Nullable Boolean consistentRead) {
    this.consistentRead = consistentRead;
  }


  public KeysAndAttributes projectionExpression(@javax.annotation.Nullable String projectionExpression) {
    this.projectionExpression = projectionExpression;
    return this;
  }

  /**
   * &lt;p&gt;A string that identifies one or more attributes to retrieve from the table. These attributes can include scalars, sets, or elements of a JSON document. The attributes in the &lt;code&gt;ProjectionExpression&lt;/code&gt; must be separated by commas.&lt;/p&gt; &lt;p&gt;If no attribute names are specified, then all attributes will be returned. If any of the requested attributes are not found, they will not appear in the result.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html\&quot;&gt;Accessing Item Attributes&lt;/a&gt; in the &lt;i&gt;Amazon DynamoDB Developer Guide&lt;/i&gt;.&lt;/p&gt;
   * @return projectionExpression
   */
  @javax.annotation.Nullable
  public String getProjectionExpression() {
    return projectionExpression;
  }

  public void setProjectionExpression(@javax.annotation.Nullable String projectionExpression) {
    this.projectionExpression = projectionExpression;
  }


  public KeysAndAttributes expressionAttributeNames(@javax.annotation.Nullable Map<String, String> expressionAttributeNames) {
    this.expressionAttributeNames = expressionAttributeNames;
    return this;
  }

  public KeysAndAttributes putExpressionAttributeNamesItem(String key, String expressionAttributeNamesItem) {
    if (this.expressionAttributeNames == null) {
      this.expressionAttributeNames = new HashMap<>();
    }
    this.expressionAttributeNames.put(key, expressionAttributeNamesItem);
    return this;
  }

  /**
   * &lt;p&gt;One or more substitution tokens for attribute names in an expression. The following are some use cases for using &lt;code&gt;ExpressionAttributeNames&lt;/code&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;To access an attribute whose name conflicts with a DynamoDB reserved word.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;To create a placeholder for repeating occurrences of an attribute name in an expression.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;To prevent special characters in an attribute name from being misinterpreted in an expression.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Use the &lt;b&gt;#&lt;/b&gt; character in an expression to dereference an attribute name. For example, consider the following attribute name:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Percentile&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html\&quot;&gt;Reserved Words&lt;/a&gt; in the &lt;i&gt;Amazon DynamoDB Developer Guide&lt;/i&gt;). To work around this, you could specify the following for &lt;code&gt;ExpressionAttributeNames&lt;/code&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;{\&quot;#P\&quot;:\&quot;Percentile\&quot;}&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;You could then use this substitution in an expression, as in this example:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;#P &#x3D; :val&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;Tokens that begin with the &lt;b&gt;:&lt;/b&gt; character are &lt;i&gt;expression attribute values&lt;/i&gt;, which are placeholders for the actual value at runtime.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;For more information on expression attribute names, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html\&quot;&gt;Accessing Item Attributes&lt;/a&gt; in the &lt;i&gt;Amazon DynamoDB Developer Guide&lt;/i&gt;.&lt;/p&gt;
   * @return expressionAttributeNames
   */
  @javax.annotation.Nullable
  public Map<String, String> getExpressionAttributeNames() {
    return expressionAttributeNames;
  }

  public void setExpressionAttributeNames(@javax.annotation.Nullable Map<String, String> expressionAttributeNames) {
    this.expressionAttributeNames = expressionAttributeNames;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    KeysAndAttributes keysAndAttributes = (KeysAndAttributes) o;
    return Objects.equals(this.keys, keysAndAttributes.keys) &&
        Objects.equals(this.attributesToGet, keysAndAttributes.attributesToGet) &&
        Objects.equals(this.consistentRead, keysAndAttributes.consistentRead) &&
        Objects.equals(this.projectionExpression, keysAndAttributes.projectionExpression) &&
        Objects.equals(this.expressionAttributeNames, keysAndAttributes.expressionAttributeNames);
  }

  @Override
  public int hashCode() {
    return Objects.hash(keys, attributesToGet, consistentRead, projectionExpression, expressionAttributeNames);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class KeysAndAttributes {\n");
    sb.append("    keys: ").append(toIndentedString(keys)).append("\n");
    sb.append("    attributesToGet: ").append(toIndentedString(attributesToGet)).append("\n");
    sb.append("    consistentRead: ").append(toIndentedString(consistentRead)).append("\n");
    sb.append("    projectionExpression: ").append(toIndentedString(projectionExpression)).append("\n");
    sb.append("    expressionAttributeNames: ").append(toIndentedString(expressionAttributeNames)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("Keys", "AttributesToGet", "ConsistentRead", "ProjectionExpression", "ExpressionAttributeNames"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("Keys"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to KeysAndAttributes
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!KeysAndAttributes.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in KeysAndAttributes is not found in the empty JSON string", KeysAndAttributes.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!KeysAndAttributes.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `KeysAndAttributes` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : KeysAndAttributes.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("Keys") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("Keys").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Keys` to be an array in the JSON string but got `%s`", jsonObj.get("Keys").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("AttributesToGet") != null && !jsonObj.get("AttributesToGet").isJsonNull() && !jsonObj.get("AttributesToGet").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `AttributesToGet` to be an array in the JSON string but got `%s`", jsonObj.get("AttributesToGet").toString()));
      }
      if ((jsonObj.get("ProjectionExpression") != null && !jsonObj.get("ProjectionExpression").isJsonNull()) && !jsonObj.get("ProjectionExpression").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ProjectionExpression` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ProjectionExpression").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!KeysAndAttributes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'KeysAndAttributes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<KeysAndAttributes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(KeysAndAttributes.class));

       return (TypeAdapter<T>) new TypeAdapter<KeysAndAttributes>() {
           @Override
           public void write(JsonWriter out, KeysAndAttributes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public KeysAndAttributes read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of KeysAndAttributes given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of KeysAndAttributes
   * @throws IOException if the JSON string is invalid with respect to KeysAndAttributes
   */
  public static KeysAndAttributes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, KeysAndAttributes.class);
  }

  /**
   * Convert an instance of KeysAndAttributes to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

