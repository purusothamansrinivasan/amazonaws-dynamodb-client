/*
 * Amazon DynamoDB
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database, so that you don't have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.</p> <p>With DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic. You can scale up or scale down your tables' throughput capacity without downtime or performance degradation, and use the Amazon Web Services Management Console to monitor resource utilization and performance metrics.</p> <p>DynamoDB automatically spreads the data and traffic for your tables over a sufficient number of servers to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and automatically replicated across multiple Availability Zones in an Amazon Web Services Region, providing built-in high availability and data durability.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.AttributeValue;
import org.openapitools.client.model.Condition;
import org.openapitools.client.model.ConditionalOperator;
import org.openapitools.client.model.ReturnConsumedCapacity;
import org.openapitools.client.model.Select;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents the input of a &lt;code&gt;Query&lt;/code&gt; operation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T14:20:21.724079+05:30[Asia/Kolkata]", comments = "Generator version: 7.15.0")
public class QueryInput {
  public static final String SERIALIZED_NAME_TABLE_NAME = "TableName";
  @SerializedName(SERIALIZED_NAME_TABLE_NAME)
  @javax.annotation.Nonnull
  private String tableName;

  public static final String SERIALIZED_NAME_INDEX_NAME = "IndexName";
  @SerializedName(SERIALIZED_NAME_INDEX_NAME)
  @javax.annotation.Nullable
  private String indexName;

  public static final String SERIALIZED_NAME_SELECT = "Select";
  @SerializedName(SERIALIZED_NAME_SELECT)
  @javax.annotation.Nullable
  private Select select;

  public static final String SERIALIZED_NAME_ATTRIBUTES_TO_GET = "AttributesToGet";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES_TO_GET)
  @javax.annotation.Nullable
  private List<String> attributesToGet;

  public static final String SERIALIZED_NAME_LIMIT = "Limit";
  @SerializedName(SERIALIZED_NAME_LIMIT)
  @javax.annotation.Nullable
  private Integer limit;

  public static final String SERIALIZED_NAME_CONSISTENT_READ = "ConsistentRead";
  @SerializedName(SERIALIZED_NAME_CONSISTENT_READ)
  @javax.annotation.Nullable
  private Boolean consistentRead;

  public static final String SERIALIZED_NAME_KEY_CONDITIONS = "KeyConditions";
  @SerializedName(SERIALIZED_NAME_KEY_CONDITIONS)
  @javax.annotation.Nullable
  private Map<String, Condition> keyConditions;

  public static final String SERIALIZED_NAME_QUERY_FILTER = "QueryFilter";
  @SerializedName(SERIALIZED_NAME_QUERY_FILTER)
  @javax.annotation.Nullable
  private Map<String, Condition> queryFilter;

  public static final String SERIALIZED_NAME_CONDITIONAL_OPERATOR = "ConditionalOperator";
  @SerializedName(SERIALIZED_NAME_CONDITIONAL_OPERATOR)
  @javax.annotation.Nullable
  private ConditionalOperator conditionalOperator;

  public static final String SERIALIZED_NAME_SCAN_INDEX_FORWARD = "ScanIndexForward";
  @SerializedName(SERIALIZED_NAME_SCAN_INDEX_FORWARD)
  @javax.annotation.Nullable
  private Boolean scanIndexForward;

  public static final String SERIALIZED_NAME_EXCLUSIVE_START_KEY = "ExclusiveStartKey";
  @SerializedName(SERIALIZED_NAME_EXCLUSIVE_START_KEY)
  @javax.annotation.Nullable
  private Map<String, AttributeValue> exclusiveStartKey;

  public static final String SERIALIZED_NAME_RETURN_CONSUMED_CAPACITY = "ReturnConsumedCapacity";
  @SerializedName(SERIALIZED_NAME_RETURN_CONSUMED_CAPACITY)
  @javax.annotation.Nullable
  private ReturnConsumedCapacity returnConsumedCapacity;

  public static final String SERIALIZED_NAME_PROJECTION_EXPRESSION = "ProjectionExpression";
  @SerializedName(SERIALIZED_NAME_PROJECTION_EXPRESSION)
  @javax.annotation.Nullable
  private String projectionExpression;

  public static final String SERIALIZED_NAME_FILTER_EXPRESSION = "FilterExpression";
  @SerializedName(SERIALIZED_NAME_FILTER_EXPRESSION)
  @javax.annotation.Nullable
  private String filterExpression;

  public static final String SERIALIZED_NAME_KEY_CONDITION_EXPRESSION = "KeyConditionExpression";
  @SerializedName(SERIALIZED_NAME_KEY_CONDITION_EXPRESSION)
  @javax.annotation.Nullable
  private String keyConditionExpression;

  public static final String SERIALIZED_NAME_EXPRESSION_ATTRIBUTE_NAMES = "ExpressionAttributeNames";
  @SerializedName(SERIALIZED_NAME_EXPRESSION_ATTRIBUTE_NAMES)
  @javax.annotation.Nullable
  private Map<String, String> expressionAttributeNames;

  public static final String SERIALIZED_NAME_EXPRESSION_ATTRIBUTE_VALUES = "ExpressionAttributeValues";
  @SerializedName(SERIALIZED_NAME_EXPRESSION_ATTRIBUTE_VALUES)
  @javax.annotation.Nullable
  private Map<String, AttributeValue> expressionAttributeValues;

  public QueryInput() {
  }

  public QueryInput tableName(@javax.annotation.Nonnull String tableName) {
    this.tableName = tableName;
    return this;
  }

  /**
   * The name of the table containing the requested items.
   * @return tableName
   */
  @javax.annotation.Nonnull
  public String getTableName() {
    return tableName;
  }

  public void setTableName(@javax.annotation.Nonnull String tableName) {
    this.tableName = tableName;
  }


  public QueryInput indexName(@javax.annotation.Nullable String indexName) {
    this.indexName = indexName;
    return this;
  }

  /**
   * The name of an index to query. This index can be any local secondary index or global secondary index on the table. Note that if you use the &lt;code&gt;IndexName&lt;/code&gt; parameter, you must also provide &lt;code&gt;TableName.&lt;/code&gt; 
   * @return indexName
   */
  @javax.annotation.Nullable
  public String getIndexName() {
    return indexName;
  }

  public void setIndexName(@javax.annotation.Nullable String indexName) {
    this.indexName = indexName;
  }


  public QueryInput select(@javax.annotation.Nullable Select select) {
    this.select = select;
    return this;
  }

  /**
   * &lt;p&gt;The attributes to be returned in the result. You can retrieve all item attributes, specific item attributes, the count of matching items, or in the case of an index, some or all of the attributes projected into the index.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ALL_ATTRIBUTES&lt;/code&gt; - Returns all of the item attributes from the specified table or index. If you query a local secondary index, then for each matching item in the index, DynamoDB fetches the entire item from the parent table. If the index is configured to project all item attributes, then all of the data can be obtained from the local secondary index, and no fetching is required.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ALL_PROJECTED_ATTRIBUTES&lt;/code&gt; - Allowed only when querying an index. Retrieves all attributes that have been projected into the index. If the index is configured to project all attributes, this return value is equivalent to specifying &lt;code&gt;ALL_ATTRIBUTES&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;COUNT&lt;/code&gt; - Returns the number of matching items, rather than the matching items themselves. Note that this uses the same quantity of read capacity units as getting the items, and is subject to the same item size calculations.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SPECIFIC_ATTRIBUTES&lt;/code&gt; - Returns only the attributes listed in &lt;code&gt;ProjectionExpression&lt;/code&gt;. This return value is equivalent to specifying &lt;code&gt;ProjectionExpression&lt;/code&gt; without specifying any value for &lt;code&gt;Select&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;If you query or scan a local secondary index and request only attributes that are projected into that index, the operation will read only the index and not the table. If any of the requested attributes are not projected into the local secondary index, DynamoDB fetches each of these attributes from the parent table. This extra fetching incurs additional throughput cost and latency.&lt;/p&gt; &lt;p&gt;If you query or scan a global secondary index, you can only request attributes that are projected into the index. Global secondary index queries cannot fetch attributes from the parent table.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If neither &lt;code&gt;Select&lt;/code&gt; nor &lt;code&gt;ProjectionExpression&lt;/code&gt; are specified, DynamoDB defaults to &lt;code&gt;ALL_ATTRIBUTES&lt;/code&gt; when accessing a table, and &lt;code&gt;ALL_PROJECTED_ATTRIBUTES&lt;/code&gt; when accessing an index. You cannot use both &lt;code&gt;Select&lt;/code&gt; and &lt;code&gt;ProjectionExpression&lt;/code&gt; together in a single request, unless the value for &lt;code&gt;Select&lt;/code&gt; is &lt;code&gt;SPECIFIC_ATTRIBUTES&lt;/code&gt;. (This usage is equivalent to specifying &lt;code&gt;ProjectionExpression&lt;/code&gt; without any value for &lt;code&gt;Select&lt;/code&gt;.)&lt;/p&gt; &lt;note&gt; &lt;p&gt;If you use the &lt;code&gt;ProjectionExpression&lt;/code&gt; parameter, then the value for &lt;code&gt;Select&lt;/code&gt; can only be &lt;code&gt;SPECIFIC_ATTRIBUTES&lt;/code&gt;. Any other value for &lt;code&gt;Select&lt;/code&gt; will return an error.&lt;/p&gt; &lt;/note&gt;
   * @return select
   */
  @javax.annotation.Nullable
  public Select getSelect() {
    return select;
  }

  public void setSelect(@javax.annotation.Nullable Select select) {
    this.select = select;
  }


  public QueryInput attributesToGet(@javax.annotation.Nullable List<String> attributesToGet) {
    this.attributesToGet = attributesToGet;
    return this;
  }

  public QueryInput addAttributesToGetItem(String attributesToGetItem) {
    if (this.attributesToGet == null) {
      this.attributesToGet = new ArrayList<>();
    }
    this.attributesToGet.add(attributesToGetItem);
    return this;
  }

  /**
   * This is a legacy parameter. Use &lt;code&gt;ProjectionExpression&lt;/code&gt; instead. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.AttributesToGet.html\&quot;&gt;AttributesToGet&lt;/a&gt; in the &lt;i&gt;Amazon DynamoDB Developer Guide&lt;/i&gt;.
   * @return attributesToGet
   */
  @javax.annotation.Nullable
  public List<String> getAttributesToGet() {
    return attributesToGet;
  }

  public void setAttributesToGet(@javax.annotation.Nullable List<String> attributesToGet) {
    this.attributesToGet = attributesToGet;
  }


  public QueryInput limit(@javax.annotation.Nullable Integer limit) {
    this.limit = limit;
    return this;
  }

  /**
   * The maximum number of items to evaluate (not necessarily the number of matching items). If DynamoDB processes the number of items up to the limit while processing the results, it stops the operation and returns the matching values up to that point, and a key in &lt;code&gt;LastEvaluatedKey&lt;/code&gt; to apply in a subsequent operation, so that you can pick up where you left off. Also, if the processed dataset size exceeds 1 MB before DynamoDB reaches this limit, it stops the operation and returns the matching values up to the limit, and a key in &lt;code&gt;LastEvaluatedKey&lt;/code&gt; to apply in a subsequent operation to continue the operation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html\&quot;&gt;Query and Scan&lt;/a&gt; in the &lt;i&gt;Amazon DynamoDB Developer Guide&lt;/i&gt;.
   * minimum: 1
   * @return limit
   */
  @javax.annotation.Nullable
  public Integer getLimit() {
    return limit;
  }

  public void setLimit(@javax.annotation.Nullable Integer limit) {
    this.limit = limit;
  }


  public QueryInput consistentRead(@javax.annotation.Nullable Boolean consistentRead) {
    this.consistentRead = consistentRead;
    return this;
  }

  /**
   * &lt;p&gt;Determines the read consistency model: If set to &lt;code&gt;true&lt;/code&gt;, then the operation uses strongly consistent reads; otherwise, the operation uses eventually consistent reads.&lt;/p&gt; &lt;p&gt;Strongly consistent reads are not supported on global secondary indexes. If you query a global secondary index with &lt;code&gt;ConsistentRead&lt;/code&gt; set to &lt;code&gt;true&lt;/code&gt;, you will receive a &lt;code&gt;ValidationException&lt;/code&gt;.&lt;/p&gt;
   * @return consistentRead
   */
  @javax.annotation.Nullable
  public Boolean getConsistentRead() {
    return consistentRead;
  }

  public void setConsistentRead(@javax.annotation.Nullable Boolean consistentRead) {
    this.consistentRead = consistentRead;
  }


  public QueryInput keyConditions(@javax.annotation.Nullable Map<String, Condition> keyConditions) {
    this.keyConditions = keyConditions;
    return this;
  }

  public QueryInput putKeyConditionsItem(String key, Condition keyConditionsItem) {
    if (this.keyConditions == null) {
      this.keyConditions = new HashMap<>();
    }
    this.keyConditions.put(key, keyConditionsItem);
    return this;
  }

  /**
   * This is a legacy parameter. Use &lt;code&gt;KeyConditionExpression&lt;/code&gt; instead. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.KeyConditions.html\&quot;&gt;KeyConditions&lt;/a&gt; in the &lt;i&gt;Amazon DynamoDB Developer Guide&lt;/i&gt;.
   * @return keyConditions
   */
  @javax.annotation.Nullable
  public Map<String, Condition> getKeyConditions() {
    return keyConditions;
  }

  public void setKeyConditions(@javax.annotation.Nullable Map<String, Condition> keyConditions) {
    this.keyConditions = keyConditions;
  }


  public QueryInput queryFilter(@javax.annotation.Nullable Map<String, Condition> queryFilter) {
    this.queryFilter = queryFilter;
    return this;
  }

  public QueryInput putQueryFilterItem(String key, Condition queryFilterItem) {
    if (this.queryFilter == null) {
      this.queryFilter = new HashMap<>();
    }
    this.queryFilter.put(key, queryFilterItem);
    return this;
  }

  /**
   * This is a legacy parameter. Use &lt;code&gt;FilterExpression&lt;/code&gt; instead. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.QueryFilter.html\&quot;&gt;QueryFilter&lt;/a&gt; in the &lt;i&gt;Amazon DynamoDB Developer Guide&lt;/i&gt;.
   * @return queryFilter
   */
  @javax.annotation.Nullable
  public Map<String, Condition> getQueryFilter() {
    return queryFilter;
  }

  public void setQueryFilter(@javax.annotation.Nullable Map<String, Condition> queryFilter) {
    this.queryFilter = queryFilter;
  }


  public QueryInput conditionalOperator(@javax.annotation.Nullable ConditionalOperator conditionalOperator) {
    this.conditionalOperator = conditionalOperator;
    return this;
  }

  /**
   * This is a legacy parameter. Use &lt;code&gt;FilterExpression&lt;/code&gt; instead. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.ConditionalOperator.html\&quot;&gt;ConditionalOperator&lt;/a&gt; in the &lt;i&gt;Amazon DynamoDB Developer Guide&lt;/i&gt;.
   * @return conditionalOperator
   */
  @javax.annotation.Nullable
  public ConditionalOperator getConditionalOperator() {
    return conditionalOperator;
  }

  public void setConditionalOperator(@javax.annotation.Nullable ConditionalOperator conditionalOperator) {
    this.conditionalOperator = conditionalOperator;
  }


  public QueryInput scanIndexForward(@javax.annotation.Nullable Boolean scanIndexForward) {
    this.scanIndexForward = scanIndexForward;
    return this;
  }

  /**
   * &lt;p&gt;Specifies the order for index traversal: If &lt;code&gt;true&lt;/code&gt; (default), the traversal is performed in ascending order; if &lt;code&gt;false&lt;/code&gt;, the traversal is performed in descending order. &lt;/p&gt; &lt;p&gt;Items with the same partition key value are stored in sorted order by sort key. If the sort key data type is Number, the results are stored in numeric order. For type String, the results are stored in order of UTF-8 bytes. For type Binary, DynamoDB treats each byte of the binary data as unsigned.&lt;/p&gt; &lt;p&gt;If &lt;code&gt;ScanIndexForward&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, DynamoDB returns the results in the order in which they are stored (by sort key value). This is the default behavior. If &lt;code&gt;ScanIndexForward&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;, DynamoDB reads the results in reverse order by sort key value, and then returns the results to the client.&lt;/p&gt;
   * @return scanIndexForward
   */
  @javax.annotation.Nullable
  public Boolean getScanIndexForward() {
    return scanIndexForward;
  }

  public void setScanIndexForward(@javax.annotation.Nullable Boolean scanIndexForward) {
    this.scanIndexForward = scanIndexForward;
  }


  public QueryInput exclusiveStartKey(@javax.annotation.Nullable Map<String, AttributeValue> exclusiveStartKey) {
    this.exclusiveStartKey = exclusiveStartKey;
    return this;
  }

  public QueryInput putExclusiveStartKeyItem(String key, AttributeValue exclusiveStartKeyItem) {
    if (this.exclusiveStartKey == null) {
      this.exclusiveStartKey = new HashMap<>();
    }
    this.exclusiveStartKey.put(key, exclusiveStartKeyItem);
    return this;
  }

  /**
   * &lt;p&gt;The primary key of the first item that this operation will evaluate. Use the value that was returned for &lt;code&gt;LastEvaluatedKey&lt;/code&gt; in the previous operation.&lt;/p&gt; &lt;p&gt;The data type for &lt;code&gt;ExclusiveStartKey&lt;/code&gt; must be String, Number, or Binary. No set data types are allowed.&lt;/p&gt;
   * @return exclusiveStartKey
   */
  @javax.annotation.Nullable
  public Map<String, AttributeValue> getExclusiveStartKey() {
    return exclusiveStartKey;
  }

  public void setExclusiveStartKey(@javax.annotation.Nullable Map<String, AttributeValue> exclusiveStartKey) {
    this.exclusiveStartKey = exclusiveStartKey;
  }


  public QueryInput returnConsumedCapacity(@javax.annotation.Nullable ReturnConsumedCapacity returnConsumedCapacity) {
    this.returnConsumedCapacity = returnConsumedCapacity;
    return this;
  }

  /**
   * Get returnConsumedCapacity
   * @return returnConsumedCapacity
   */
  @javax.annotation.Nullable
  public ReturnConsumedCapacity getReturnConsumedCapacity() {
    return returnConsumedCapacity;
  }

  public void setReturnConsumedCapacity(@javax.annotation.Nullable ReturnConsumedCapacity returnConsumedCapacity) {
    this.returnConsumedCapacity = returnConsumedCapacity;
  }


  public QueryInput projectionExpression(@javax.annotation.Nullable String projectionExpression) {
    this.projectionExpression = projectionExpression;
    return this;
  }

  /**
   * &lt;p&gt;A string that identifies one or more attributes to retrieve from the table. These attributes can include scalars, sets, or elements of a JSON document. The attributes in the expression must be separated by commas.&lt;/p&gt; &lt;p&gt;If no attribute names are specified, then all attributes will be returned. If any of the requested attributes are not found, they will not appear in the result.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html\&quot;&gt;Accessing Item Attributes&lt;/a&gt; in the &lt;i&gt;Amazon DynamoDB Developer Guide&lt;/i&gt;.&lt;/p&gt;
   * @return projectionExpression
   */
  @javax.annotation.Nullable
  public String getProjectionExpression() {
    return projectionExpression;
  }

  public void setProjectionExpression(@javax.annotation.Nullable String projectionExpression) {
    this.projectionExpression = projectionExpression;
  }


  public QueryInput filterExpression(@javax.annotation.Nullable String filterExpression) {
    this.filterExpression = filterExpression;
    return this;
  }

  /**
   * &lt;p&gt;A string that contains conditions that DynamoDB applies after the &lt;code&gt;Query&lt;/code&gt; operation, but before the data is returned to you. Items that do not satisfy the &lt;code&gt;FilterExpression&lt;/code&gt; criteria are not returned.&lt;/p&gt; &lt;p&gt;A &lt;code&gt;FilterExpression&lt;/code&gt; does not allow key attributes. You cannot define a filter expression based on a partition key or a sort key.&lt;/p&gt; &lt;note&gt; &lt;p&gt;A &lt;code&gt;FilterExpression&lt;/code&gt; is applied after the items have already been read; the process of filtering does not consume any additional read capacity units.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html#Query.FilterExpression\&quot;&gt;Filter Expressions&lt;/a&gt; in the &lt;i&gt;Amazon DynamoDB Developer Guide&lt;/i&gt;.&lt;/p&gt;
   * @return filterExpression
   */
  @javax.annotation.Nullable
  public String getFilterExpression() {
    return filterExpression;
  }

  public void setFilterExpression(@javax.annotation.Nullable String filterExpression) {
    this.filterExpression = filterExpression;
  }


  public QueryInput keyConditionExpression(@javax.annotation.Nullable String keyConditionExpression) {
    this.keyConditionExpression = keyConditionExpression;
    return this;
  }

  /**
   * &lt;p&gt;The condition that specifies the key values for items to be retrieved by the &lt;code&gt;Query&lt;/code&gt; action.&lt;/p&gt; &lt;p&gt;The condition must perform an equality test on a single partition key value.&lt;/p&gt; &lt;p&gt;The condition can optionally perform one of several comparison tests on a single sort key value. This allows &lt;code&gt;Query&lt;/code&gt; to retrieve one item with a given partition key value and sort key value, or several items that have the same partition key value but different sort key values.&lt;/p&gt; &lt;p&gt;The partition key equality test is required, and must be specified in the following format:&lt;/p&gt; &lt;p&gt; &lt;code&gt;partitionKeyName&lt;/code&gt; &lt;i&gt;&#x3D;&lt;/i&gt; &lt;code&gt;:partitionkeyval&lt;/code&gt; &lt;/p&gt; &lt;p&gt;If you also want to provide a condition for the sort key, it must be combined using &lt;code&gt;AND&lt;/code&gt; with the condition for the sort key. Following is an example, using the &lt;b&gt;&#x3D;&lt;/b&gt; comparison operator for the sort key:&lt;/p&gt; &lt;p&gt; &lt;code&gt;partitionKeyName&lt;/code&gt; &lt;code&gt;&#x3D;&lt;/code&gt; &lt;code&gt;:partitionkeyval&lt;/code&gt; &lt;code&gt;AND&lt;/code&gt; &lt;code&gt;sortKeyName&lt;/code&gt; &lt;code&gt;&#x3D;&lt;/code&gt; &lt;code&gt;:sortkeyval&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Valid comparisons for the sort key condition are as follows:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;sortKeyName&lt;/code&gt; &lt;code&gt;&#x3D;&lt;/code&gt; &lt;code&gt;:sortkeyval&lt;/code&gt; - true if the sort key value is equal to &lt;code&gt;:sortkeyval&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;sortKeyName&lt;/code&gt; &lt;code&gt;&amp;lt;&lt;/code&gt; &lt;code&gt;:sortkeyval&lt;/code&gt; - true if the sort key value is less than &lt;code&gt;:sortkeyval&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;sortKeyName&lt;/code&gt; &lt;code&gt;&amp;lt;&#x3D;&lt;/code&gt; &lt;code&gt;:sortkeyval&lt;/code&gt; - true if the sort key value is less than or equal to &lt;code&gt;:sortkeyval&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;sortKeyName&lt;/code&gt; &lt;code&gt;&amp;gt;&lt;/code&gt; &lt;code&gt;:sortkeyval&lt;/code&gt; - true if the sort key value is greater than &lt;code&gt;:sortkeyval&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;sortKeyName&lt;/code&gt; &lt;code&gt;&amp;gt;&#x3D; &lt;/code&gt; &lt;code&gt;:sortkeyval&lt;/code&gt; - true if the sort key value is greater than or equal to &lt;code&gt;:sortkeyval&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;sortKeyName&lt;/code&gt; &lt;code&gt;BETWEEN&lt;/code&gt; &lt;code&gt;:sortkeyval1&lt;/code&gt; &lt;code&gt;AND&lt;/code&gt; &lt;code&gt;:sortkeyval2&lt;/code&gt; - true if the sort key value is greater than or equal to &lt;code&gt;:sortkeyval1&lt;/code&gt;, and less than or equal to &lt;code&gt;:sortkeyval2&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;begins_with (&lt;/code&gt; &lt;code&gt;sortKeyName&lt;/code&gt;, &lt;code&gt;:sortkeyval&lt;/code&gt; &lt;code&gt;)&lt;/code&gt; - true if the sort key value begins with a particular operand. (You cannot use this function with a sort key that is of type Number.) Note that the function name &lt;code&gt;begins_with&lt;/code&gt; is case-sensitive.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Use the &lt;code&gt;ExpressionAttributeValues&lt;/code&gt; parameter to replace tokens such as &lt;code&gt;:partitionval&lt;/code&gt; and &lt;code&gt;:sortval&lt;/code&gt; with actual values at runtime.&lt;/p&gt; &lt;p&gt;You can optionally use the &lt;code&gt;ExpressionAttributeNames&lt;/code&gt; parameter to replace the names of the partition key and sort key with placeholder tokens. This option might be necessary if an attribute name conflicts with a DynamoDB reserved word. For example, the following &lt;code&gt;KeyConditionExpression&lt;/code&gt; parameter causes an error because &lt;i&gt;Size&lt;/i&gt; is a reserved word:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Size &#x3D; :myval&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;To work around this, define a placeholder (such a &lt;code&gt;#S&lt;/code&gt;) to represent the attribute name &lt;i&gt;Size&lt;/i&gt;. &lt;code&gt;KeyConditionExpression&lt;/code&gt; then is as follows:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;#S &#x3D; :myval&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For a list of reserved words, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html\&quot;&gt;Reserved Words&lt;/a&gt; in the &lt;i&gt;Amazon DynamoDB Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For more information on &lt;code&gt;ExpressionAttributeNames&lt;/code&gt; and &lt;code&gt;ExpressionAttributeValues&lt;/code&gt;, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ExpressionPlaceholders.html\&quot;&gt;Using Placeholders for Attribute Names and Values&lt;/a&gt; in the &lt;i&gt;Amazon DynamoDB Developer Guide&lt;/i&gt;.&lt;/p&gt;
   * @return keyConditionExpression
   */
  @javax.annotation.Nullable
  public String getKeyConditionExpression() {
    return keyConditionExpression;
  }

  public void setKeyConditionExpression(@javax.annotation.Nullable String keyConditionExpression) {
    this.keyConditionExpression = keyConditionExpression;
  }


  public QueryInput expressionAttributeNames(@javax.annotation.Nullable Map<String, String> expressionAttributeNames) {
    this.expressionAttributeNames = expressionAttributeNames;
    return this;
  }

  public QueryInput putExpressionAttributeNamesItem(String key, String expressionAttributeNamesItem) {
    if (this.expressionAttributeNames == null) {
      this.expressionAttributeNames = new HashMap<>();
    }
    this.expressionAttributeNames.put(key, expressionAttributeNamesItem);
    return this;
  }

  /**
   * &lt;p&gt;One or more substitution tokens for attribute names in an expression. The following are some use cases for using &lt;code&gt;ExpressionAttributeNames&lt;/code&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;To access an attribute whose name conflicts with a DynamoDB reserved word.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;To create a placeholder for repeating occurrences of an attribute name in an expression.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;To prevent special characters in an attribute name from being misinterpreted in an expression.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Use the &lt;b&gt;#&lt;/b&gt; character in an expression to dereference an attribute name. For example, consider the following attribute name:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Percentile&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html\&quot;&gt;Reserved Words&lt;/a&gt; in the &lt;i&gt;Amazon DynamoDB Developer Guide&lt;/i&gt;). To work around this, you could specify the following for &lt;code&gt;ExpressionAttributeNames&lt;/code&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;{\&quot;#P\&quot;:\&quot;Percentile\&quot;}&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;You could then use this substitution in an expression, as in this example:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;#P &#x3D; :val&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;Tokens that begin with the &lt;b&gt;:&lt;/b&gt; character are &lt;i&gt;expression attribute values&lt;/i&gt;, which are placeholders for the actual value at runtime.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;For more information on expression attribute names, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html\&quot;&gt;Specifying Item Attributes&lt;/a&gt; in the &lt;i&gt;Amazon DynamoDB Developer Guide&lt;/i&gt;.&lt;/p&gt;
   * @return expressionAttributeNames
   */
  @javax.annotation.Nullable
  public Map<String, String> getExpressionAttributeNames() {
    return expressionAttributeNames;
  }

  public void setExpressionAttributeNames(@javax.annotation.Nullable Map<String, String> expressionAttributeNames) {
    this.expressionAttributeNames = expressionAttributeNames;
  }


  public QueryInput expressionAttributeValues(@javax.annotation.Nullable Map<String, AttributeValue> expressionAttributeValues) {
    this.expressionAttributeValues = expressionAttributeValues;
    return this;
  }

  public QueryInput putExpressionAttributeValuesItem(String key, AttributeValue expressionAttributeValuesItem) {
    if (this.expressionAttributeValues == null) {
      this.expressionAttributeValues = new HashMap<>();
    }
    this.expressionAttributeValues.put(key, expressionAttributeValuesItem);
    return this;
  }

  /**
   * &lt;p&gt;One or more values that can be substituted in an expression.&lt;/p&gt; &lt;p&gt;Use the &lt;b&gt;:&lt;/b&gt; (colon) character in an expression to dereference an attribute value. For example, suppose that you wanted to check whether the value of the &lt;i&gt;ProductStatus&lt;/i&gt; attribute was one of the following: &lt;/p&gt; &lt;p&gt; &lt;code&gt;Available | Backordered | Discontinued&lt;/code&gt; &lt;/p&gt; &lt;p&gt;You would first need to specify &lt;code&gt;ExpressionAttributeValues&lt;/code&gt; as follows:&lt;/p&gt; &lt;p&gt; &lt;code&gt;{ \&quot;:avail\&quot;:{\&quot;S\&quot;:\&quot;Available\&quot;}, \&quot;:back\&quot;:{\&quot;S\&quot;:\&quot;Backordered\&quot;}, \&quot;:disc\&quot;:{\&quot;S\&quot;:\&quot;Discontinued\&quot;} }&lt;/code&gt; &lt;/p&gt; &lt;p&gt;You could then use these values in an expression, such as this:&lt;/p&gt; &lt;p&gt; &lt;code&gt;ProductStatus IN (:avail, :back, :disc)&lt;/code&gt; &lt;/p&gt; &lt;p&gt;For more information on expression attribute values, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html\&quot;&gt;Specifying Conditions&lt;/a&gt; in the &lt;i&gt;Amazon DynamoDB Developer Guide&lt;/i&gt;.&lt;/p&gt;
   * @return expressionAttributeValues
   */
  @javax.annotation.Nullable
  public Map<String, AttributeValue> getExpressionAttributeValues() {
    return expressionAttributeValues;
  }

  public void setExpressionAttributeValues(@javax.annotation.Nullable Map<String, AttributeValue> expressionAttributeValues) {
    this.expressionAttributeValues = expressionAttributeValues;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QueryInput queryInput = (QueryInput) o;
    return Objects.equals(this.tableName, queryInput.tableName) &&
        Objects.equals(this.indexName, queryInput.indexName) &&
        Objects.equals(this.select, queryInput.select) &&
        Objects.equals(this.attributesToGet, queryInput.attributesToGet) &&
        Objects.equals(this.limit, queryInput.limit) &&
        Objects.equals(this.consistentRead, queryInput.consistentRead) &&
        Objects.equals(this.keyConditions, queryInput.keyConditions) &&
        Objects.equals(this.queryFilter, queryInput.queryFilter) &&
        Objects.equals(this.conditionalOperator, queryInput.conditionalOperator) &&
        Objects.equals(this.scanIndexForward, queryInput.scanIndexForward) &&
        Objects.equals(this.exclusiveStartKey, queryInput.exclusiveStartKey) &&
        Objects.equals(this.returnConsumedCapacity, queryInput.returnConsumedCapacity) &&
        Objects.equals(this.projectionExpression, queryInput.projectionExpression) &&
        Objects.equals(this.filterExpression, queryInput.filterExpression) &&
        Objects.equals(this.keyConditionExpression, queryInput.keyConditionExpression) &&
        Objects.equals(this.expressionAttributeNames, queryInput.expressionAttributeNames) &&
        Objects.equals(this.expressionAttributeValues, queryInput.expressionAttributeValues);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tableName, indexName, select, attributesToGet, limit, consistentRead, keyConditions, queryFilter, conditionalOperator, scanIndexForward, exclusiveStartKey, returnConsumedCapacity, projectionExpression, filterExpression, keyConditionExpression, expressionAttributeNames, expressionAttributeValues);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QueryInput {\n");
    sb.append("    tableName: ").append(toIndentedString(tableName)).append("\n");
    sb.append("    indexName: ").append(toIndentedString(indexName)).append("\n");
    sb.append("    select: ").append(toIndentedString(select)).append("\n");
    sb.append("    attributesToGet: ").append(toIndentedString(attributesToGet)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    consistentRead: ").append(toIndentedString(consistentRead)).append("\n");
    sb.append("    keyConditions: ").append(toIndentedString(keyConditions)).append("\n");
    sb.append("    queryFilter: ").append(toIndentedString(queryFilter)).append("\n");
    sb.append("    conditionalOperator: ").append(toIndentedString(conditionalOperator)).append("\n");
    sb.append("    scanIndexForward: ").append(toIndentedString(scanIndexForward)).append("\n");
    sb.append("    exclusiveStartKey: ").append(toIndentedString(exclusiveStartKey)).append("\n");
    sb.append("    returnConsumedCapacity: ").append(toIndentedString(returnConsumedCapacity)).append("\n");
    sb.append("    projectionExpression: ").append(toIndentedString(projectionExpression)).append("\n");
    sb.append("    filterExpression: ").append(toIndentedString(filterExpression)).append("\n");
    sb.append("    keyConditionExpression: ").append(toIndentedString(keyConditionExpression)).append("\n");
    sb.append("    expressionAttributeNames: ").append(toIndentedString(expressionAttributeNames)).append("\n");
    sb.append("    expressionAttributeValues: ").append(toIndentedString(expressionAttributeValues)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("TableName", "IndexName", "Select", "AttributesToGet", "Limit", "ConsistentRead", "KeyConditions", "QueryFilter", "ConditionalOperator", "ScanIndexForward", "ExclusiveStartKey", "ReturnConsumedCapacity", "ProjectionExpression", "FilterExpression", "KeyConditionExpression", "ExpressionAttributeNames", "ExpressionAttributeValues"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("TableName"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to QueryInput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!QueryInput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in QueryInput is not found in the empty JSON string", QueryInput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!QueryInput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `QueryInput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : QueryInput.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("TableName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TableName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TableName").toString()));
      }
      if ((jsonObj.get("IndexName") != null && !jsonObj.get("IndexName").isJsonNull()) && !jsonObj.get("IndexName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `IndexName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("IndexName").toString()));
      }
      // validate the optional field `Select`
      if (jsonObj.get("Select") != null && !jsonObj.get("Select").isJsonNull()) {
        Select.validateJsonElement(jsonObj.get("Select"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("AttributesToGet") != null && !jsonObj.get("AttributesToGet").isJsonNull() && !jsonObj.get("AttributesToGet").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `AttributesToGet` to be an array in the JSON string but got `%s`", jsonObj.get("AttributesToGet").toString()));
      }
      // validate the optional field `ConditionalOperator`
      if (jsonObj.get("ConditionalOperator") != null && !jsonObj.get("ConditionalOperator").isJsonNull()) {
        ConditionalOperator.validateJsonElement(jsonObj.get("ConditionalOperator"));
      }
      // validate the optional field `ReturnConsumedCapacity`
      if (jsonObj.get("ReturnConsumedCapacity") != null && !jsonObj.get("ReturnConsumedCapacity").isJsonNull()) {
        ReturnConsumedCapacity.validateJsonElement(jsonObj.get("ReturnConsumedCapacity"));
      }
      if ((jsonObj.get("ProjectionExpression") != null && !jsonObj.get("ProjectionExpression").isJsonNull()) && !jsonObj.get("ProjectionExpression").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ProjectionExpression` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ProjectionExpression").toString()));
      }
      if ((jsonObj.get("FilterExpression") != null && !jsonObj.get("FilterExpression").isJsonNull()) && !jsonObj.get("FilterExpression").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FilterExpression` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FilterExpression").toString()));
      }
      if ((jsonObj.get("KeyConditionExpression") != null && !jsonObj.get("KeyConditionExpression").isJsonNull()) && !jsonObj.get("KeyConditionExpression").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `KeyConditionExpression` to be a primitive type in the JSON string but got `%s`", jsonObj.get("KeyConditionExpression").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!QueryInput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'QueryInput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<QueryInput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(QueryInput.class));

       return (TypeAdapter<T>) new TypeAdapter<QueryInput>() {
           @Override
           public void write(JsonWriter out, QueryInput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public QueryInput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of QueryInput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of QueryInput
   * @throws IOException if the JSON string is invalid with respect to QueryInput
   */
  public static QueryInput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, QueryInput.class);
  }

  /**
   * Convert an instance of QueryInput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

