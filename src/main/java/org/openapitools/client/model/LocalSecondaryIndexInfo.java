/*
 * Amazon DynamoDB
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database, so that you don't have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.</p> <p>With DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic. You can scale up or scale down your tables' throughput capacity without downtime or performance degradation, and use the Amazon Web Services Management Console to monitor resource utilization and performance metrics.</p> <p>DynamoDB automatically spreads the data and traffic for your tables over a sufficient number of servers to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and automatically replicated across multiple Availability Zones in an Amazon Web Services Region, providing built-in high availability and data durability.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.KeySchemaElement;
import org.openapitools.client.model.Projection;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents the properties of a local secondary index for the table when the backup was created.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T14:20:21.724079+05:30[Asia/Kolkata]", comments = "Generator version: 7.15.0")
public class LocalSecondaryIndexInfo {
  public static final String SERIALIZED_NAME_INDEX_NAME = "IndexName";
  @SerializedName(SERIALIZED_NAME_INDEX_NAME)
  @javax.annotation.Nullable
  private String indexName;

  public static final String SERIALIZED_NAME_KEY_SCHEMA = "KeySchema";
  @SerializedName(SERIALIZED_NAME_KEY_SCHEMA)
  @javax.annotation.Nullable
  private List<KeySchemaElement> keySchema;

  public static final String SERIALIZED_NAME_PROJECTION = "Projection";
  @SerializedName(SERIALIZED_NAME_PROJECTION)
  @javax.annotation.Nullable
  private Projection projection;

  public LocalSecondaryIndexInfo() {
  }

  public LocalSecondaryIndexInfo indexName(@javax.annotation.Nullable String indexName) {
    this.indexName = indexName;
    return this;
  }

  /**
   * Represents the name of the local secondary index.
   * @return indexName
   */
  @javax.annotation.Nullable
  public String getIndexName() {
    return indexName;
  }

  public void setIndexName(@javax.annotation.Nullable String indexName) {
    this.indexName = indexName;
  }


  public LocalSecondaryIndexInfo keySchema(@javax.annotation.Nullable List<KeySchemaElement> keySchema) {
    this.keySchema = keySchema;
    return this;
  }

  public LocalSecondaryIndexInfo addKeySchemaItem(KeySchemaElement keySchemaItem) {
    if (this.keySchema == null) {
      this.keySchema = new ArrayList<>();
    }
    this.keySchema.add(keySchemaItem);
    return this;
  }

  /**
   * &lt;p&gt;The complete key schema for a local secondary index, which consists of one or more pairs of attribute names and key types:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;HASH&lt;/code&gt; - partition key&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;RANGE&lt;/code&gt; - sort key&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;The partition key of an item is also known as its &lt;i&gt;hash attribute&lt;/i&gt;. The term \&quot;hash attribute\&quot; derives from DynamoDB&#39;s usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.&lt;/p&gt; &lt;p&gt;The sort key of an item is also known as its &lt;i&gt;range attribute&lt;/i&gt;. The term \&quot;range attribute\&quot; derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.&lt;/p&gt; &lt;/note&gt;
   * @return keySchema
   */
  @javax.annotation.Nullable
  public List<KeySchemaElement> getKeySchema() {
    return keySchema;
  }

  public void setKeySchema(@javax.annotation.Nullable List<KeySchemaElement> keySchema) {
    this.keySchema = keySchema;
  }


  public LocalSecondaryIndexInfo projection(@javax.annotation.Nullable Projection projection) {
    this.projection = projection;
    return this;
  }

  /**
   * Represents attributes that are copied (projected) from the table into the global secondary index. These are in addition to the primary key attributes and index key attributes, which are automatically projected. 
   * @return projection
   */
  @javax.annotation.Nullable
  public Projection getProjection() {
    return projection;
  }

  public void setProjection(@javax.annotation.Nullable Projection projection) {
    this.projection = projection;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LocalSecondaryIndexInfo localSecondaryIndexInfo = (LocalSecondaryIndexInfo) o;
    return Objects.equals(this.indexName, localSecondaryIndexInfo.indexName) &&
        Objects.equals(this.keySchema, localSecondaryIndexInfo.keySchema) &&
        Objects.equals(this.projection, localSecondaryIndexInfo.projection);
  }

  @Override
  public int hashCode() {
    return Objects.hash(indexName, keySchema, projection);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LocalSecondaryIndexInfo {\n");
    sb.append("    indexName: ").append(toIndentedString(indexName)).append("\n");
    sb.append("    keySchema: ").append(toIndentedString(keySchema)).append("\n");
    sb.append("    projection: ").append(toIndentedString(projection)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("IndexName", "KeySchema", "Projection"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LocalSecondaryIndexInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LocalSecondaryIndexInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LocalSecondaryIndexInfo is not found in the empty JSON string", LocalSecondaryIndexInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LocalSecondaryIndexInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LocalSecondaryIndexInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("IndexName") != null && !jsonObj.get("IndexName").isJsonNull()) && !jsonObj.get("IndexName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `IndexName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("IndexName").toString()));
      }
      if (jsonObj.get("KeySchema") != null && !jsonObj.get("KeySchema").isJsonNull()) {
        JsonArray jsonArraykeySchema = jsonObj.getAsJsonArray("KeySchema");
        if (jsonArraykeySchema != null) {
          // ensure the json data is an array
          if (!jsonObj.get("KeySchema").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `KeySchema` to be an array in the JSON string but got `%s`", jsonObj.get("KeySchema").toString()));
          }

          // validate the optional field `KeySchema` (array)
          for (int i = 0; i < jsonArraykeySchema.size(); i++) {
            KeySchemaElement.validateJsonElement(jsonArraykeySchema.get(i));
          };
        }
      }
      // validate the optional field `Projection`
      if (jsonObj.get("Projection") != null && !jsonObj.get("Projection").isJsonNull()) {
        Projection.validateJsonElement(jsonObj.get("Projection"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LocalSecondaryIndexInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LocalSecondaryIndexInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LocalSecondaryIndexInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LocalSecondaryIndexInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<LocalSecondaryIndexInfo>() {
           @Override
           public void write(JsonWriter out, LocalSecondaryIndexInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LocalSecondaryIndexInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LocalSecondaryIndexInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LocalSecondaryIndexInfo
   * @throws IOException if the JSON string is invalid with respect to LocalSecondaryIndexInfo
   */
  public static LocalSecondaryIndexInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LocalSecondaryIndexInfo.class);
  }

  /**
   * Convert an instance of LocalSecondaryIndexInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

