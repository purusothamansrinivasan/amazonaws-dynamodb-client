/*
 * Amazon DynamoDB
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database, so that you don't have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.</p> <p>With DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic. You can scale up or scale down your tables' throughput capacity without downtime or performance degradation, and use the Amazon Web Services Management Console to monitor resource utilization and performance metrics.</p> <p>DynamoDB automatically spreads the data and traffic for your tables over a sufficient number of servers to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and automatically replicated across multiple Availability Zones in an Amazon Web Services Region, providing built-in high availability and data durability.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ReturnConsumedCapacity;
import org.openapitools.client.model.ReturnItemCollectionMetrics;
import org.openapitools.client.model.TransactWriteItem;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TransactWriteItemsInput
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T14:20:21.724079+05:30[Asia/Kolkata]", comments = "Generator version: 7.15.0")
public class TransactWriteItemsInput {
  public static final String SERIALIZED_NAME_TRANSACT_ITEMS = "TransactItems";
  @SerializedName(SERIALIZED_NAME_TRANSACT_ITEMS)
  @javax.annotation.Nonnull
  private List<TransactWriteItem> transactItems;

  public static final String SERIALIZED_NAME_RETURN_CONSUMED_CAPACITY = "ReturnConsumedCapacity";
  @SerializedName(SERIALIZED_NAME_RETURN_CONSUMED_CAPACITY)
  @javax.annotation.Nullable
  private ReturnConsumedCapacity returnConsumedCapacity;

  public static final String SERIALIZED_NAME_RETURN_ITEM_COLLECTION_METRICS = "ReturnItemCollectionMetrics";
  @SerializedName(SERIALIZED_NAME_RETURN_ITEM_COLLECTION_METRICS)
  @javax.annotation.Nullable
  private ReturnItemCollectionMetrics returnItemCollectionMetrics;

  public static final String SERIALIZED_NAME_CLIENT_REQUEST_TOKEN = "ClientRequestToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_REQUEST_TOKEN)
  @javax.annotation.Nullable
  private String clientRequestToken;

  public TransactWriteItemsInput() {
  }

  public TransactWriteItemsInput transactItems(@javax.annotation.Nonnull List<TransactWriteItem> transactItems) {
    this.transactItems = transactItems;
    return this;
  }

  public TransactWriteItemsInput addTransactItemsItem(TransactWriteItem transactItemsItem) {
    if (this.transactItems == null) {
      this.transactItems = new ArrayList<>();
    }
    this.transactItems.add(transactItemsItem);
    return this;
  }

  /**
   * An ordered array of up to 100 &lt;code&gt;TransactWriteItem&lt;/code&gt; objects, each of which contains a &lt;code&gt;ConditionCheck&lt;/code&gt;, &lt;code&gt;Put&lt;/code&gt;, &lt;code&gt;Update&lt;/code&gt;, or &lt;code&gt;Delete&lt;/code&gt; object. These can operate on items in different tables, but the tables must reside in the same Amazon Web Services account and Region, and no two of them can operate on the same item. 
   * @return transactItems
   */
  @javax.annotation.Nonnull
  public List<TransactWriteItem> getTransactItems() {
    return transactItems;
  }

  public void setTransactItems(@javax.annotation.Nonnull List<TransactWriteItem> transactItems) {
    this.transactItems = transactItems;
  }


  public TransactWriteItemsInput returnConsumedCapacity(@javax.annotation.Nullable ReturnConsumedCapacity returnConsumedCapacity) {
    this.returnConsumedCapacity = returnConsumedCapacity;
    return this;
  }

  /**
   * Get returnConsumedCapacity
   * @return returnConsumedCapacity
   */
  @javax.annotation.Nullable
  public ReturnConsumedCapacity getReturnConsumedCapacity() {
    return returnConsumedCapacity;
  }

  public void setReturnConsumedCapacity(@javax.annotation.Nullable ReturnConsumedCapacity returnConsumedCapacity) {
    this.returnConsumedCapacity = returnConsumedCapacity;
  }


  public TransactWriteItemsInput returnItemCollectionMetrics(@javax.annotation.Nullable ReturnItemCollectionMetrics returnItemCollectionMetrics) {
    this.returnItemCollectionMetrics = returnItemCollectionMetrics;
    return this;
  }

  /**
   * Determines whether item collection metrics are returned. If set to &lt;code&gt;SIZE&lt;/code&gt;, the response includes statistics about item collections (if any), that were modified during the operation and are returned in the response. If set to &lt;code&gt;NONE&lt;/code&gt; (the default), no statistics are returned. 
   * @return returnItemCollectionMetrics
   */
  @javax.annotation.Nullable
  public ReturnItemCollectionMetrics getReturnItemCollectionMetrics() {
    return returnItemCollectionMetrics;
  }

  public void setReturnItemCollectionMetrics(@javax.annotation.Nullable ReturnItemCollectionMetrics returnItemCollectionMetrics) {
    this.returnItemCollectionMetrics = returnItemCollectionMetrics;
  }


  public TransactWriteItemsInput clientRequestToken(@javax.annotation.Nullable String clientRequestToken) {
    this.clientRequestToken = clientRequestToken;
    return this;
  }

  /**
   * &lt;p&gt;Providing a &lt;code&gt;ClientRequestToken&lt;/code&gt; makes the call to &lt;code&gt;TransactWriteItems&lt;/code&gt; idempotent, meaning that multiple identical calls have the same effect as one single call.&lt;/p&gt; &lt;p&gt;Although multiple identical calls using the same client request token produce the same result on the server (no side effects), the responses to the calls might not be the same. If the &lt;code&gt;ReturnConsumedCapacity&lt;/code&gt; parameter is set, then the initial &lt;code&gt;TransactWriteItems&lt;/code&gt; call returns the amount of write capacity units consumed in making the changes. Subsequent &lt;code&gt;TransactWriteItems&lt;/code&gt; calls with the same client token return the number of read capacity units consumed in reading the item.&lt;/p&gt; &lt;p&gt;A client request token is valid for 10 minutes after the first request that uses it is completed. After 10 minutes, any request with the same client token is treated as a new request. Do not resubmit the same request with the same client token for more than 10 minutes, or the result might not be idempotent.&lt;/p&gt; &lt;p&gt;If you submit a request with the same client token but a change in other parameters within the 10-minute idempotency window, DynamoDB returns an &lt;code&gt;IdempotentParameterMismatch&lt;/code&gt; exception.&lt;/p&gt;
   * @return clientRequestToken
   */
  @javax.annotation.Nullable
  public String getClientRequestToken() {
    return clientRequestToken;
  }

  public void setClientRequestToken(@javax.annotation.Nullable String clientRequestToken) {
    this.clientRequestToken = clientRequestToken;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransactWriteItemsInput transactWriteItemsInput = (TransactWriteItemsInput) o;
    return Objects.equals(this.transactItems, transactWriteItemsInput.transactItems) &&
        Objects.equals(this.returnConsumedCapacity, transactWriteItemsInput.returnConsumedCapacity) &&
        Objects.equals(this.returnItemCollectionMetrics, transactWriteItemsInput.returnItemCollectionMetrics) &&
        Objects.equals(this.clientRequestToken, transactWriteItemsInput.clientRequestToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(transactItems, returnConsumedCapacity, returnItemCollectionMetrics, clientRequestToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransactWriteItemsInput {\n");
    sb.append("    transactItems: ").append(toIndentedString(transactItems)).append("\n");
    sb.append("    returnConsumedCapacity: ").append(toIndentedString(returnConsumedCapacity)).append("\n");
    sb.append("    returnItemCollectionMetrics: ").append(toIndentedString(returnItemCollectionMetrics)).append("\n");
    sb.append("    clientRequestToken: ").append(toIndentedString(clientRequestToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("TransactItems", "ReturnConsumedCapacity", "ReturnItemCollectionMetrics", "ClientRequestToken"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("TransactItems"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TransactWriteItemsInput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TransactWriteItemsInput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TransactWriteItemsInput is not found in the empty JSON string", TransactWriteItemsInput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TransactWriteItemsInput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TransactWriteItemsInput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TransactWriteItemsInput.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("TransactItems").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `TransactItems` to be an array in the JSON string but got `%s`", jsonObj.get("TransactItems").toString()));
      }

      JsonArray jsonArraytransactItems = jsonObj.getAsJsonArray("TransactItems");
      // validate the required field `TransactItems` (array)
      for (int i = 0; i < jsonArraytransactItems.size(); i++) {
        TransactWriteItem.validateJsonElement(jsonArraytransactItems.get(i));
      };
      // validate the optional field `ReturnConsumedCapacity`
      if (jsonObj.get("ReturnConsumedCapacity") != null && !jsonObj.get("ReturnConsumedCapacity").isJsonNull()) {
        ReturnConsumedCapacity.validateJsonElement(jsonObj.get("ReturnConsumedCapacity"));
      }
      // validate the optional field `ReturnItemCollectionMetrics`
      if (jsonObj.get("ReturnItemCollectionMetrics") != null && !jsonObj.get("ReturnItemCollectionMetrics").isJsonNull()) {
        ReturnItemCollectionMetrics.validateJsonElement(jsonObj.get("ReturnItemCollectionMetrics"));
      }
      if ((jsonObj.get("ClientRequestToken") != null && !jsonObj.get("ClientRequestToken").isJsonNull()) && !jsonObj.get("ClientRequestToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ClientRequestToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ClientRequestToken").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TransactWriteItemsInput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TransactWriteItemsInput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TransactWriteItemsInput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TransactWriteItemsInput.class));

       return (TypeAdapter<T>) new TypeAdapter<TransactWriteItemsInput>() {
           @Override
           public void write(JsonWriter out, TransactWriteItemsInput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TransactWriteItemsInput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TransactWriteItemsInput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TransactWriteItemsInput
   * @throws IOException if the JSON string is invalid with respect to TransactWriteItemsInput
   */
  public static TransactWriteItemsInput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TransactWriteItemsInput.class);
  }

  /**
   * Convert an instance of TransactWriteItemsInput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

