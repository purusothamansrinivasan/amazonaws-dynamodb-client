/*
 * Amazon DynamoDB
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database, so that you don't have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.</p> <p>With DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic. You can scale up or scale down your tables' throughput capacity without downtime or performance degradation, and use the Amazon Web Services Management Console to monitor resource utilization and performance metrics.</p> <p>DynamoDB automatically spreads the data and traffic for your tables over a sufficient number of servers to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and automatically replicated across multiple Availability Zones in an Amazon Web Services Region, providing built-in high availability and data durability.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.BackupStatus;
import org.openapitools.client.model.BackupType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains details for the backup.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T14:20:21.724079+05:30[Asia/Kolkata]", comments = "Generator version: 7.15.0")
public class BackupSummary {
  public static final String SERIALIZED_NAME_TABLE_NAME = "TableName";
  @SerializedName(SERIALIZED_NAME_TABLE_NAME)
  @javax.annotation.Nullable
  private String tableName;

  public static final String SERIALIZED_NAME_TABLE_ID = "TableId";
  @SerializedName(SERIALIZED_NAME_TABLE_ID)
  @javax.annotation.Nullable
  private String tableId;

  public static final String SERIALIZED_NAME_TABLE_ARN = "TableArn";
  @SerializedName(SERIALIZED_NAME_TABLE_ARN)
  @javax.annotation.Nullable
  private String tableArn;

  public static final String SERIALIZED_NAME_BACKUP_ARN = "BackupArn";
  @SerializedName(SERIALIZED_NAME_BACKUP_ARN)
  @javax.annotation.Nullable
  private String backupArn;

  public static final String SERIALIZED_NAME_BACKUP_NAME = "BackupName";
  @SerializedName(SERIALIZED_NAME_BACKUP_NAME)
  @javax.annotation.Nullable
  private String backupName;

  public static final String SERIALIZED_NAME_BACKUP_CREATION_DATE_TIME = "BackupCreationDateTime";
  @SerializedName(SERIALIZED_NAME_BACKUP_CREATION_DATE_TIME)
  @javax.annotation.Nullable
  private OffsetDateTime backupCreationDateTime;

  public static final String SERIALIZED_NAME_BACKUP_EXPIRY_DATE_TIME = "BackupExpiryDateTime";
  @SerializedName(SERIALIZED_NAME_BACKUP_EXPIRY_DATE_TIME)
  @javax.annotation.Nullable
  private OffsetDateTime backupExpiryDateTime;

  public static final String SERIALIZED_NAME_BACKUP_STATUS = "BackupStatus";
  @SerializedName(SERIALIZED_NAME_BACKUP_STATUS)
  @javax.annotation.Nullable
  private BackupStatus backupStatus;

  public static final String SERIALIZED_NAME_BACKUP_TYPE = "BackupType";
  @SerializedName(SERIALIZED_NAME_BACKUP_TYPE)
  @javax.annotation.Nullable
  private BackupType backupType;

  public static final String SERIALIZED_NAME_BACKUP_SIZE_BYTES = "BackupSizeBytes";
  @SerializedName(SERIALIZED_NAME_BACKUP_SIZE_BYTES)
  @javax.annotation.Nullable
  private Integer backupSizeBytes;

  public BackupSummary() {
  }

  public BackupSummary tableName(@javax.annotation.Nullable String tableName) {
    this.tableName = tableName;
    return this;
  }

  /**
   * Name of the table.
   * @return tableName
   */
  @javax.annotation.Nullable
  public String getTableName() {
    return tableName;
  }

  public void setTableName(@javax.annotation.Nullable String tableName) {
    this.tableName = tableName;
  }


  public BackupSummary tableId(@javax.annotation.Nullable String tableId) {
    this.tableId = tableId;
    return this;
  }

  /**
   * Unique identifier for the table.
   * @return tableId
   */
  @javax.annotation.Nullable
  public String getTableId() {
    return tableId;
  }

  public void setTableId(@javax.annotation.Nullable String tableId) {
    this.tableId = tableId;
  }


  public BackupSummary tableArn(@javax.annotation.Nullable String tableArn) {
    this.tableArn = tableArn;
    return this;
  }

  /**
   * ARN associated with the table.
   * @return tableArn
   */
  @javax.annotation.Nullable
  public String getTableArn() {
    return tableArn;
  }

  public void setTableArn(@javax.annotation.Nullable String tableArn) {
    this.tableArn = tableArn;
  }


  public BackupSummary backupArn(@javax.annotation.Nullable String backupArn) {
    this.backupArn = backupArn;
    return this;
  }

  /**
   * ARN associated with the backup.
   * @return backupArn
   */
  @javax.annotation.Nullable
  public String getBackupArn() {
    return backupArn;
  }

  public void setBackupArn(@javax.annotation.Nullable String backupArn) {
    this.backupArn = backupArn;
  }


  public BackupSummary backupName(@javax.annotation.Nullable String backupName) {
    this.backupName = backupName;
    return this;
  }

  /**
   * Name of the specified backup.
   * @return backupName
   */
  @javax.annotation.Nullable
  public String getBackupName() {
    return backupName;
  }

  public void setBackupName(@javax.annotation.Nullable String backupName) {
    this.backupName = backupName;
  }


  public BackupSummary backupCreationDateTime(@javax.annotation.Nullable OffsetDateTime backupCreationDateTime) {
    this.backupCreationDateTime = backupCreationDateTime;
    return this;
  }

  /**
   * Time at which the backup was created.
   * @return backupCreationDateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getBackupCreationDateTime() {
    return backupCreationDateTime;
  }

  public void setBackupCreationDateTime(@javax.annotation.Nullable OffsetDateTime backupCreationDateTime) {
    this.backupCreationDateTime = backupCreationDateTime;
  }


  public BackupSummary backupExpiryDateTime(@javax.annotation.Nullable OffsetDateTime backupExpiryDateTime) {
    this.backupExpiryDateTime = backupExpiryDateTime;
    return this;
  }

  /**
   * Time at which the automatic on-demand backup created by DynamoDB will expire. This &lt;code&gt;SYSTEM&lt;/code&gt; on-demand backup expires automatically 35 days after its creation.
   * @return backupExpiryDateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getBackupExpiryDateTime() {
    return backupExpiryDateTime;
  }

  public void setBackupExpiryDateTime(@javax.annotation.Nullable OffsetDateTime backupExpiryDateTime) {
    this.backupExpiryDateTime = backupExpiryDateTime;
  }


  public BackupSummary backupStatus(@javax.annotation.Nullable BackupStatus backupStatus) {
    this.backupStatus = backupStatus;
    return this;
  }

  /**
   * Backup can be in one of the following states: CREATING, ACTIVE, DELETED.
   * @return backupStatus
   */
  @javax.annotation.Nullable
  public BackupStatus getBackupStatus() {
    return backupStatus;
  }

  public void setBackupStatus(@javax.annotation.Nullable BackupStatus backupStatus) {
    this.backupStatus = backupStatus;
  }


  public BackupSummary backupType(@javax.annotation.Nullable BackupType backupType) {
    this.backupType = backupType;
    return this;
  }

  /**
   * &lt;p&gt;BackupType:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;USER&lt;/code&gt; - You create and manage these using the on-demand backup feature.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SYSTEM&lt;/code&gt; - If you delete a table with point-in-time recovery enabled, a &lt;code&gt;SYSTEM&lt;/code&gt; backup is automatically created and is retained for 35 days (at no additional cost). System backups allow you to restore the deleted table to the state it was in just before the point of deletion. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;AWS_BACKUP&lt;/code&gt; - On-demand backup created by you from Backup service.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
   * @return backupType
   */
  @javax.annotation.Nullable
  public BackupType getBackupType() {
    return backupType;
  }

  public void setBackupType(@javax.annotation.Nullable BackupType backupType) {
    this.backupType = backupType;
  }


  public BackupSummary backupSizeBytes(@javax.annotation.Nullable Integer backupSizeBytes) {
    this.backupSizeBytes = backupSizeBytes;
    return this;
  }

  /**
   * Size of the backup in bytes.
   * minimum: 0
   * @return backupSizeBytes
   */
  @javax.annotation.Nullable
  public Integer getBackupSizeBytes() {
    return backupSizeBytes;
  }

  public void setBackupSizeBytes(@javax.annotation.Nullable Integer backupSizeBytes) {
    this.backupSizeBytes = backupSizeBytes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BackupSummary backupSummary = (BackupSummary) o;
    return Objects.equals(this.tableName, backupSummary.tableName) &&
        Objects.equals(this.tableId, backupSummary.tableId) &&
        Objects.equals(this.tableArn, backupSummary.tableArn) &&
        Objects.equals(this.backupArn, backupSummary.backupArn) &&
        Objects.equals(this.backupName, backupSummary.backupName) &&
        Objects.equals(this.backupCreationDateTime, backupSummary.backupCreationDateTime) &&
        Objects.equals(this.backupExpiryDateTime, backupSummary.backupExpiryDateTime) &&
        Objects.equals(this.backupStatus, backupSummary.backupStatus) &&
        Objects.equals(this.backupType, backupSummary.backupType) &&
        Objects.equals(this.backupSizeBytes, backupSummary.backupSizeBytes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tableName, tableId, tableArn, backupArn, backupName, backupCreationDateTime, backupExpiryDateTime, backupStatus, backupType, backupSizeBytes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BackupSummary {\n");
    sb.append("    tableName: ").append(toIndentedString(tableName)).append("\n");
    sb.append("    tableId: ").append(toIndentedString(tableId)).append("\n");
    sb.append("    tableArn: ").append(toIndentedString(tableArn)).append("\n");
    sb.append("    backupArn: ").append(toIndentedString(backupArn)).append("\n");
    sb.append("    backupName: ").append(toIndentedString(backupName)).append("\n");
    sb.append("    backupCreationDateTime: ").append(toIndentedString(backupCreationDateTime)).append("\n");
    sb.append("    backupExpiryDateTime: ").append(toIndentedString(backupExpiryDateTime)).append("\n");
    sb.append("    backupStatus: ").append(toIndentedString(backupStatus)).append("\n");
    sb.append("    backupType: ").append(toIndentedString(backupType)).append("\n");
    sb.append("    backupSizeBytes: ").append(toIndentedString(backupSizeBytes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("TableName", "TableId", "TableArn", "BackupArn", "BackupName", "BackupCreationDateTime", "BackupExpiryDateTime", "BackupStatus", "BackupType", "BackupSizeBytes"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BackupSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BackupSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BackupSummary is not found in the empty JSON string", BackupSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BackupSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BackupSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("TableName") != null && !jsonObj.get("TableName").isJsonNull()) && !jsonObj.get("TableName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TableName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TableName").toString()));
      }
      if ((jsonObj.get("TableId") != null && !jsonObj.get("TableId").isJsonNull()) && !jsonObj.get("TableId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TableId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TableId").toString()));
      }
      if ((jsonObj.get("TableArn") != null && !jsonObj.get("TableArn").isJsonNull()) && !jsonObj.get("TableArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TableArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TableArn").toString()));
      }
      if ((jsonObj.get("BackupArn") != null && !jsonObj.get("BackupArn").isJsonNull()) && !jsonObj.get("BackupArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BackupArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BackupArn").toString()));
      }
      if ((jsonObj.get("BackupName") != null && !jsonObj.get("BackupName").isJsonNull()) && !jsonObj.get("BackupName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BackupName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BackupName").toString()));
      }
      // validate the optional field `BackupStatus`
      if (jsonObj.get("BackupStatus") != null && !jsonObj.get("BackupStatus").isJsonNull()) {
        BackupStatus.validateJsonElement(jsonObj.get("BackupStatus"));
      }
      // validate the optional field `BackupType`
      if (jsonObj.get("BackupType") != null && !jsonObj.get("BackupType").isJsonNull()) {
        BackupType.validateJsonElement(jsonObj.get("BackupType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BackupSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BackupSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BackupSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BackupSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<BackupSummary>() {
           @Override
           public void write(JsonWriter out, BackupSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BackupSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BackupSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BackupSummary
   * @throws IOException if the JSON string is invalid with respect to BackupSummary
   */
  public static BackupSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BackupSummary.class);
  }

  /**
   * Convert an instance of BackupSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

