/*
 * Amazon DynamoDB
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database, so that you don't have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.</p> <p>With DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic. You can scale up or scale down your tables' throughput capacity without downtime or performance degradation, and use the Amazon Web Services Management Console to monitor resource utilization and performance metrics.</p> <p>DynamoDB automatically spreads the data and traffic for your tables over a sufficient number of servers to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and automatically replicated across multiple Availability Zones in an Amazon Web Services Region, providing built-in high availability and data durability.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.AttributeValue;
import org.openapitools.client.model.AttributeValueUpdate;
import org.openapitools.client.model.ConditionalOperator;
import org.openapitools.client.model.ExpectedAttributeValue;
import org.openapitools.client.model.ReturnConsumedCapacity;
import org.openapitools.client.model.ReturnItemCollectionMetrics;
import org.openapitools.client.model.ReturnValue;
import org.openapitools.client.model.ReturnValuesOnConditionCheckFailure;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents the input of an &lt;code&gt;UpdateItem&lt;/code&gt; operation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T14:20:21.724079+05:30[Asia/Kolkata]", comments = "Generator version: 7.15.0")
public class UpdateItemInput {
  public static final String SERIALIZED_NAME_TABLE_NAME = "TableName";
  @SerializedName(SERIALIZED_NAME_TABLE_NAME)
  @javax.annotation.Nonnull
  private String tableName;

  public static final String SERIALIZED_NAME_KEY = "Key";
  @SerializedName(SERIALIZED_NAME_KEY)
  @javax.annotation.Nonnull
  private Map<String, AttributeValue> key;

  public static final String SERIALIZED_NAME_ATTRIBUTE_UPDATES = "AttributeUpdates";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTE_UPDATES)
  @javax.annotation.Nullable
  private Map<String, AttributeValueUpdate> attributeUpdates;

  public static final String SERIALIZED_NAME_EXPECTED = "Expected";
  @SerializedName(SERIALIZED_NAME_EXPECTED)
  @javax.annotation.Nullable
  private Map<String, ExpectedAttributeValue> expected;

  public static final String SERIALIZED_NAME_CONDITIONAL_OPERATOR = "ConditionalOperator";
  @SerializedName(SERIALIZED_NAME_CONDITIONAL_OPERATOR)
  @javax.annotation.Nullable
  private ConditionalOperator conditionalOperator;

  public static final String SERIALIZED_NAME_RETURN_VALUES = "ReturnValues";
  @SerializedName(SERIALIZED_NAME_RETURN_VALUES)
  @javax.annotation.Nullable
  private ReturnValue returnValues;

  public static final String SERIALIZED_NAME_RETURN_CONSUMED_CAPACITY = "ReturnConsumedCapacity";
  @SerializedName(SERIALIZED_NAME_RETURN_CONSUMED_CAPACITY)
  @javax.annotation.Nullable
  private ReturnConsumedCapacity returnConsumedCapacity;

  public static final String SERIALIZED_NAME_RETURN_ITEM_COLLECTION_METRICS = "ReturnItemCollectionMetrics";
  @SerializedName(SERIALIZED_NAME_RETURN_ITEM_COLLECTION_METRICS)
  @javax.annotation.Nullable
  private ReturnItemCollectionMetrics returnItemCollectionMetrics;

  public static final String SERIALIZED_NAME_UPDATE_EXPRESSION = "UpdateExpression";
  @SerializedName(SERIALIZED_NAME_UPDATE_EXPRESSION)
  @javax.annotation.Nullable
  private String updateExpression;

  public static final String SERIALIZED_NAME_CONDITION_EXPRESSION = "ConditionExpression";
  @SerializedName(SERIALIZED_NAME_CONDITION_EXPRESSION)
  @javax.annotation.Nullable
  private String conditionExpression;

  public static final String SERIALIZED_NAME_EXPRESSION_ATTRIBUTE_NAMES = "ExpressionAttributeNames";
  @SerializedName(SERIALIZED_NAME_EXPRESSION_ATTRIBUTE_NAMES)
  @javax.annotation.Nullable
  private Map<String, String> expressionAttributeNames;

  public static final String SERIALIZED_NAME_EXPRESSION_ATTRIBUTE_VALUES = "ExpressionAttributeValues";
  @SerializedName(SERIALIZED_NAME_EXPRESSION_ATTRIBUTE_VALUES)
  @javax.annotation.Nullable
  private Map<String, AttributeValue> expressionAttributeValues;

  public static final String SERIALIZED_NAME_RETURN_VALUES_ON_CONDITION_CHECK_FAILURE = "ReturnValuesOnConditionCheckFailure";
  @SerializedName(SERIALIZED_NAME_RETURN_VALUES_ON_CONDITION_CHECK_FAILURE)
  @javax.annotation.Nullable
  private ReturnValuesOnConditionCheckFailure returnValuesOnConditionCheckFailure;

  public UpdateItemInput() {
  }

  public UpdateItemInput tableName(@javax.annotation.Nonnull String tableName) {
    this.tableName = tableName;
    return this;
  }

  /**
   * The name of the table containing the item to update.
   * @return tableName
   */
  @javax.annotation.Nonnull
  public String getTableName() {
    return tableName;
  }

  public void setTableName(@javax.annotation.Nonnull String tableName) {
    this.tableName = tableName;
  }


  public UpdateItemInput key(@javax.annotation.Nonnull Map<String, AttributeValue> key) {
    this.key = key;
    return this;
  }

  public UpdateItemInput putKeyItem(String key, AttributeValue keyItem) {
    if (this.key == null) {
      this.key = new HashMap<>();
    }
    this.key.put(key, keyItem);
    return this;
  }

  /**
   * &lt;p&gt;The primary key of the item to be updated. Each element consists of an attribute name and a value for that attribute.&lt;/p&gt; &lt;p&gt;For the primary key, you must provide all of the attributes. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide values for both the partition key and the sort key.&lt;/p&gt;
   * @return key
   */
  @javax.annotation.Nonnull
  public Map<String, AttributeValue> getKey() {
    return key;
  }

  public void setKey(@javax.annotation.Nonnull Map<String, AttributeValue> key) {
    this.key = key;
  }


  public UpdateItemInput attributeUpdates(@javax.annotation.Nullable Map<String, AttributeValueUpdate> attributeUpdates) {
    this.attributeUpdates = attributeUpdates;
    return this;
  }

  public UpdateItemInput putAttributeUpdatesItem(String key, AttributeValueUpdate attributeUpdatesItem) {
    if (this.attributeUpdates == null) {
      this.attributeUpdates = new HashMap<>();
    }
    this.attributeUpdates.put(key, attributeUpdatesItem);
    return this;
  }

  /**
   * This is a legacy parameter. Use &lt;code&gt;UpdateExpression&lt;/code&gt; instead. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.AttributeUpdates.html\&quot;&gt;AttributeUpdates&lt;/a&gt; in the &lt;i&gt;Amazon DynamoDB Developer Guide&lt;/i&gt;.
   * @return attributeUpdates
   */
  @javax.annotation.Nullable
  public Map<String, AttributeValueUpdate> getAttributeUpdates() {
    return attributeUpdates;
  }

  public void setAttributeUpdates(@javax.annotation.Nullable Map<String, AttributeValueUpdate> attributeUpdates) {
    this.attributeUpdates = attributeUpdates;
  }


  public UpdateItemInput expected(@javax.annotation.Nullable Map<String, ExpectedAttributeValue> expected) {
    this.expected = expected;
    return this;
  }

  public UpdateItemInput putExpectedItem(String key, ExpectedAttributeValue expectedItem) {
    if (this.expected == null) {
      this.expected = new HashMap<>();
    }
    this.expected.put(key, expectedItem);
    return this;
  }

  /**
   * This is a legacy parameter. Use &lt;code&gt;ConditionExpression&lt;/code&gt; instead. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.Expected.html\&quot;&gt;Expected&lt;/a&gt; in the &lt;i&gt;Amazon DynamoDB Developer Guide&lt;/i&gt;.
   * @return expected
   */
  @javax.annotation.Nullable
  public Map<String, ExpectedAttributeValue> getExpected() {
    return expected;
  }

  public void setExpected(@javax.annotation.Nullable Map<String, ExpectedAttributeValue> expected) {
    this.expected = expected;
  }


  public UpdateItemInput conditionalOperator(@javax.annotation.Nullable ConditionalOperator conditionalOperator) {
    this.conditionalOperator = conditionalOperator;
    return this;
  }

  /**
   * This is a legacy parameter. Use &lt;code&gt;ConditionExpression&lt;/code&gt; instead. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.ConditionalOperator.html\&quot;&gt;ConditionalOperator&lt;/a&gt; in the &lt;i&gt;Amazon DynamoDB Developer Guide&lt;/i&gt;.
   * @return conditionalOperator
   */
  @javax.annotation.Nullable
  public ConditionalOperator getConditionalOperator() {
    return conditionalOperator;
  }

  public void setConditionalOperator(@javax.annotation.Nullable ConditionalOperator conditionalOperator) {
    this.conditionalOperator = conditionalOperator;
  }


  public UpdateItemInput returnValues(@javax.annotation.Nullable ReturnValue returnValues) {
    this.returnValues = returnValues;
    return this;
  }

  /**
   * &lt;p&gt;Use &lt;code&gt;ReturnValues&lt;/code&gt; if you want to get the item attributes as they appear before or after they are successfully updated. For &lt;code&gt;UpdateItem&lt;/code&gt;, the valid values are:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;NONE&lt;/code&gt; - If &lt;code&gt;ReturnValues&lt;/code&gt; is not specified, or if its value is &lt;code&gt;NONE&lt;/code&gt;, then nothing is returned. (This setting is the default for &lt;code&gt;ReturnValues&lt;/code&gt;.)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ALL_OLD&lt;/code&gt; - Returns all of the attributes of the item, as they appeared before the UpdateItem operation.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;UPDATED_OLD&lt;/code&gt; - Returns only the updated attributes, as they appeared before the UpdateItem operation.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ALL_NEW&lt;/code&gt; - Returns all of the attributes of the item, as they appear after the UpdateItem operation.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;UPDATED_NEW&lt;/code&gt; - Returns only the updated attributes, as they appear after the UpdateItem operation.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;There is no additional cost associated with requesting a return value aside from the small network and processing overhead of receiving a larger response. No read capacity units are consumed.&lt;/p&gt; &lt;p&gt;The values returned are strongly consistent.&lt;/p&gt;
   * @return returnValues
   */
  @javax.annotation.Nullable
  public ReturnValue getReturnValues() {
    return returnValues;
  }

  public void setReturnValues(@javax.annotation.Nullable ReturnValue returnValues) {
    this.returnValues = returnValues;
  }


  public UpdateItemInput returnConsumedCapacity(@javax.annotation.Nullable ReturnConsumedCapacity returnConsumedCapacity) {
    this.returnConsumedCapacity = returnConsumedCapacity;
    return this;
  }

  /**
   * Get returnConsumedCapacity
   * @return returnConsumedCapacity
   */
  @javax.annotation.Nullable
  public ReturnConsumedCapacity getReturnConsumedCapacity() {
    return returnConsumedCapacity;
  }

  public void setReturnConsumedCapacity(@javax.annotation.Nullable ReturnConsumedCapacity returnConsumedCapacity) {
    this.returnConsumedCapacity = returnConsumedCapacity;
  }


  public UpdateItemInput returnItemCollectionMetrics(@javax.annotation.Nullable ReturnItemCollectionMetrics returnItemCollectionMetrics) {
    this.returnItemCollectionMetrics = returnItemCollectionMetrics;
    return this;
  }

  /**
   * Determines whether item collection metrics are returned. If set to &lt;code&gt;SIZE&lt;/code&gt;, the response includes statistics about item collections, if any, that were modified during the operation are returned in the response. If set to &lt;code&gt;NONE&lt;/code&gt; (the default), no statistics are returned.
   * @return returnItemCollectionMetrics
   */
  @javax.annotation.Nullable
  public ReturnItemCollectionMetrics getReturnItemCollectionMetrics() {
    return returnItemCollectionMetrics;
  }

  public void setReturnItemCollectionMetrics(@javax.annotation.Nullable ReturnItemCollectionMetrics returnItemCollectionMetrics) {
    this.returnItemCollectionMetrics = returnItemCollectionMetrics;
  }


  public UpdateItemInput updateExpression(@javax.annotation.Nullable String updateExpression) {
    this.updateExpression = updateExpression;
    return this;
  }

  /**
   * &lt;p&gt;An expression that defines one or more attributes to be updated, the action to be performed on them, and new values for them.&lt;/p&gt; &lt;p&gt;The following action values are available for &lt;code&gt;UpdateExpression&lt;/code&gt;.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SET&lt;/code&gt; - Adds one or more attributes and values to an item. If any of these attributes already exist, they are replaced by the new values. You can also use &lt;code&gt;SET&lt;/code&gt; to add or subtract from an attribute that is of type Number. For example: &lt;code&gt;SET myNum &#x3D; myNum + :val&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code&gt;SET&lt;/code&gt; supports the following functions:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;if_not_exists (path, operand)&lt;/code&gt; - if the item does not contain an attribute at the specified path, then &lt;code&gt;if_not_exists&lt;/code&gt; evaluates to operand; otherwise, it evaluates to path. You can use this function to avoid overwriting an attribute that may already be present in the item.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;list_append (operand, operand)&lt;/code&gt; - evaluates to a list with a new element added to it. You can append the new element to the start or the end of the list by reversing the order of the operands.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;These function names are case-sensitive.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;REMOVE&lt;/code&gt; - Removes one or more attributes from an item.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ADD&lt;/code&gt; - Adds the specified value to the item, if the attribute does not already exist. If the attribute does exist, then the behavior of &lt;code&gt;ADD&lt;/code&gt; depends on the data type of the attribute:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If the existing attribute is a number, and if &lt;code&gt;Value&lt;/code&gt; is also a number, then &lt;code&gt;Value&lt;/code&gt; is mathematically added to the existing attribute. If &lt;code&gt;Value&lt;/code&gt; is a negative number, then it is subtracted from the existing attribute.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If you use &lt;code&gt;ADD&lt;/code&gt; to increment or decrement a number value for an item that doesn&#39;t exist before the update, DynamoDB uses &lt;code&gt;0&lt;/code&gt; as the initial value.&lt;/p&gt; &lt;p&gt;Similarly, if you use &lt;code&gt;ADD&lt;/code&gt; for an existing item to increment or decrement an attribute value that doesn&#39;t exist before the update, DynamoDB uses &lt;code&gt;0&lt;/code&gt; as the initial value. For example, suppose that the item you want to update doesn&#39;t have an attribute named &lt;code&gt;itemcount&lt;/code&gt;, but you decide to &lt;code&gt;ADD&lt;/code&gt; the number &lt;code&gt;3&lt;/code&gt; to this attribute anyway. DynamoDB will create the &lt;code&gt;itemcount&lt;/code&gt; attribute, set its initial value to &lt;code&gt;0&lt;/code&gt;, and finally add &lt;code&gt;3&lt;/code&gt; to it. The result will be a new &lt;code&gt;itemcount&lt;/code&gt; attribute in the item, with a value of &lt;code&gt;3&lt;/code&gt;.&lt;/p&gt; &lt;/note&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the existing data type is a set and if &lt;code&gt;Value&lt;/code&gt; is also a set, then &lt;code&gt;Value&lt;/code&gt; is added to the existing set. For example, if the attribute value is the set &lt;code&gt;[1,2]&lt;/code&gt;, and the &lt;code&gt;ADD&lt;/code&gt; action specified &lt;code&gt;[3]&lt;/code&gt;, then the final attribute value is &lt;code&gt;[1,2,3]&lt;/code&gt;. An error occurs if an &lt;code&gt;ADD&lt;/code&gt; action is specified for a set attribute and the attribute type specified does not match the existing set type. &lt;/p&gt; &lt;p&gt;Both sets must have the same primitive data type. For example, if the existing data type is a set of strings, the &lt;code&gt;Value&lt;/code&gt; must also be a set of strings.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;important&gt; &lt;p&gt;The &lt;code&gt;ADD&lt;/code&gt; action only supports Number and set data types. In addition, &lt;code&gt;ADD&lt;/code&gt; can only be used on top-level attributes, not nested attributes.&lt;/p&gt; &lt;/important&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DELETE&lt;/code&gt; - Deletes an element from a set.&lt;/p&gt; &lt;p&gt;If a set of values is specified, then those values are subtracted from the old set. For example, if the attribute value was the set &lt;code&gt;[a,b,c]&lt;/code&gt; and the &lt;code&gt;DELETE&lt;/code&gt; action specifies &lt;code&gt;[a,c]&lt;/code&gt;, then the final attribute value is &lt;code&gt;[b]&lt;/code&gt;. Specifying an empty set is an error.&lt;/p&gt; &lt;important&gt; &lt;p&gt;The &lt;code&gt;DELETE&lt;/code&gt; action only supports set data types. In addition, &lt;code&gt;DELETE&lt;/code&gt; can only be used on top-level attributes, not nested attributes.&lt;/p&gt; &lt;/important&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;You can have many actions in a single expression, such as the following: &lt;code&gt;SET a&#x3D;:value1, b&#x3D;:value2 DELETE :value3, :value4, :value5&lt;/code&gt; &lt;/p&gt; &lt;p&gt;For more information on update expressions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.Modifying.html\&quot;&gt;Modifying Items and Attributes&lt;/a&gt; in the &lt;i&gt;Amazon DynamoDB Developer Guide&lt;/i&gt;.&lt;/p&gt;
   * @return updateExpression
   */
  @javax.annotation.Nullable
  public String getUpdateExpression() {
    return updateExpression;
  }

  public void setUpdateExpression(@javax.annotation.Nullable String updateExpression) {
    this.updateExpression = updateExpression;
  }


  public UpdateItemInput conditionExpression(@javax.annotation.Nullable String conditionExpression) {
    this.conditionExpression = conditionExpression;
    return this;
  }

  /**
   * &lt;p&gt;A condition that must be satisfied in order for a conditional update to succeed.&lt;/p&gt; &lt;p&gt;An expression can contain any of the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Functions: &lt;code&gt;attribute_exists | attribute_not_exists | attribute_type | contains | begins_with | size&lt;/code&gt; &lt;/p&gt; &lt;p&gt;These function names are case-sensitive.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Comparison operators: &lt;code&gt;&#x3D; | &amp;lt;&amp;gt; | &amp;lt; | &amp;gt; | &amp;lt;&#x3D; | &amp;gt;&#x3D; | BETWEEN | IN &lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; Logical operators: &lt;code&gt;AND | OR | NOT&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information about condition expressions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html\&quot;&gt;Specifying Conditions&lt;/a&gt; in the &lt;i&gt;Amazon DynamoDB Developer Guide&lt;/i&gt;.&lt;/p&gt;
   * @return conditionExpression
   */
  @javax.annotation.Nullable
  public String getConditionExpression() {
    return conditionExpression;
  }

  public void setConditionExpression(@javax.annotation.Nullable String conditionExpression) {
    this.conditionExpression = conditionExpression;
  }


  public UpdateItemInput expressionAttributeNames(@javax.annotation.Nullable Map<String, String> expressionAttributeNames) {
    this.expressionAttributeNames = expressionAttributeNames;
    return this;
  }

  public UpdateItemInput putExpressionAttributeNamesItem(String key, String expressionAttributeNamesItem) {
    if (this.expressionAttributeNames == null) {
      this.expressionAttributeNames = new HashMap<>();
    }
    this.expressionAttributeNames.put(key, expressionAttributeNamesItem);
    return this;
  }

  /**
   * &lt;p&gt;One or more substitution tokens for attribute names in an expression. The following are some use cases for using &lt;code&gt;ExpressionAttributeNames&lt;/code&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;To access an attribute whose name conflicts with a DynamoDB reserved word.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;To create a placeholder for repeating occurrences of an attribute name in an expression.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;To prevent special characters in an attribute name from being misinterpreted in an expression.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Use the &lt;b&gt;#&lt;/b&gt; character in an expression to dereference an attribute name. For example, consider the following attribute name:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Percentile&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html\&quot;&gt;Reserved Words&lt;/a&gt; in the &lt;i&gt;Amazon DynamoDB Developer Guide&lt;/i&gt;.) To work around this, you could specify the following for &lt;code&gt;ExpressionAttributeNames&lt;/code&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;{\&quot;#P\&quot;:\&quot;Percentile\&quot;}&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;You could then use this substitution in an expression, as in this example:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;#P &#x3D; :val&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;Tokens that begin with the &lt;b&gt;:&lt;/b&gt; character are &lt;i&gt;expression attribute values&lt;/i&gt;, which are placeholders for the actual value at runtime.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;For more information about expression attribute names, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html\&quot;&gt;Specifying Item Attributes&lt;/a&gt; in the &lt;i&gt;Amazon DynamoDB Developer Guide&lt;/i&gt;.&lt;/p&gt;
   * @return expressionAttributeNames
   */
  @javax.annotation.Nullable
  public Map<String, String> getExpressionAttributeNames() {
    return expressionAttributeNames;
  }

  public void setExpressionAttributeNames(@javax.annotation.Nullable Map<String, String> expressionAttributeNames) {
    this.expressionAttributeNames = expressionAttributeNames;
  }


  public UpdateItemInput expressionAttributeValues(@javax.annotation.Nullable Map<String, AttributeValue> expressionAttributeValues) {
    this.expressionAttributeValues = expressionAttributeValues;
    return this;
  }

  public UpdateItemInput putExpressionAttributeValuesItem(String key, AttributeValue expressionAttributeValuesItem) {
    if (this.expressionAttributeValues == null) {
      this.expressionAttributeValues = new HashMap<>();
    }
    this.expressionAttributeValues.put(key, expressionAttributeValuesItem);
    return this;
  }

  /**
   * &lt;p&gt;One or more values that can be substituted in an expression.&lt;/p&gt; &lt;p&gt;Use the &lt;b&gt;:&lt;/b&gt; (colon) character in an expression to dereference an attribute value. For example, suppose that you wanted to check whether the value of the &lt;code&gt;ProductStatus&lt;/code&gt; attribute was one of the following: &lt;/p&gt; &lt;p&gt; &lt;code&gt;Available | Backordered | Discontinued&lt;/code&gt; &lt;/p&gt; &lt;p&gt;You would first need to specify &lt;code&gt;ExpressionAttributeValues&lt;/code&gt; as follows:&lt;/p&gt; &lt;p&gt; &lt;code&gt;{ \&quot;:avail\&quot;:{\&quot;S\&quot;:\&quot;Available\&quot;}, \&quot;:back\&quot;:{\&quot;S\&quot;:\&quot;Backordered\&quot;}, \&quot;:disc\&quot;:{\&quot;S\&quot;:\&quot;Discontinued\&quot;} }&lt;/code&gt; &lt;/p&gt; &lt;p&gt;You could then use these values in an expression, such as this:&lt;/p&gt; &lt;p&gt; &lt;code&gt;ProductStatus IN (:avail, :back, :disc)&lt;/code&gt; &lt;/p&gt; &lt;p&gt;For more information on expression attribute values, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html\&quot;&gt;Condition Expressions&lt;/a&gt; in the &lt;i&gt;Amazon DynamoDB Developer Guide&lt;/i&gt;.&lt;/p&gt;
   * @return expressionAttributeValues
   */
  @javax.annotation.Nullable
  public Map<String, AttributeValue> getExpressionAttributeValues() {
    return expressionAttributeValues;
  }

  public void setExpressionAttributeValues(@javax.annotation.Nullable Map<String, AttributeValue> expressionAttributeValues) {
    this.expressionAttributeValues = expressionAttributeValues;
  }


  public UpdateItemInput returnValuesOnConditionCheckFailure(@javax.annotation.Nullable ReturnValuesOnConditionCheckFailure returnValuesOnConditionCheckFailure) {
    this.returnValuesOnConditionCheckFailure = returnValuesOnConditionCheckFailure;
    return this;
  }

  /**
   * &lt;p&gt;An optional parameter that returns the item attributes for an &lt;code&gt;UpdateItem&lt;/code&gt; operation that failed a condition check.&lt;/p&gt; &lt;p&gt;There is no additional cost associated with requesting a return value aside from the small network and processing overhead of receiving a larger response. No read capacity units are consumed.&lt;/p&gt;
   * @return returnValuesOnConditionCheckFailure
   */
  @javax.annotation.Nullable
  public ReturnValuesOnConditionCheckFailure getReturnValuesOnConditionCheckFailure() {
    return returnValuesOnConditionCheckFailure;
  }

  public void setReturnValuesOnConditionCheckFailure(@javax.annotation.Nullable ReturnValuesOnConditionCheckFailure returnValuesOnConditionCheckFailure) {
    this.returnValuesOnConditionCheckFailure = returnValuesOnConditionCheckFailure;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateItemInput updateItemInput = (UpdateItemInput) o;
    return Objects.equals(this.tableName, updateItemInput.tableName) &&
        Objects.equals(this.key, updateItemInput.key) &&
        Objects.equals(this.attributeUpdates, updateItemInput.attributeUpdates) &&
        Objects.equals(this.expected, updateItemInput.expected) &&
        Objects.equals(this.conditionalOperator, updateItemInput.conditionalOperator) &&
        Objects.equals(this.returnValues, updateItemInput.returnValues) &&
        Objects.equals(this.returnConsumedCapacity, updateItemInput.returnConsumedCapacity) &&
        Objects.equals(this.returnItemCollectionMetrics, updateItemInput.returnItemCollectionMetrics) &&
        Objects.equals(this.updateExpression, updateItemInput.updateExpression) &&
        Objects.equals(this.conditionExpression, updateItemInput.conditionExpression) &&
        Objects.equals(this.expressionAttributeNames, updateItemInput.expressionAttributeNames) &&
        Objects.equals(this.expressionAttributeValues, updateItemInput.expressionAttributeValues) &&
        Objects.equals(this.returnValuesOnConditionCheckFailure, updateItemInput.returnValuesOnConditionCheckFailure);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tableName, key, attributeUpdates, expected, conditionalOperator, returnValues, returnConsumedCapacity, returnItemCollectionMetrics, updateExpression, conditionExpression, expressionAttributeNames, expressionAttributeValues, returnValuesOnConditionCheckFailure);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateItemInput {\n");
    sb.append("    tableName: ").append(toIndentedString(tableName)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    attributeUpdates: ").append(toIndentedString(attributeUpdates)).append("\n");
    sb.append("    expected: ").append(toIndentedString(expected)).append("\n");
    sb.append("    conditionalOperator: ").append(toIndentedString(conditionalOperator)).append("\n");
    sb.append("    returnValues: ").append(toIndentedString(returnValues)).append("\n");
    sb.append("    returnConsumedCapacity: ").append(toIndentedString(returnConsumedCapacity)).append("\n");
    sb.append("    returnItemCollectionMetrics: ").append(toIndentedString(returnItemCollectionMetrics)).append("\n");
    sb.append("    updateExpression: ").append(toIndentedString(updateExpression)).append("\n");
    sb.append("    conditionExpression: ").append(toIndentedString(conditionExpression)).append("\n");
    sb.append("    expressionAttributeNames: ").append(toIndentedString(expressionAttributeNames)).append("\n");
    sb.append("    expressionAttributeValues: ").append(toIndentedString(expressionAttributeValues)).append("\n");
    sb.append("    returnValuesOnConditionCheckFailure: ").append(toIndentedString(returnValuesOnConditionCheckFailure)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("TableName", "Key", "AttributeUpdates", "Expected", "ConditionalOperator", "ReturnValues", "ReturnConsumedCapacity", "ReturnItemCollectionMetrics", "UpdateExpression", "ConditionExpression", "ExpressionAttributeNames", "ExpressionAttributeValues", "ReturnValuesOnConditionCheckFailure"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("TableName", "Key"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateItemInput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateItemInput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateItemInput is not found in the empty JSON string", UpdateItemInput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateItemInput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateItemInput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateItemInput.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("TableName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TableName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TableName").toString()));
      }
      // validate the optional field `ConditionalOperator`
      if (jsonObj.get("ConditionalOperator") != null && !jsonObj.get("ConditionalOperator").isJsonNull()) {
        ConditionalOperator.validateJsonElement(jsonObj.get("ConditionalOperator"));
      }
      // validate the optional field `ReturnValues`
      if (jsonObj.get("ReturnValues") != null && !jsonObj.get("ReturnValues").isJsonNull()) {
        ReturnValue.validateJsonElement(jsonObj.get("ReturnValues"));
      }
      // validate the optional field `ReturnConsumedCapacity`
      if (jsonObj.get("ReturnConsumedCapacity") != null && !jsonObj.get("ReturnConsumedCapacity").isJsonNull()) {
        ReturnConsumedCapacity.validateJsonElement(jsonObj.get("ReturnConsumedCapacity"));
      }
      // validate the optional field `ReturnItemCollectionMetrics`
      if (jsonObj.get("ReturnItemCollectionMetrics") != null && !jsonObj.get("ReturnItemCollectionMetrics").isJsonNull()) {
        ReturnItemCollectionMetrics.validateJsonElement(jsonObj.get("ReturnItemCollectionMetrics"));
      }
      if ((jsonObj.get("UpdateExpression") != null && !jsonObj.get("UpdateExpression").isJsonNull()) && !jsonObj.get("UpdateExpression").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UpdateExpression` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UpdateExpression").toString()));
      }
      if ((jsonObj.get("ConditionExpression") != null && !jsonObj.get("ConditionExpression").isJsonNull()) && !jsonObj.get("ConditionExpression").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ConditionExpression` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ConditionExpression").toString()));
      }
      // validate the optional field `ReturnValuesOnConditionCheckFailure`
      if (jsonObj.get("ReturnValuesOnConditionCheckFailure") != null && !jsonObj.get("ReturnValuesOnConditionCheckFailure").isJsonNull()) {
        ReturnValuesOnConditionCheckFailure.validateJsonElement(jsonObj.get("ReturnValuesOnConditionCheckFailure"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateItemInput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateItemInput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateItemInput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateItemInput.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateItemInput>() {
           @Override
           public void write(JsonWriter out, UpdateItemInput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateItemInput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateItemInput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateItemInput
   * @throws IOException if the JSON string is invalid with respect to UpdateItemInput
   */
  public static UpdateItemInput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateItemInput.class);
  }

  /**
   * Convert an instance of UpdateItemInput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

