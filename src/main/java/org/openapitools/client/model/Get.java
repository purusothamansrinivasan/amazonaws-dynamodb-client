/*
 * Amazon DynamoDB
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database, so that you don't have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.</p> <p>With DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic. You can scale up or scale down your tables' throughput capacity without downtime or performance degradation, and use the Amazon Web Services Management Console to monitor resource utilization and performance metrics.</p> <p>DynamoDB automatically spreads the data and traffic for your tables over a sufficient number of servers to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and automatically replicated across multiple Availability Zones in an Amazon Web Services Region, providing built-in high availability and data durability.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.AttributeValue;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specifies an item and related attribute values to retrieve in a &lt;code&gt;TransactGetItem&lt;/code&gt; object.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T14:20:21.724079+05:30[Asia/Kolkata]", comments = "Generator version: 7.15.0")
public class Get {
  public static final String SERIALIZED_NAME_KEY = "Key";
  @SerializedName(SERIALIZED_NAME_KEY)
  @javax.annotation.Nonnull
  private Map<String, AttributeValue> key;

  public static final String SERIALIZED_NAME_TABLE_NAME = "TableName";
  @SerializedName(SERIALIZED_NAME_TABLE_NAME)
  @javax.annotation.Nonnull
  private String tableName;

  public static final String SERIALIZED_NAME_PROJECTION_EXPRESSION = "ProjectionExpression";
  @SerializedName(SERIALIZED_NAME_PROJECTION_EXPRESSION)
  @javax.annotation.Nullable
  private String projectionExpression;

  public static final String SERIALIZED_NAME_EXPRESSION_ATTRIBUTE_NAMES = "ExpressionAttributeNames";
  @SerializedName(SERIALIZED_NAME_EXPRESSION_ATTRIBUTE_NAMES)
  @javax.annotation.Nullable
  private Map<String, String> expressionAttributeNames;

  public Get() {
  }

  public Get key(@javax.annotation.Nonnull Map<String, AttributeValue> key) {
    this.key = key;
    return this;
  }

  public Get putKeyItem(String key, AttributeValue keyItem) {
    if (this.key == null) {
      this.key = new HashMap<>();
    }
    this.key.put(key, keyItem);
    return this;
  }

  /**
   * A map of attribute names to &lt;code&gt;AttributeValue&lt;/code&gt; objects that specifies the primary key of the item to retrieve.
   * @return key
   */
  @javax.annotation.Nonnull
  public Map<String, AttributeValue> getKey() {
    return key;
  }

  public void setKey(@javax.annotation.Nonnull Map<String, AttributeValue> key) {
    this.key = key;
  }


  public Get tableName(@javax.annotation.Nonnull String tableName) {
    this.tableName = tableName;
    return this;
  }

  /**
   * The name of the table from which to retrieve the specified item.
   * @return tableName
   */
  @javax.annotation.Nonnull
  public String getTableName() {
    return tableName;
  }

  public void setTableName(@javax.annotation.Nonnull String tableName) {
    this.tableName = tableName;
  }


  public Get projectionExpression(@javax.annotation.Nullable String projectionExpression) {
    this.projectionExpression = projectionExpression;
    return this;
  }

  /**
   * A string that identifies one or more attributes of the specified item to retrieve from the table. The attributes in the expression must be separated by commas. If no attribute names are specified, then all attributes of the specified item are returned. If any of the requested attributes are not found, they do not appear in the result.
   * @return projectionExpression
   */
  @javax.annotation.Nullable
  public String getProjectionExpression() {
    return projectionExpression;
  }

  public void setProjectionExpression(@javax.annotation.Nullable String projectionExpression) {
    this.projectionExpression = projectionExpression;
  }


  public Get expressionAttributeNames(@javax.annotation.Nullable Map<String, String> expressionAttributeNames) {
    this.expressionAttributeNames = expressionAttributeNames;
    return this;
  }

  public Get putExpressionAttributeNamesItem(String key, String expressionAttributeNamesItem) {
    if (this.expressionAttributeNames == null) {
      this.expressionAttributeNames = new HashMap<>();
    }
    this.expressionAttributeNames.put(key, expressionAttributeNamesItem);
    return this;
  }

  /**
   * One or more substitution tokens for attribute names in the ProjectionExpression parameter.
   * @return expressionAttributeNames
   */
  @javax.annotation.Nullable
  public Map<String, String> getExpressionAttributeNames() {
    return expressionAttributeNames;
  }

  public void setExpressionAttributeNames(@javax.annotation.Nullable Map<String, String> expressionAttributeNames) {
    this.expressionAttributeNames = expressionAttributeNames;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Get get = (Get) o;
    return Objects.equals(this.key, get.key) &&
        Objects.equals(this.tableName, get.tableName) &&
        Objects.equals(this.projectionExpression, get.projectionExpression) &&
        Objects.equals(this.expressionAttributeNames, get.expressionAttributeNames);
  }

  @Override
  public int hashCode() {
    return Objects.hash(key, tableName, projectionExpression, expressionAttributeNames);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Get {\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    tableName: ").append(toIndentedString(tableName)).append("\n");
    sb.append("    projectionExpression: ").append(toIndentedString(projectionExpression)).append("\n");
    sb.append("    expressionAttributeNames: ").append(toIndentedString(expressionAttributeNames)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("Key", "TableName", "ProjectionExpression", "ExpressionAttributeNames"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("Key", "TableName"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Get
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Get.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Get is not found in the empty JSON string", Get.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Get.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Get` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Get.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("TableName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TableName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TableName").toString()));
      }
      if ((jsonObj.get("ProjectionExpression") != null && !jsonObj.get("ProjectionExpression").isJsonNull()) && !jsonObj.get("ProjectionExpression").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ProjectionExpression` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ProjectionExpression").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Get.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Get' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Get> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Get.class));

       return (TypeAdapter<T>) new TypeAdapter<Get>() {
           @Override
           public void write(JsonWriter out, Get value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Get read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Get given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Get
   * @throws IOException if the JSON string is invalid with respect to Get
   */
  public static Get fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Get.class);
  }

  /**
   * Convert an instance of Get to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

