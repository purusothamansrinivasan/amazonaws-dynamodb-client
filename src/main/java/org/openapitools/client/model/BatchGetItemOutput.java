/*
 * Amazon DynamoDB
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database, so that you don't have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.</p> <p>With DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic. You can scale up or scale down your tables' throughput capacity without downtime or performance degradation, and use the Amazon Web Services Management Console to monitor resource utilization and performance metrics.</p> <p>DynamoDB automatically spreads the data and traffic for your tables over a sufficient number of servers to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and automatically replicated across multiple Availability Zones in an Amazon Web Services Region, providing built-in high availability and data durability.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.AttributeValue;
import org.openapitools.client.model.ConsumedCapacity;
import org.openapitools.client.model.KeysAndAttributes;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents the output of a &lt;code&gt;BatchGetItem&lt;/code&gt; operation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T14:20:21.724079+05:30[Asia/Kolkata]", comments = "Generator version: 7.15.0")
public class BatchGetItemOutput {
  public static final String SERIALIZED_NAME_RESPONSES = "Responses";
  @SerializedName(SERIALIZED_NAME_RESPONSES)
  @javax.annotation.Nullable
  private Map<String, List<Map<String, AttributeValue>>> responses;

  public static final String SERIALIZED_NAME_UNPROCESSED_KEYS = "UnprocessedKeys";
  @SerializedName(SERIALIZED_NAME_UNPROCESSED_KEYS)
  @javax.annotation.Nullable
  private Map<String, KeysAndAttributes> unprocessedKeys;

  public static final String SERIALIZED_NAME_CONSUMED_CAPACITY = "ConsumedCapacity";
  @SerializedName(SERIALIZED_NAME_CONSUMED_CAPACITY)
  @javax.annotation.Nullable
  private List<ConsumedCapacity> consumedCapacity;

  public BatchGetItemOutput() {
  }

  public BatchGetItemOutput responses(@javax.annotation.Nullable Map<String, List<Map<String, AttributeValue>>> responses) {
    this.responses = responses;
    return this;
  }

  public BatchGetItemOutput putResponsesItem(String key, List<Map<String, AttributeValue>> responsesItem) {
    if (this.responses == null) {
      this.responses = new HashMap<>();
    }
    this.responses.put(key, responsesItem);
    return this;
  }

  /**
   * A map of table name to a list of items. Each object in &lt;code&gt;Responses&lt;/code&gt; consists of a table name, along with a map of attribute data consisting of the data type and attribute value.
   * @return responses
   */
  @javax.annotation.Nullable
  public Map<String, List<Map<String, AttributeValue>>> getResponses() {
    return responses;
  }

  public void setResponses(@javax.annotation.Nullable Map<String, List<Map<String, AttributeValue>>> responses) {
    this.responses = responses;
  }


  public BatchGetItemOutput unprocessedKeys(@javax.annotation.Nullable Map<String, KeysAndAttributes> unprocessedKeys) {
    this.unprocessedKeys = unprocessedKeys;
    return this;
  }

  public BatchGetItemOutput putUnprocessedKeysItem(String key, KeysAndAttributes unprocessedKeysItem) {
    if (this.unprocessedKeys == null) {
      this.unprocessedKeys = new HashMap<>();
    }
    this.unprocessedKeys.put(key, unprocessedKeysItem);
    return this;
  }

  /**
   * &lt;p&gt;A map of tables and their respective keys that were not processed with the current response. The &lt;code&gt;UnprocessedKeys&lt;/code&gt; value is in the same form as &lt;code&gt;RequestItems&lt;/code&gt;, so the value can be provided directly to a subsequent &lt;code&gt;BatchGetItem&lt;/code&gt; operation. For more information, see &lt;code&gt;RequestItems&lt;/code&gt; in the Request Parameters section.&lt;/p&gt; &lt;p&gt;Each element consists of:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Keys&lt;/code&gt; - An array of primary key attribute values that define specific items in the table.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ProjectionExpression&lt;/code&gt; - One or more attributes to be retrieved from the table or index. By default, all attributes are returned. If a requested attribute is not found, it does not appear in the result.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ConsistentRead&lt;/code&gt; - The consistency of a read operation. If set to &lt;code&gt;true&lt;/code&gt;, then a strongly consistent read is used; otherwise, an eventually consistent read is used.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If there are no unprocessed keys remaining, the response contains an empty &lt;code&gt;UnprocessedKeys&lt;/code&gt; map.&lt;/p&gt;
   * @return unprocessedKeys
   */
  @javax.annotation.Nullable
  public Map<String, KeysAndAttributes> getUnprocessedKeys() {
    return unprocessedKeys;
  }

  public void setUnprocessedKeys(@javax.annotation.Nullable Map<String, KeysAndAttributes> unprocessedKeys) {
    this.unprocessedKeys = unprocessedKeys;
  }


  public BatchGetItemOutput consumedCapacity(@javax.annotation.Nullable List<ConsumedCapacity> consumedCapacity) {
    this.consumedCapacity = consumedCapacity;
    return this;
  }

  public BatchGetItemOutput addConsumedCapacityItem(ConsumedCapacity consumedCapacityItem) {
    if (this.consumedCapacity == null) {
      this.consumedCapacity = new ArrayList<>();
    }
    this.consumedCapacity.add(consumedCapacityItem);
    return this;
  }

  /**
   * &lt;p&gt;The read capacity units consumed by the entire &lt;code&gt;BatchGetItem&lt;/code&gt; operation.&lt;/p&gt; &lt;p&gt;Each element consists of:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;TableName&lt;/code&gt; - The table that consumed the provisioned throughput.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;CapacityUnits&lt;/code&gt; - The total number of capacity units consumed.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
   * @return consumedCapacity
   */
  @javax.annotation.Nullable
  public List<ConsumedCapacity> getConsumedCapacity() {
    return consumedCapacity;
  }

  public void setConsumedCapacity(@javax.annotation.Nullable List<ConsumedCapacity> consumedCapacity) {
    this.consumedCapacity = consumedCapacity;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BatchGetItemOutput batchGetItemOutput = (BatchGetItemOutput) o;
    return Objects.equals(this.responses, batchGetItemOutput.responses) &&
        Objects.equals(this.unprocessedKeys, batchGetItemOutput.unprocessedKeys) &&
        Objects.equals(this.consumedCapacity, batchGetItemOutput.consumedCapacity);
  }

  @Override
  public int hashCode() {
    return Objects.hash(responses, unprocessedKeys, consumedCapacity);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BatchGetItemOutput {\n");
    sb.append("    responses: ").append(toIndentedString(responses)).append("\n");
    sb.append("    unprocessedKeys: ").append(toIndentedString(unprocessedKeys)).append("\n");
    sb.append("    consumedCapacity: ").append(toIndentedString(consumedCapacity)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("Responses", "UnprocessedKeys", "ConsumedCapacity"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BatchGetItemOutput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BatchGetItemOutput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BatchGetItemOutput is not found in the empty JSON string", BatchGetItemOutput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BatchGetItemOutput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BatchGetItemOutput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("ConsumedCapacity") != null && !jsonObj.get("ConsumedCapacity").isJsonNull()) {
        JsonArray jsonArrayconsumedCapacity = jsonObj.getAsJsonArray("ConsumedCapacity");
        if (jsonArrayconsumedCapacity != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ConsumedCapacity").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ConsumedCapacity` to be an array in the JSON string but got `%s`", jsonObj.get("ConsumedCapacity").toString()));
          }

          // validate the optional field `ConsumedCapacity` (array)
          for (int i = 0; i < jsonArrayconsumedCapacity.size(); i++) {
            ConsumedCapacity.validateJsonElement(jsonArrayconsumedCapacity.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BatchGetItemOutput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BatchGetItemOutput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BatchGetItemOutput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BatchGetItemOutput.class));

       return (TypeAdapter<T>) new TypeAdapter<BatchGetItemOutput>() {
           @Override
           public void write(JsonWriter out, BatchGetItemOutput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BatchGetItemOutput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BatchGetItemOutput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BatchGetItemOutput
   * @throws IOException if the JSON string is invalid with respect to BatchGetItemOutput
   */
  public static BatchGetItemOutput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BatchGetItemOutput.class);
  }

  /**
   * Convert an instance of BatchGetItemOutput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

