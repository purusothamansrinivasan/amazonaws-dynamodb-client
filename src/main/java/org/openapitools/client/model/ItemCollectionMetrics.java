/*
 * Amazon DynamoDB
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database, so that you don't have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.</p> <p>With DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic. You can scale up or scale down your tables' throughput capacity without downtime or performance degradation, and use the Amazon Web Services Management Console to monitor resource utilization and performance metrics.</p> <p>DynamoDB automatically spreads the data and traffic for your tables over a sufficient number of servers to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and automatically replicated across multiple Availability Zones in an Amazon Web Services Region, providing built-in high availability and data durability.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.AttributeValue;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about item collections, if any, that were affected by the operation. &lt;code&gt;ItemCollectionMetrics&lt;/code&gt; is only returned if the request asked for it. If the table does not have any local secondary indexes, this information is not returned in the response.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T14:20:21.724079+05:30[Asia/Kolkata]", comments = "Generator version: 7.15.0")
public class ItemCollectionMetrics {
  public static final String SERIALIZED_NAME_ITEM_COLLECTION_KEY = "ItemCollectionKey";
  @SerializedName(SERIALIZED_NAME_ITEM_COLLECTION_KEY)
  @javax.annotation.Nullable
  private Map<String, AttributeValue> itemCollectionKey;

  public static final String SERIALIZED_NAME_SIZE_ESTIMATE_RANGE_G_B = "SizeEstimateRangeGB";
  @SerializedName(SERIALIZED_NAME_SIZE_ESTIMATE_RANGE_G_B)
  @javax.annotation.Nullable
  private List<Double> sizeEstimateRangeGB;

  public ItemCollectionMetrics() {
  }

  public ItemCollectionMetrics itemCollectionKey(@javax.annotation.Nullable Map<String, AttributeValue> itemCollectionKey) {
    this.itemCollectionKey = itemCollectionKey;
    return this;
  }

  public ItemCollectionMetrics putItemCollectionKeyItem(String key, AttributeValue itemCollectionKeyItem) {
    if (this.itemCollectionKey == null) {
      this.itemCollectionKey = new HashMap<>();
    }
    this.itemCollectionKey.put(key, itemCollectionKeyItem);
    return this;
  }

  /**
   * The partition key value of the item collection. This value is the same as the partition key value of the item.
   * @return itemCollectionKey
   */
  @javax.annotation.Nullable
  public Map<String, AttributeValue> getItemCollectionKey() {
    return itemCollectionKey;
  }

  public void setItemCollectionKey(@javax.annotation.Nullable Map<String, AttributeValue> itemCollectionKey) {
    this.itemCollectionKey = itemCollectionKey;
  }


  public ItemCollectionMetrics sizeEstimateRangeGB(@javax.annotation.Nullable List<Double> sizeEstimateRangeGB) {
    this.sizeEstimateRangeGB = sizeEstimateRangeGB;
    return this;
  }

  public ItemCollectionMetrics addSizeEstimateRangeGBItem(Double sizeEstimateRangeGBItem) {
    if (this.sizeEstimateRangeGB == null) {
      this.sizeEstimateRangeGB = new ArrayList<>();
    }
    this.sizeEstimateRangeGB.add(sizeEstimateRangeGBItem);
    return this;
  }

  /**
   * &lt;p&gt;An estimate of item collection size, in gigabytes. This value is a two-element array containing a lower bound and an upper bound for the estimate. The estimate includes the size of all the items in the table, plus the size of all attributes projected into all of the local secondary indexes on that table. Use this estimate to measure whether a local secondary index is approaching its size limit.&lt;/p&gt; &lt;p&gt;The estimate is subject to change over time; therefore, do not rely on the precision or accuracy of the estimate.&lt;/p&gt;
   * @return sizeEstimateRangeGB
   */
  @javax.annotation.Nullable
  public List<Double> getSizeEstimateRangeGB() {
    return sizeEstimateRangeGB;
  }

  public void setSizeEstimateRangeGB(@javax.annotation.Nullable List<Double> sizeEstimateRangeGB) {
    this.sizeEstimateRangeGB = sizeEstimateRangeGB;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ItemCollectionMetrics itemCollectionMetrics = (ItemCollectionMetrics) o;
    return Objects.equals(this.itemCollectionKey, itemCollectionMetrics.itemCollectionKey) &&
        Objects.equals(this.sizeEstimateRangeGB, itemCollectionMetrics.sizeEstimateRangeGB);
  }

  @Override
  public int hashCode() {
    return Objects.hash(itemCollectionKey, sizeEstimateRangeGB);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ItemCollectionMetrics {\n");
    sb.append("    itemCollectionKey: ").append(toIndentedString(itemCollectionKey)).append("\n");
    sb.append("    sizeEstimateRangeGB: ").append(toIndentedString(sizeEstimateRangeGB)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("ItemCollectionKey", "SizeEstimateRangeGB"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ItemCollectionMetrics
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ItemCollectionMetrics.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ItemCollectionMetrics is not found in the empty JSON string", ItemCollectionMetrics.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ItemCollectionMetrics.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ItemCollectionMetrics` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("SizeEstimateRangeGB") != null && !jsonObj.get("SizeEstimateRangeGB").isJsonNull() && !jsonObj.get("SizeEstimateRangeGB").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `SizeEstimateRangeGB` to be an array in the JSON string but got `%s`", jsonObj.get("SizeEstimateRangeGB").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ItemCollectionMetrics.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ItemCollectionMetrics' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ItemCollectionMetrics> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ItemCollectionMetrics.class));

       return (TypeAdapter<T>) new TypeAdapter<ItemCollectionMetrics>() {
           @Override
           public void write(JsonWriter out, ItemCollectionMetrics value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ItemCollectionMetrics read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ItemCollectionMetrics given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ItemCollectionMetrics
   * @throws IOException if the JSON string is invalid with respect to ItemCollectionMetrics
   */
  public static ItemCollectionMetrics fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ItemCollectionMetrics.class);
  }

  /**
   * Convert an instance of ItemCollectionMetrics to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

