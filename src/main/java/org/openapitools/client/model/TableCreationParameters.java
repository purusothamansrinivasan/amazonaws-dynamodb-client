/*
 * Amazon DynamoDB
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database, so that you don't have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.</p> <p>With DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic. You can scale up or scale down your tables' throughput capacity without downtime or performance degradation, and use the Amazon Web Services Management Console to monitor resource utilization and performance metrics.</p> <p>DynamoDB automatically spreads the data and traffic for your tables over a sufficient number of servers to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and automatically replicated across multiple Availability Zones in an Amazon Web Services Region, providing built-in high availability and data durability.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AttributeDefinition;
import org.openapitools.client.model.BillingMode;
import org.openapitools.client.model.GlobalSecondaryIndex;
import org.openapitools.client.model.KeySchemaElement;
import org.openapitools.client.model.ProvisionedThroughput;
import org.openapitools.client.model.SSESpecification;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 *  The parameters for the table created as part of the import operation. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T14:20:21.724079+05:30[Asia/Kolkata]", comments = "Generator version: 7.15.0")
public class TableCreationParameters {
  public static final String SERIALIZED_NAME_TABLE_NAME = "TableName";
  @SerializedName(SERIALIZED_NAME_TABLE_NAME)
  @javax.annotation.Nonnull
  private String tableName;

  public static final String SERIALIZED_NAME_ATTRIBUTE_DEFINITIONS = "AttributeDefinitions";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTE_DEFINITIONS)
  @javax.annotation.Nonnull
  private List<AttributeDefinition> attributeDefinitions;

  public static final String SERIALIZED_NAME_KEY_SCHEMA = "KeySchema";
  @SerializedName(SERIALIZED_NAME_KEY_SCHEMA)
  @javax.annotation.Nonnull
  private List<KeySchemaElement> keySchema;

  public static final String SERIALIZED_NAME_BILLING_MODE = "BillingMode";
  @SerializedName(SERIALIZED_NAME_BILLING_MODE)
  @javax.annotation.Nullable
  private BillingMode billingMode;

  public static final String SERIALIZED_NAME_PROVISIONED_THROUGHPUT = "ProvisionedThroughput";
  @SerializedName(SERIALIZED_NAME_PROVISIONED_THROUGHPUT)
  @javax.annotation.Nullable
  private ProvisionedThroughput provisionedThroughput;

  public static final String SERIALIZED_NAME_SS_E_SPECIFICATION = "SSESpecification";
  @SerializedName(SERIALIZED_NAME_SS_E_SPECIFICATION)
  @javax.annotation.Nullable
  private SSESpecification ssESpecification;

  public static final String SERIALIZED_NAME_GLOBAL_SECONDARY_INDEXES = "GlobalSecondaryIndexes";
  @SerializedName(SERIALIZED_NAME_GLOBAL_SECONDARY_INDEXES)
  @javax.annotation.Nullable
  private List<GlobalSecondaryIndex> globalSecondaryIndexes;

  public TableCreationParameters() {
  }

  public TableCreationParameters tableName(@javax.annotation.Nonnull String tableName) {
    this.tableName = tableName;
    return this;
  }

  /**
   *  The name of the table created as part of the import operation. 
   * @return tableName
   */
  @javax.annotation.Nonnull
  public String getTableName() {
    return tableName;
  }

  public void setTableName(@javax.annotation.Nonnull String tableName) {
    this.tableName = tableName;
  }


  public TableCreationParameters attributeDefinitions(@javax.annotation.Nonnull List<AttributeDefinition> attributeDefinitions) {
    this.attributeDefinitions = attributeDefinitions;
    return this;
  }

  public TableCreationParameters addAttributeDefinitionsItem(AttributeDefinition attributeDefinitionsItem) {
    if (this.attributeDefinitions == null) {
      this.attributeDefinitions = new ArrayList<>();
    }
    this.attributeDefinitions.add(attributeDefinitionsItem);
    return this;
  }

  /**
   *  The attributes of the table created as part of the import operation. 
   * @return attributeDefinitions
   */
  @javax.annotation.Nonnull
  public List<AttributeDefinition> getAttributeDefinitions() {
    return attributeDefinitions;
  }

  public void setAttributeDefinitions(@javax.annotation.Nonnull List<AttributeDefinition> attributeDefinitions) {
    this.attributeDefinitions = attributeDefinitions;
  }


  public TableCreationParameters keySchema(@javax.annotation.Nonnull List<KeySchemaElement> keySchema) {
    this.keySchema = keySchema;
    return this;
  }

  public TableCreationParameters addKeySchemaItem(KeySchemaElement keySchemaItem) {
    if (this.keySchema == null) {
      this.keySchema = new ArrayList<>();
    }
    this.keySchema.add(keySchemaItem);
    return this;
  }

  /**
   *  The primary key and option sort key of the table created as part of the import operation. 
   * @return keySchema
   */
  @javax.annotation.Nonnull
  public List<KeySchemaElement> getKeySchema() {
    return keySchema;
  }

  public void setKeySchema(@javax.annotation.Nonnull List<KeySchemaElement> keySchema) {
    this.keySchema = keySchema;
  }


  public TableCreationParameters billingMode(@javax.annotation.Nullable BillingMode billingMode) {
    this.billingMode = billingMode;
    return this;
  }

  /**
   *  The billing mode for provisioning the table created as part of the import operation. 
   * @return billingMode
   */
  @javax.annotation.Nullable
  public BillingMode getBillingMode() {
    return billingMode;
  }

  public void setBillingMode(@javax.annotation.Nullable BillingMode billingMode) {
    this.billingMode = billingMode;
  }


  public TableCreationParameters provisionedThroughput(@javax.annotation.Nullable ProvisionedThroughput provisionedThroughput) {
    this.provisionedThroughput = provisionedThroughput;
    return this;
  }

  /**
   * Get provisionedThroughput
   * @return provisionedThroughput
   */
  @javax.annotation.Nullable
  public ProvisionedThroughput getProvisionedThroughput() {
    return provisionedThroughput;
  }

  public void setProvisionedThroughput(@javax.annotation.Nullable ProvisionedThroughput provisionedThroughput) {
    this.provisionedThroughput = provisionedThroughput;
  }


  public TableCreationParameters ssESpecification(@javax.annotation.Nullable SSESpecification ssESpecification) {
    this.ssESpecification = ssESpecification;
    return this;
  }

  /**
   * Get ssESpecification
   * @return ssESpecification
   */
  @javax.annotation.Nullable
  public SSESpecification getSsESpecification() {
    return ssESpecification;
  }

  public void setSsESpecification(@javax.annotation.Nullable SSESpecification ssESpecification) {
    this.ssESpecification = ssESpecification;
  }


  public TableCreationParameters globalSecondaryIndexes(@javax.annotation.Nullable List<GlobalSecondaryIndex> globalSecondaryIndexes) {
    this.globalSecondaryIndexes = globalSecondaryIndexes;
    return this;
  }

  public TableCreationParameters addGlobalSecondaryIndexesItem(GlobalSecondaryIndex globalSecondaryIndexesItem) {
    if (this.globalSecondaryIndexes == null) {
      this.globalSecondaryIndexes = new ArrayList<>();
    }
    this.globalSecondaryIndexes.add(globalSecondaryIndexesItem);
    return this;
  }

  /**
   *  The Global Secondary Indexes (GSI) of the table to be created as part of the import operation. 
   * @return globalSecondaryIndexes
   */
  @javax.annotation.Nullable
  public List<GlobalSecondaryIndex> getGlobalSecondaryIndexes() {
    return globalSecondaryIndexes;
  }

  public void setGlobalSecondaryIndexes(@javax.annotation.Nullable List<GlobalSecondaryIndex> globalSecondaryIndexes) {
    this.globalSecondaryIndexes = globalSecondaryIndexes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TableCreationParameters tableCreationParameters = (TableCreationParameters) o;
    return Objects.equals(this.tableName, tableCreationParameters.tableName) &&
        Objects.equals(this.attributeDefinitions, tableCreationParameters.attributeDefinitions) &&
        Objects.equals(this.keySchema, tableCreationParameters.keySchema) &&
        Objects.equals(this.billingMode, tableCreationParameters.billingMode) &&
        Objects.equals(this.provisionedThroughput, tableCreationParameters.provisionedThroughput) &&
        Objects.equals(this.ssESpecification, tableCreationParameters.ssESpecification) &&
        Objects.equals(this.globalSecondaryIndexes, tableCreationParameters.globalSecondaryIndexes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tableName, attributeDefinitions, keySchema, billingMode, provisionedThroughput, ssESpecification, globalSecondaryIndexes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TableCreationParameters {\n");
    sb.append("    tableName: ").append(toIndentedString(tableName)).append("\n");
    sb.append("    attributeDefinitions: ").append(toIndentedString(attributeDefinitions)).append("\n");
    sb.append("    keySchema: ").append(toIndentedString(keySchema)).append("\n");
    sb.append("    billingMode: ").append(toIndentedString(billingMode)).append("\n");
    sb.append("    provisionedThroughput: ").append(toIndentedString(provisionedThroughput)).append("\n");
    sb.append("    ssESpecification: ").append(toIndentedString(ssESpecification)).append("\n");
    sb.append("    globalSecondaryIndexes: ").append(toIndentedString(globalSecondaryIndexes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("TableName", "AttributeDefinitions", "KeySchema", "BillingMode", "ProvisionedThroughput", "SSESpecification", "GlobalSecondaryIndexes"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("TableName", "AttributeDefinitions", "KeySchema"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TableCreationParameters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TableCreationParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TableCreationParameters is not found in the empty JSON string", TableCreationParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TableCreationParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TableCreationParameters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TableCreationParameters.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("TableName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TableName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TableName").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("AttributeDefinitions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `AttributeDefinitions` to be an array in the JSON string but got `%s`", jsonObj.get("AttributeDefinitions").toString()));
      }

      JsonArray jsonArrayattributeDefinitions = jsonObj.getAsJsonArray("AttributeDefinitions");
      // validate the required field `AttributeDefinitions` (array)
      for (int i = 0; i < jsonArrayattributeDefinitions.size(); i++) {
        AttributeDefinition.validateJsonElement(jsonArrayattributeDefinitions.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("KeySchema").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `KeySchema` to be an array in the JSON string but got `%s`", jsonObj.get("KeySchema").toString()));
      }

      JsonArray jsonArraykeySchema = jsonObj.getAsJsonArray("KeySchema");
      // validate the required field `KeySchema` (array)
      for (int i = 0; i < jsonArraykeySchema.size(); i++) {
        KeySchemaElement.validateJsonElement(jsonArraykeySchema.get(i));
      };
      // validate the optional field `BillingMode`
      if (jsonObj.get("BillingMode") != null && !jsonObj.get("BillingMode").isJsonNull()) {
        BillingMode.validateJsonElement(jsonObj.get("BillingMode"));
      }
      // validate the optional field `ProvisionedThroughput`
      if (jsonObj.get("ProvisionedThroughput") != null && !jsonObj.get("ProvisionedThroughput").isJsonNull()) {
        ProvisionedThroughput.validateJsonElement(jsonObj.get("ProvisionedThroughput"));
      }
      // validate the optional field `SSESpecification`
      if (jsonObj.get("SSESpecification") != null && !jsonObj.get("SSESpecification").isJsonNull()) {
        SSESpecification.validateJsonElement(jsonObj.get("SSESpecification"));
      }
      if (jsonObj.get("GlobalSecondaryIndexes") != null && !jsonObj.get("GlobalSecondaryIndexes").isJsonNull()) {
        JsonArray jsonArrayglobalSecondaryIndexes = jsonObj.getAsJsonArray("GlobalSecondaryIndexes");
        if (jsonArrayglobalSecondaryIndexes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("GlobalSecondaryIndexes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `GlobalSecondaryIndexes` to be an array in the JSON string but got `%s`", jsonObj.get("GlobalSecondaryIndexes").toString()));
          }

          // validate the optional field `GlobalSecondaryIndexes` (array)
          for (int i = 0; i < jsonArrayglobalSecondaryIndexes.size(); i++) {
            GlobalSecondaryIndex.validateJsonElement(jsonArrayglobalSecondaryIndexes.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TableCreationParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TableCreationParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TableCreationParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TableCreationParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<TableCreationParameters>() {
           @Override
           public void write(JsonWriter out, TableCreationParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TableCreationParameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TableCreationParameters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TableCreationParameters
   * @throws IOException if the JSON string is invalid with respect to TableCreationParameters
   */
  public static TableCreationParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TableCreationParameters.class);
  }

  /**
   * Convert an instance of TableCreationParameters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

