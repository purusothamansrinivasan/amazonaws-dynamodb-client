/*
 * Amazon DynamoDB
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database, so that you don't have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.</p> <p>With DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic. You can scale up or scale down your tables' throughput capacity without downtime or performance degradation, and use the Amazon Web Services Management Console to monitor resource utilization and performance metrics.</p> <p>DynamoDB automatically spreads the data and traffic for your tables over a sufficient number of servers to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and automatically replicated across multiple Availability Zones in an Amazon Web Services Region, providing built-in high availability and data durability.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 *  The S3 bucket that is being imported from. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T14:20:21.724079+05:30[Asia/Kolkata]", comments = "Generator version: 7.15.0")
public class S3BucketSource {
  public static final String SERIALIZED_NAME_S3_BUCKET_OWNER = "S3BucketOwner";
  @SerializedName(SERIALIZED_NAME_S3_BUCKET_OWNER)
  @javax.annotation.Nullable
  private String s3BucketOwner;

  public static final String SERIALIZED_NAME_S3_BUCKET = "S3Bucket";
  @SerializedName(SERIALIZED_NAME_S3_BUCKET)
  @javax.annotation.Nonnull
  private String s3Bucket;

  public static final String SERIALIZED_NAME_S3_KEY_PREFIX = "S3KeyPrefix";
  @SerializedName(SERIALIZED_NAME_S3_KEY_PREFIX)
  @javax.annotation.Nullable
  private String s3KeyPrefix;

  public S3BucketSource() {
  }

  public S3BucketSource s3BucketOwner(@javax.annotation.Nullable String s3BucketOwner) {
    this.s3BucketOwner = s3BucketOwner;
    return this;
  }

  /**
   *  The account number of the S3 bucket that is being imported from. If the bucket is owned by the requester this is optional. 
   * @return s3BucketOwner
   */
  @javax.annotation.Nullable
  public String getS3BucketOwner() {
    return s3BucketOwner;
  }

  public void setS3BucketOwner(@javax.annotation.Nullable String s3BucketOwner) {
    this.s3BucketOwner = s3BucketOwner;
  }


  public S3BucketSource s3Bucket(@javax.annotation.Nonnull String s3Bucket) {
    this.s3Bucket = s3Bucket;
    return this;
  }

  /**
   *  The S3 bucket that is being imported from. 
   * @return s3Bucket
   */
  @javax.annotation.Nonnull
  public String getS3Bucket() {
    return s3Bucket;
  }

  public void setS3Bucket(@javax.annotation.Nonnull String s3Bucket) {
    this.s3Bucket = s3Bucket;
  }


  public S3BucketSource s3KeyPrefix(@javax.annotation.Nullable String s3KeyPrefix) {
    this.s3KeyPrefix = s3KeyPrefix;
    return this;
  }

  /**
   *  The key prefix shared by all S3 Objects that are being imported. 
   * @return s3KeyPrefix
   */
  @javax.annotation.Nullable
  public String getS3KeyPrefix() {
    return s3KeyPrefix;
  }

  public void setS3KeyPrefix(@javax.annotation.Nullable String s3KeyPrefix) {
    this.s3KeyPrefix = s3KeyPrefix;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    S3BucketSource s3BucketSource = (S3BucketSource) o;
    return Objects.equals(this.s3BucketOwner, s3BucketSource.s3BucketOwner) &&
        Objects.equals(this.s3Bucket, s3BucketSource.s3Bucket) &&
        Objects.equals(this.s3KeyPrefix, s3BucketSource.s3KeyPrefix);
  }

  @Override
  public int hashCode() {
    return Objects.hash(s3BucketOwner, s3Bucket, s3KeyPrefix);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class S3BucketSource {\n");
    sb.append("    s3BucketOwner: ").append(toIndentedString(s3BucketOwner)).append("\n");
    sb.append("    s3Bucket: ").append(toIndentedString(s3Bucket)).append("\n");
    sb.append("    s3KeyPrefix: ").append(toIndentedString(s3KeyPrefix)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("S3BucketOwner", "S3Bucket", "S3KeyPrefix"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("S3Bucket"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to S3BucketSource
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!S3BucketSource.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in S3BucketSource is not found in the empty JSON string", S3BucketSource.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!S3BucketSource.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `S3BucketSource` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : S3BucketSource.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("S3BucketOwner") != null && !jsonObj.get("S3BucketOwner").isJsonNull()) && !jsonObj.get("S3BucketOwner").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `S3BucketOwner` to be a primitive type in the JSON string but got `%s`", jsonObj.get("S3BucketOwner").toString()));
      }
      if (!jsonObj.get("S3Bucket").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `S3Bucket` to be a primitive type in the JSON string but got `%s`", jsonObj.get("S3Bucket").toString()));
      }
      if ((jsonObj.get("S3KeyPrefix") != null && !jsonObj.get("S3KeyPrefix").isJsonNull()) && !jsonObj.get("S3KeyPrefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `S3KeyPrefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("S3KeyPrefix").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!S3BucketSource.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'S3BucketSource' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<S3BucketSource> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(S3BucketSource.class));

       return (TypeAdapter<T>) new TypeAdapter<S3BucketSource>() {
           @Override
           public void write(JsonWriter out, S3BucketSource value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public S3BucketSource read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of S3BucketSource given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of S3BucketSource
   * @throws IOException if the JSON string is invalid with respect to S3BucketSource
   */
  public static S3BucketSource fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, S3BucketSource.class);
  }

  /**
   * Convert an instance of S3BucketSource to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

