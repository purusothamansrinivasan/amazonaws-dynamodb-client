/*
 * Amazon DynamoDB
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database, so that you don't have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.</p> <p>With DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic. You can scale up or scale down your tables' throughput capacity without downtime or performance degradation, and use the Amazon Web Services Management Console to monitor resource utilization and performance metrics.</p> <p>DynamoDB automatically spreads the data and traffic for your tables over a sufficient number of servers to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and automatically replicated across multiple Availability Zones in an Amazon Web Services Region, providing built-in high availability and data durability.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 *  Processing options for the CSV file being imported. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T14:20:21.724079+05:30[Asia/Kolkata]", comments = "Generator version: 7.15.0")
public class CsvOptions {
  public static final String SERIALIZED_NAME_DELIMITER = "Delimiter";
  @SerializedName(SERIALIZED_NAME_DELIMITER)
  @javax.annotation.Nullable
  private String delimiter;

  public static final String SERIALIZED_NAME_HEADER_LIST = "HeaderList";
  @SerializedName(SERIALIZED_NAME_HEADER_LIST)
  @javax.annotation.Nullable
  private List<String> headerList;

  public CsvOptions() {
  }

  public CsvOptions delimiter(@javax.annotation.Nullable String delimiter) {
    this.delimiter = delimiter;
    return this;
  }

  /**
   *  The delimiter used for separating items in the CSV file being imported. 
   * @return delimiter
   */
  @javax.annotation.Nullable
  public String getDelimiter() {
    return delimiter;
  }

  public void setDelimiter(@javax.annotation.Nullable String delimiter) {
    this.delimiter = delimiter;
  }


  public CsvOptions headerList(@javax.annotation.Nullable List<String> headerList) {
    this.headerList = headerList;
    return this;
  }

  public CsvOptions addHeaderListItem(String headerListItem) {
    if (this.headerList == null) {
      this.headerList = new ArrayList<>();
    }
    this.headerList.add(headerListItem);
    return this;
  }

  /**
   *  List of the headers used to specify a common header for all source CSV files being imported. If this field is specified then the first line of each CSV file is treated as data instead of the header. If this field is not specified the the first line of each CSV file is treated as the header. 
   * @return headerList
   */
  @javax.annotation.Nullable
  public List<String> getHeaderList() {
    return headerList;
  }

  public void setHeaderList(@javax.annotation.Nullable List<String> headerList) {
    this.headerList = headerList;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CsvOptions csvOptions = (CsvOptions) o;
    return Objects.equals(this.delimiter, csvOptions.delimiter) &&
        Objects.equals(this.headerList, csvOptions.headerList);
  }

  @Override
  public int hashCode() {
    return Objects.hash(delimiter, headerList);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CsvOptions {\n");
    sb.append("    delimiter: ").append(toIndentedString(delimiter)).append("\n");
    sb.append("    headerList: ").append(toIndentedString(headerList)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("Delimiter", "HeaderList"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CsvOptions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CsvOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CsvOptions is not found in the empty JSON string", CsvOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CsvOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CsvOptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Delimiter") != null && !jsonObj.get("Delimiter").isJsonNull()) && !jsonObj.get("Delimiter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Delimiter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Delimiter").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("HeaderList") != null && !jsonObj.get("HeaderList").isJsonNull() && !jsonObj.get("HeaderList").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `HeaderList` to be an array in the JSON string but got `%s`", jsonObj.get("HeaderList").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CsvOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CsvOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CsvOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CsvOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<CsvOptions>() {
           @Override
           public void write(JsonWriter out, CsvOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CsvOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CsvOptions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CsvOptions
   * @throws IOException if the JSON string is invalid with respect to CsvOptions
   */
  public static CsvOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CsvOptions.class);
  }

  /**
   * Convert an instance of CsvOptions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

