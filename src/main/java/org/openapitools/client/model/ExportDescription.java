/*
 * Amazon DynamoDB
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database, so that you don't have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.</p> <p>With DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic. You can scale up or scale down your tables' throughput capacity without downtime or performance degradation, and use the Amazon Web Services Management Console to monitor resource utilization and performance metrics.</p> <p>DynamoDB automatically spreads the data and traffic for your tables over a sufficient number of servers to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and automatically replicated across multiple Availability Zones in an Amazon Web Services Region, providing built-in high availability and data durability.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.ExportFormat;
import org.openapitools.client.model.ExportStatus;
import org.openapitools.client.model.S3SseAlgorithm;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents the properties of the exported table.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T14:20:21.724079+05:30[Asia/Kolkata]", comments = "Generator version: 7.15.0")
public class ExportDescription {
  public static final String SERIALIZED_NAME_EXPORT_ARN = "ExportArn";
  @SerializedName(SERIALIZED_NAME_EXPORT_ARN)
  @javax.annotation.Nullable
  private String exportArn;

  public static final String SERIALIZED_NAME_EXPORT_STATUS = "ExportStatus";
  @SerializedName(SERIALIZED_NAME_EXPORT_STATUS)
  @javax.annotation.Nullable
  private ExportStatus exportStatus;

  public static final String SERIALIZED_NAME_START_TIME = "StartTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  @javax.annotation.Nullable
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_END_TIME = "EndTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  @javax.annotation.Nullable
  private OffsetDateTime endTime;

  public static final String SERIALIZED_NAME_EXPORT_MANIFEST = "ExportManifest";
  @SerializedName(SERIALIZED_NAME_EXPORT_MANIFEST)
  @javax.annotation.Nullable
  private String exportManifest;

  public static final String SERIALIZED_NAME_TABLE_ARN = "TableArn";
  @SerializedName(SERIALIZED_NAME_TABLE_ARN)
  @javax.annotation.Nullable
  private String tableArn;

  public static final String SERIALIZED_NAME_TABLE_ID = "TableId";
  @SerializedName(SERIALIZED_NAME_TABLE_ID)
  @javax.annotation.Nullable
  private String tableId;

  public static final String SERIALIZED_NAME_EXPORT_TIME = "ExportTime";
  @SerializedName(SERIALIZED_NAME_EXPORT_TIME)
  @javax.annotation.Nullable
  private OffsetDateTime exportTime;

  public static final String SERIALIZED_NAME_CLIENT_TOKEN = "ClientToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_TOKEN)
  @javax.annotation.Nullable
  private String clientToken;

  public static final String SERIALIZED_NAME_S3_BUCKET = "S3Bucket";
  @SerializedName(SERIALIZED_NAME_S3_BUCKET)
  @javax.annotation.Nullable
  private String s3Bucket;

  public static final String SERIALIZED_NAME_S3_BUCKET_OWNER = "S3BucketOwner";
  @SerializedName(SERIALIZED_NAME_S3_BUCKET_OWNER)
  @javax.annotation.Nullable
  private String s3BucketOwner;

  public static final String SERIALIZED_NAME_S3_PREFIX = "S3Prefix";
  @SerializedName(SERIALIZED_NAME_S3_PREFIX)
  @javax.annotation.Nullable
  private String s3Prefix;

  public static final String SERIALIZED_NAME_S3_SSE_ALGORITHM = "S3SseAlgorithm";
  @SerializedName(SERIALIZED_NAME_S3_SSE_ALGORITHM)
  @javax.annotation.Nullable
  private S3SseAlgorithm s3SseAlgorithm;

  public static final String SERIALIZED_NAME_S3_SSE_KMS_KEY_ID = "S3SseKmsKeyId";
  @SerializedName(SERIALIZED_NAME_S3_SSE_KMS_KEY_ID)
  @javax.annotation.Nullable
  private String s3SseKmsKeyId;

  public static final String SERIALIZED_NAME_FAILURE_CODE = "FailureCode";
  @SerializedName(SERIALIZED_NAME_FAILURE_CODE)
  @javax.annotation.Nullable
  private String failureCode;

  public static final String SERIALIZED_NAME_FAILURE_MESSAGE = "FailureMessage";
  @SerializedName(SERIALIZED_NAME_FAILURE_MESSAGE)
  @javax.annotation.Nullable
  private String failureMessage;

  public static final String SERIALIZED_NAME_EXPORT_FORMAT = "ExportFormat";
  @SerializedName(SERIALIZED_NAME_EXPORT_FORMAT)
  @javax.annotation.Nullable
  private ExportFormat exportFormat;

  public static final String SERIALIZED_NAME_BILLED_SIZE_BYTES = "BilledSizeBytes";
  @SerializedName(SERIALIZED_NAME_BILLED_SIZE_BYTES)
  @javax.annotation.Nullable
  private Integer billedSizeBytes;

  public static final String SERIALIZED_NAME_ITEM_COUNT = "ItemCount";
  @SerializedName(SERIALIZED_NAME_ITEM_COUNT)
  @javax.annotation.Nullable
  private Integer itemCount;

  public ExportDescription() {
  }

  public ExportDescription exportArn(@javax.annotation.Nullable String exportArn) {
    this.exportArn = exportArn;
    return this;
  }

  /**
   * The Amazon Resource Name (ARN) of the table export.
   * @return exportArn
   */
  @javax.annotation.Nullable
  public String getExportArn() {
    return exportArn;
  }

  public void setExportArn(@javax.annotation.Nullable String exportArn) {
    this.exportArn = exportArn;
  }


  public ExportDescription exportStatus(@javax.annotation.Nullable ExportStatus exportStatus) {
    this.exportStatus = exportStatus;
    return this;
  }

  /**
   * Export can be in one of the following states: IN_PROGRESS, COMPLETED, or FAILED.
   * @return exportStatus
   */
  @javax.annotation.Nullable
  public ExportStatus getExportStatus() {
    return exportStatus;
  }

  public void setExportStatus(@javax.annotation.Nullable ExportStatus exportStatus) {
    this.exportStatus = exportStatus;
  }


  public ExportDescription startTime(@javax.annotation.Nullable OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * The time at which the export task began.
   * @return startTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(@javax.annotation.Nullable OffsetDateTime startTime) {
    this.startTime = startTime;
  }


  public ExportDescription endTime(@javax.annotation.Nullable OffsetDateTime endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * The time at which the export task completed.
   * @return endTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndTime() {
    return endTime;
  }

  public void setEndTime(@javax.annotation.Nullable OffsetDateTime endTime) {
    this.endTime = endTime;
  }


  public ExportDescription exportManifest(@javax.annotation.Nullable String exportManifest) {
    this.exportManifest = exportManifest;
    return this;
  }

  /**
   * The name of the manifest file for the export task.
   * @return exportManifest
   */
  @javax.annotation.Nullable
  public String getExportManifest() {
    return exportManifest;
  }

  public void setExportManifest(@javax.annotation.Nullable String exportManifest) {
    this.exportManifest = exportManifest;
  }


  public ExportDescription tableArn(@javax.annotation.Nullable String tableArn) {
    this.tableArn = tableArn;
    return this;
  }

  /**
   * The Amazon Resource Name (ARN) of the table that was exported.
   * @return tableArn
   */
  @javax.annotation.Nullable
  public String getTableArn() {
    return tableArn;
  }

  public void setTableArn(@javax.annotation.Nullable String tableArn) {
    this.tableArn = tableArn;
  }


  public ExportDescription tableId(@javax.annotation.Nullable String tableId) {
    this.tableId = tableId;
    return this;
  }

  /**
   * Unique ID of the table that was exported.
   * @return tableId
   */
  @javax.annotation.Nullable
  public String getTableId() {
    return tableId;
  }

  public void setTableId(@javax.annotation.Nullable String tableId) {
    this.tableId = tableId;
  }


  public ExportDescription exportTime(@javax.annotation.Nullable OffsetDateTime exportTime) {
    this.exportTime = exportTime;
    return this;
  }

  /**
   * Point in time from which table data was exported.
   * @return exportTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getExportTime() {
    return exportTime;
  }

  public void setExportTime(@javax.annotation.Nullable OffsetDateTime exportTime) {
    this.exportTime = exportTime;
  }


  public ExportDescription clientToken(@javax.annotation.Nullable String clientToken) {
    this.clientToken = clientToken;
    return this;
  }

  /**
   * The client token that was provided for the export task. A client token makes calls to &lt;code&gt;ExportTableToPointInTimeInput&lt;/code&gt; idempotent, meaning that multiple identical calls have the same effect as one single call.
   * @return clientToken
   */
  @javax.annotation.Nullable
  public String getClientToken() {
    return clientToken;
  }

  public void setClientToken(@javax.annotation.Nullable String clientToken) {
    this.clientToken = clientToken;
  }


  public ExportDescription s3Bucket(@javax.annotation.Nullable String s3Bucket) {
    this.s3Bucket = s3Bucket;
    return this;
  }

  /**
   * The name of the Amazon S3 bucket containing the export.
   * @return s3Bucket
   */
  @javax.annotation.Nullable
  public String getS3Bucket() {
    return s3Bucket;
  }

  public void setS3Bucket(@javax.annotation.Nullable String s3Bucket) {
    this.s3Bucket = s3Bucket;
  }


  public ExportDescription s3BucketOwner(@javax.annotation.Nullable String s3BucketOwner) {
    this.s3BucketOwner = s3BucketOwner;
    return this;
  }

  /**
   * The ID of the Amazon Web Services account that owns the bucket containing the export.
   * @return s3BucketOwner
   */
  @javax.annotation.Nullable
  public String getS3BucketOwner() {
    return s3BucketOwner;
  }

  public void setS3BucketOwner(@javax.annotation.Nullable String s3BucketOwner) {
    this.s3BucketOwner = s3BucketOwner;
  }


  public ExportDescription s3Prefix(@javax.annotation.Nullable String s3Prefix) {
    this.s3Prefix = s3Prefix;
    return this;
  }

  /**
   * The Amazon S3 bucket prefix used as the file name and path of the exported snapshot.
   * @return s3Prefix
   */
  @javax.annotation.Nullable
  public String getS3Prefix() {
    return s3Prefix;
  }

  public void setS3Prefix(@javax.annotation.Nullable String s3Prefix) {
    this.s3Prefix = s3Prefix;
  }


  public ExportDescription s3SseAlgorithm(@javax.annotation.Nullable S3SseAlgorithm s3SseAlgorithm) {
    this.s3SseAlgorithm = s3SseAlgorithm;
    return this;
  }

  /**
   * &lt;p&gt;Type of encryption used on the bucket where export data is stored. Valid values for &lt;code&gt;S3SseAlgorithm&lt;/code&gt; are:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;AES256&lt;/code&gt; - server-side encryption with Amazon S3 managed keys&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;KMS&lt;/code&gt; - server-side encryption with KMS managed keys&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
   * @return s3SseAlgorithm
   */
  @javax.annotation.Nullable
  public S3SseAlgorithm getS3SseAlgorithm() {
    return s3SseAlgorithm;
  }

  public void setS3SseAlgorithm(@javax.annotation.Nullable S3SseAlgorithm s3SseAlgorithm) {
    this.s3SseAlgorithm = s3SseAlgorithm;
  }


  public ExportDescription s3SseKmsKeyId(@javax.annotation.Nullable String s3SseKmsKeyId) {
    this.s3SseKmsKeyId = s3SseKmsKeyId;
    return this;
  }

  /**
   * The ID of the KMS managed key used to encrypt the S3 bucket where export data is stored (if applicable).
   * @return s3SseKmsKeyId
   */
  @javax.annotation.Nullable
  public String getS3SseKmsKeyId() {
    return s3SseKmsKeyId;
  }

  public void setS3SseKmsKeyId(@javax.annotation.Nullable String s3SseKmsKeyId) {
    this.s3SseKmsKeyId = s3SseKmsKeyId;
  }


  public ExportDescription failureCode(@javax.annotation.Nullable String failureCode) {
    this.failureCode = failureCode;
    return this;
  }

  /**
   * Status code for the result of the failed export.
   * @return failureCode
   */
  @javax.annotation.Nullable
  public String getFailureCode() {
    return failureCode;
  }

  public void setFailureCode(@javax.annotation.Nullable String failureCode) {
    this.failureCode = failureCode;
  }


  public ExportDescription failureMessage(@javax.annotation.Nullable String failureMessage) {
    this.failureMessage = failureMessage;
    return this;
  }

  /**
   * Export failure reason description.
   * @return failureMessage
   */
  @javax.annotation.Nullable
  public String getFailureMessage() {
    return failureMessage;
  }

  public void setFailureMessage(@javax.annotation.Nullable String failureMessage) {
    this.failureMessage = failureMessage;
  }


  public ExportDescription exportFormat(@javax.annotation.Nullable ExportFormat exportFormat) {
    this.exportFormat = exportFormat;
    return this;
  }

  /**
   * The format of the exported data. Valid values for &lt;code&gt;ExportFormat&lt;/code&gt; are &lt;code&gt;DYNAMODB_JSON&lt;/code&gt; or &lt;code&gt;ION&lt;/code&gt;.
   * @return exportFormat
   */
  @javax.annotation.Nullable
  public ExportFormat getExportFormat() {
    return exportFormat;
  }

  public void setExportFormat(@javax.annotation.Nullable ExportFormat exportFormat) {
    this.exportFormat = exportFormat;
  }


  public ExportDescription billedSizeBytes(@javax.annotation.Nullable Integer billedSizeBytes) {
    this.billedSizeBytes = billedSizeBytes;
    return this;
  }

  /**
   * The billable size of the table export.
   * minimum: 0
   * @return billedSizeBytes
   */
  @javax.annotation.Nullable
  public Integer getBilledSizeBytes() {
    return billedSizeBytes;
  }

  public void setBilledSizeBytes(@javax.annotation.Nullable Integer billedSizeBytes) {
    this.billedSizeBytes = billedSizeBytes;
  }


  public ExportDescription itemCount(@javax.annotation.Nullable Integer itemCount) {
    this.itemCount = itemCount;
    return this;
  }

  /**
   * The number of items exported.
   * minimum: 0
   * @return itemCount
   */
  @javax.annotation.Nullable
  public Integer getItemCount() {
    return itemCount;
  }

  public void setItemCount(@javax.annotation.Nullable Integer itemCount) {
    this.itemCount = itemCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExportDescription exportDescription = (ExportDescription) o;
    return Objects.equals(this.exportArn, exportDescription.exportArn) &&
        Objects.equals(this.exportStatus, exportDescription.exportStatus) &&
        Objects.equals(this.startTime, exportDescription.startTime) &&
        Objects.equals(this.endTime, exportDescription.endTime) &&
        Objects.equals(this.exportManifest, exportDescription.exportManifest) &&
        Objects.equals(this.tableArn, exportDescription.tableArn) &&
        Objects.equals(this.tableId, exportDescription.tableId) &&
        Objects.equals(this.exportTime, exportDescription.exportTime) &&
        Objects.equals(this.clientToken, exportDescription.clientToken) &&
        Objects.equals(this.s3Bucket, exportDescription.s3Bucket) &&
        Objects.equals(this.s3BucketOwner, exportDescription.s3BucketOwner) &&
        Objects.equals(this.s3Prefix, exportDescription.s3Prefix) &&
        Objects.equals(this.s3SseAlgorithm, exportDescription.s3SseAlgorithm) &&
        Objects.equals(this.s3SseKmsKeyId, exportDescription.s3SseKmsKeyId) &&
        Objects.equals(this.failureCode, exportDescription.failureCode) &&
        Objects.equals(this.failureMessage, exportDescription.failureMessage) &&
        Objects.equals(this.exportFormat, exportDescription.exportFormat) &&
        Objects.equals(this.billedSizeBytes, exportDescription.billedSizeBytes) &&
        Objects.equals(this.itemCount, exportDescription.itemCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(exportArn, exportStatus, startTime, endTime, exportManifest, tableArn, tableId, exportTime, clientToken, s3Bucket, s3BucketOwner, s3Prefix, s3SseAlgorithm, s3SseKmsKeyId, failureCode, failureMessage, exportFormat, billedSizeBytes, itemCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExportDescription {\n");
    sb.append("    exportArn: ").append(toIndentedString(exportArn)).append("\n");
    sb.append("    exportStatus: ").append(toIndentedString(exportStatus)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    exportManifest: ").append(toIndentedString(exportManifest)).append("\n");
    sb.append("    tableArn: ").append(toIndentedString(tableArn)).append("\n");
    sb.append("    tableId: ").append(toIndentedString(tableId)).append("\n");
    sb.append("    exportTime: ").append(toIndentedString(exportTime)).append("\n");
    sb.append("    clientToken: ").append(toIndentedString(clientToken)).append("\n");
    sb.append("    s3Bucket: ").append(toIndentedString(s3Bucket)).append("\n");
    sb.append("    s3BucketOwner: ").append(toIndentedString(s3BucketOwner)).append("\n");
    sb.append("    s3Prefix: ").append(toIndentedString(s3Prefix)).append("\n");
    sb.append("    s3SseAlgorithm: ").append(toIndentedString(s3SseAlgorithm)).append("\n");
    sb.append("    s3SseKmsKeyId: ").append(toIndentedString(s3SseKmsKeyId)).append("\n");
    sb.append("    failureCode: ").append(toIndentedString(failureCode)).append("\n");
    sb.append("    failureMessage: ").append(toIndentedString(failureMessage)).append("\n");
    sb.append("    exportFormat: ").append(toIndentedString(exportFormat)).append("\n");
    sb.append("    billedSizeBytes: ").append(toIndentedString(billedSizeBytes)).append("\n");
    sb.append("    itemCount: ").append(toIndentedString(itemCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("ExportArn", "ExportStatus", "StartTime", "EndTime", "ExportManifest", "TableArn", "TableId", "ExportTime", "ClientToken", "S3Bucket", "S3BucketOwner", "S3Prefix", "S3SseAlgorithm", "S3SseKmsKeyId", "FailureCode", "FailureMessage", "ExportFormat", "BilledSizeBytes", "ItemCount"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExportDescription
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExportDescription.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExportDescription is not found in the empty JSON string", ExportDescription.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExportDescription.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExportDescription` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ExportArn") != null && !jsonObj.get("ExportArn").isJsonNull()) && !jsonObj.get("ExportArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ExportArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ExportArn").toString()));
      }
      // validate the optional field `ExportStatus`
      if (jsonObj.get("ExportStatus") != null && !jsonObj.get("ExportStatus").isJsonNull()) {
        ExportStatus.validateJsonElement(jsonObj.get("ExportStatus"));
      }
      if ((jsonObj.get("ExportManifest") != null && !jsonObj.get("ExportManifest").isJsonNull()) && !jsonObj.get("ExportManifest").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ExportManifest` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ExportManifest").toString()));
      }
      if ((jsonObj.get("TableArn") != null && !jsonObj.get("TableArn").isJsonNull()) && !jsonObj.get("TableArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TableArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TableArn").toString()));
      }
      if ((jsonObj.get("TableId") != null && !jsonObj.get("TableId").isJsonNull()) && !jsonObj.get("TableId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TableId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TableId").toString()));
      }
      if ((jsonObj.get("ClientToken") != null && !jsonObj.get("ClientToken").isJsonNull()) && !jsonObj.get("ClientToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ClientToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ClientToken").toString()));
      }
      if ((jsonObj.get("S3Bucket") != null && !jsonObj.get("S3Bucket").isJsonNull()) && !jsonObj.get("S3Bucket").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `S3Bucket` to be a primitive type in the JSON string but got `%s`", jsonObj.get("S3Bucket").toString()));
      }
      if ((jsonObj.get("S3BucketOwner") != null && !jsonObj.get("S3BucketOwner").isJsonNull()) && !jsonObj.get("S3BucketOwner").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `S3BucketOwner` to be a primitive type in the JSON string but got `%s`", jsonObj.get("S3BucketOwner").toString()));
      }
      if ((jsonObj.get("S3Prefix") != null && !jsonObj.get("S3Prefix").isJsonNull()) && !jsonObj.get("S3Prefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `S3Prefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("S3Prefix").toString()));
      }
      // validate the optional field `S3SseAlgorithm`
      if (jsonObj.get("S3SseAlgorithm") != null && !jsonObj.get("S3SseAlgorithm").isJsonNull()) {
        S3SseAlgorithm.validateJsonElement(jsonObj.get("S3SseAlgorithm"));
      }
      if ((jsonObj.get("S3SseKmsKeyId") != null && !jsonObj.get("S3SseKmsKeyId").isJsonNull()) && !jsonObj.get("S3SseKmsKeyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `S3SseKmsKeyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("S3SseKmsKeyId").toString()));
      }
      if ((jsonObj.get("FailureCode") != null && !jsonObj.get("FailureCode").isJsonNull()) && !jsonObj.get("FailureCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FailureCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FailureCode").toString()));
      }
      if ((jsonObj.get("FailureMessage") != null && !jsonObj.get("FailureMessage").isJsonNull()) && !jsonObj.get("FailureMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FailureMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FailureMessage").toString()));
      }
      // validate the optional field `ExportFormat`
      if (jsonObj.get("ExportFormat") != null && !jsonObj.get("ExportFormat").isJsonNull()) {
        ExportFormat.validateJsonElement(jsonObj.get("ExportFormat"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExportDescription.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExportDescription' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExportDescription> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExportDescription.class));

       return (TypeAdapter<T>) new TypeAdapter<ExportDescription>() {
           @Override
           public void write(JsonWriter out, ExportDescription value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExportDescription read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExportDescription given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExportDescription
   * @throws IOException if the JSON string is invalid with respect to ExportDescription
   */
  public static ExportDescription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExportDescription.class);
  }

  /**
   * Convert an instance of ExportDescription to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

