/*
 * Amazon DynamoDB
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database, so that you don't have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.</p> <p>With DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic. You can scale up or scale down your tables' throughput capacity without downtime or performance degradation, and use the Amazon Web Services Management Console to monitor resource utilization and performance metrics.</p> <p>DynamoDB automatically spreads the data and traffic for your tables over a sufficient number of servers to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and automatically replicated across multiple Availability Zones in an Amazon Web Services Region, providing built-in high availability and data durability.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ContinuousBackupsStatus;
import org.openapitools.client.model.PointInTimeRecoveryDescription;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents the continuous backups and point in time recovery settings on the table.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T14:20:21.724079+05:30[Asia/Kolkata]", comments = "Generator version: 7.15.0")
public class ContinuousBackupsDescription {
  public static final String SERIALIZED_NAME_CONTINUOUS_BACKUPS_STATUS = "ContinuousBackupsStatus";
  @SerializedName(SERIALIZED_NAME_CONTINUOUS_BACKUPS_STATUS)
  @javax.annotation.Nonnull
  private ContinuousBackupsStatus continuousBackupsStatus;

  public static final String SERIALIZED_NAME_POINT_IN_TIME_RECOVERY_DESCRIPTION = "PointInTimeRecoveryDescription";
  @SerializedName(SERIALIZED_NAME_POINT_IN_TIME_RECOVERY_DESCRIPTION)
  @javax.annotation.Nullable
  private PointInTimeRecoveryDescription pointInTimeRecoveryDescription;

  public ContinuousBackupsDescription() {
  }

  public ContinuousBackupsDescription continuousBackupsStatus(@javax.annotation.Nonnull ContinuousBackupsStatus continuousBackupsStatus) {
    this.continuousBackupsStatus = continuousBackupsStatus;
    return this;
  }

  /**
   *  &lt;code&gt;ContinuousBackupsStatus&lt;/code&gt; can be one of the following states: ENABLED, DISABLED
   * @return continuousBackupsStatus
   */
  @javax.annotation.Nonnull
  public ContinuousBackupsStatus getContinuousBackupsStatus() {
    return continuousBackupsStatus;
  }

  public void setContinuousBackupsStatus(@javax.annotation.Nonnull ContinuousBackupsStatus continuousBackupsStatus) {
    this.continuousBackupsStatus = continuousBackupsStatus;
  }


  public ContinuousBackupsDescription pointInTimeRecoveryDescription(@javax.annotation.Nullable PointInTimeRecoveryDescription pointInTimeRecoveryDescription) {
    this.pointInTimeRecoveryDescription = pointInTimeRecoveryDescription;
    return this;
  }

  /**
   * The description of the point in time recovery settings applied to the table.
   * @return pointInTimeRecoveryDescription
   */
  @javax.annotation.Nullable
  public PointInTimeRecoveryDescription getPointInTimeRecoveryDescription() {
    return pointInTimeRecoveryDescription;
  }

  public void setPointInTimeRecoveryDescription(@javax.annotation.Nullable PointInTimeRecoveryDescription pointInTimeRecoveryDescription) {
    this.pointInTimeRecoveryDescription = pointInTimeRecoveryDescription;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContinuousBackupsDescription continuousBackupsDescription = (ContinuousBackupsDescription) o;
    return Objects.equals(this.continuousBackupsStatus, continuousBackupsDescription.continuousBackupsStatus) &&
        Objects.equals(this.pointInTimeRecoveryDescription, continuousBackupsDescription.pointInTimeRecoveryDescription);
  }

  @Override
  public int hashCode() {
    return Objects.hash(continuousBackupsStatus, pointInTimeRecoveryDescription);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContinuousBackupsDescription {\n");
    sb.append("    continuousBackupsStatus: ").append(toIndentedString(continuousBackupsStatus)).append("\n");
    sb.append("    pointInTimeRecoveryDescription: ").append(toIndentedString(pointInTimeRecoveryDescription)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("ContinuousBackupsStatus", "PointInTimeRecoveryDescription"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("ContinuousBackupsStatus"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ContinuousBackupsDescription
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContinuousBackupsDescription.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContinuousBackupsDescription is not found in the empty JSON string", ContinuousBackupsDescription.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ContinuousBackupsDescription.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContinuousBackupsDescription` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ContinuousBackupsDescription.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `ContinuousBackupsStatus`
      ContinuousBackupsStatus.validateJsonElement(jsonObj.get("ContinuousBackupsStatus"));
      // validate the optional field `PointInTimeRecoveryDescription`
      if (jsonObj.get("PointInTimeRecoveryDescription") != null && !jsonObj.get("PointInTimeRecoveryDescription").isJsonNull()) {
        PointInTimeRecoveryDescription.validateJsonElement(jsonObj.get("PointInTimeRecoveryDescription"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContinuousBackupsDescription.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContinuousBackupsDescription' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContinuousBackupsDescription> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContinuousBackupsDescription.class));

       return (TypeAdapter<T>) new TypeAdapter<ContinuousBackupsDescription>() {
           @Override
           public void write(JsonWriter out, ContinuousBackupsDescription value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContinuousBackupsDescription read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ContinuousBackupsDescription given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ContinuousBackupsDescription
   * @throws IOException if the JSON string is invalid with respect to ContinuousBackupsDescription
   */
  public static ContinuousBackupsDescription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContinuousBackupsDescription.class);
  }

  /**
   * Convert an instance of ContinuousBackupsDescription to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

