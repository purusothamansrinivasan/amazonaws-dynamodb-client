/*
 * Amazon DynamoDB
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database, so that you don't have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.</p> <p>With DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic. You can scale up or scale down your tables' throughput capacity without downtime or performance degradation, and use the Amazon Web Services Management Console to monitor resource utilization and performance metrics.</p> <p>DynamoDB automatically spreads the data and traffic for your tables over a sufficient number of servers to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and automatically replicated across multiple Availability Zones in an Amazon Web Services Region, providing built-in high availability and data durability.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AttributeValue;
import org.openapitools.client.model.ComparisonOperator;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;Represents a condition to be compared with an attribute value. This condition can be used with &lt;code&gt;DeleteItem&lt;/code&gt;, &lt;code&gt;PutItem&lt;/code&gt;, or &lt;code&gt;UpdateItem&lt;/code&gt; operations; if the comparison evaluates to true, the operation succeeds; if not, the operation fails. You can use &lt;code&gt;ExpectedAttributeValue&lt;/code&gt; in one of two different ways:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Use &lt;code&gt;AttributeValueList&lt;/code&gt; to specify one or more values to compare against an attribute. Use &lt;code&gt;ComparisonOperator&lt;/code&gt; to specify how you want to perform the comparison. If the comparison evaluates to true, then the conditional operation succeeds.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;code&gt;Value&lt;/code&gt; to specify a value that DynamoDB will compare against an attribute. If the values match, then &lt;code&gt;ExpectedAttributeValue&lt;/code&gt; evaluates to true and the conditional operation succeeds. Optionally, you can also set &lt;code&gt;Exists&lt;/code&gt; to false, indicating that you &lt;i&gt;do not&lt;/i&gt; expect to find the attribute value in the table. In this case, the conditional operation succeeds only if the comparison evaluates to false.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; &lt;code&gt;Value&lt;/code&gt; and &lt;code&gt;Exists&lt;/code&gt; are incompatible with &lt;code&gt;AttributeValueList&lt;/code&gt; and &lt;code&gt;ComparisonOperator&lt;/code&gt;. Note that if you use both sets of parameters at once, DynamoDB will return a &lt;code&gt;ValidationException&lt;/code&gt; exception.&lt;/p&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T14:20:21.724079+05:30[Asia/Kolkata]", comments = "Generator version: 7.15.0")
public class ExpectedAttributeValue {
  public static final String SERIALIZED_NAME_VALUE = "Value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  @javax.annotation.Nullable
  private AttributeValue value;

  public static final String SERIALIZED_NAME_EXISTS = "Exists";
  @SerializedName(SERIALIZED_NAME_EXISTS)
  @javax.annotation.Nullable
  private Boolean exists;

  public static final String SERIALIZED_NAME_COMPARISON_OPERATOR = "ComparisonOperator";
  @SerializedName(SERIALIZED_NAME_COMPARISON_OPERATOR)
  @javax.annotation.Nullable
  private ComparisonOperator comparisonOperator;

  public static final String SERIALIZED_NAME_ATTRIBUTE_VALUE_LIST = "AttributeValueList";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTE_VALUE_LIST)
  @javax.annotation.Nullable
  private List<AttributeValue> attributeValueList;

  public ExpectedAttributeValue() {
  }

  public ExpectedAttributeValue value(@javax.annotation.Nullable AttributeValue value) {
    this.value = value;
    return this;
  }

  /**
   * &lt;p&gt;Represents the data for the expected attribute.&lt;/p&gt; &lt;p&gt;Each attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes\&quot;&gt;Data Types&lt;/a&gt; in the &lt;i&gt;Amazon DynamoDB Developer Guide&lt;/i&gt;.&lt;/p&gt;
   * @return value
   */
  @javax.annotation.Nullable
  public AttributeValue getValue() {
    return value;
  }

  public void setValue(@javax.annotation.Nullable AttributeValue value) {
    this.value = value;
  }


  public ExpectedAttributeValue exists(@javax.annotation.Nullable Boolean exists) {
    this.exists = exists;
    return this;
  }

  /**
   * &lt;p&gt;Causes DynamoDB to evaluate the value before attempting a conditional operation:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If &lt;code&gt;Exists&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, DynamoDB will check to see if that attribute value already exists in the table. If it is found, then the operation succeeds. If it is not found, the operation fails with a &lt;code&gt;ConditionCheckFailedException&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If &lt;code&gt;Exists&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;, DynamoDB assumes that the attribute value does not exist in the table. If in fact the value does not exist, then the assumption is valid and the operation succeeds. If the value is found, despite the assumption that it does not exist, the operation fails with a &lt;code&gt;ConditionCheckFailedException&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The default setting for &lt;code&gt;Exists&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;. If you supply a &lt;code&gt;Value&lt;/code&gt; all by itself, DynamoDB assumes the attribute exists: You don&#39;t have to set &lt;code&gt;Exists&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;, because it is implied.&lt;/p&gt; &lt;p&gt;DynamoDB returns a &lt;code&gt;ValidationException&lt;/code&gt; if:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Exists&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; but there is no &lt;code&gt;Value&lt;/code&gt; to check. (You expect a value to exist, but don&#39;t specify what that value is.)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Exists&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt; but you also provide a &lt;code&gt;Value&lt;/code&gt;. (You cannot expect an attribute to have a value, while also expecting it not to exist.)&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
   * @return exists
   */
  @javax.annotation.Nullable
  public Boolean getExists() {
    return exists;
  }

  public void setExists(@javax.annotation.Nullable Boolean exists) {
    this.exists = exists;
  }


  public ExpectedAttributeValue comparisonOperator(@javax.annotation.Nullable ComparisonOperator comparisonOperator) {
    this.comparisonOperator = comparisonOperator;
    return this;
  }

  /**
   * &lt;p&gt;A comparator for evaluating attributes in the &lt;code&gt;AttributeValueList&lt;/code&gt;. For example, equals, greater than, less than, etc.&lt;/p&gt; &lt;p&gt;The following comparison operators are available:&lt;/p&gt; &lt;p&gt; &lt;code&gt;EQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS | BEGINS_WITH | IN | BETWEEN&lt;/code&gt; &lt;/p&gt; &lt;p&gt;The following are descriptions of each comparison operator.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;EQ&lt;/code&gt; : Equal. &lt;code&gt;EQ&lt;/code&gt; is supported for all data types, including lists and maps.&lt;/p&gt; &lt;p&gt; &lt;code&gt;AttributeValueList&lt;/code&gt; can contain only one &lt;code&gt;AttributeValue&lt;/code&gt; element of type String, Number, Binary, String Set, Number Set, or Binary Set. If an item contains an &lt;code&gt;AttributeValue&lt;/code&gt; element of a different type than the one provided in the request, the value does not match. For example, &lt;code&gt;{\&quot;S\&quot;:\&quot;6\&quot;}&lt;/code&gt; does not equal &lt;code&gt;{\&quot;N\&quot;:\&quot;6\&quot;}&lt;/code&gt;. Also, &lt;code&gt;{\&quot;N\&quot;:\&quot;6\&quot;}&lt;/code&gt; does not equal &lt;code&gt;{\&quot;NS\&quot;:[\&quot;6\&quot;, \&quot;2\&quot;, \&quot;1\&quot;]}&lt;/code&gt;.&lt;/p&gt; &lt;p/&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;NE&lt;/code&gt; : Not equal. &lt;code&gt;NE&lt;/code&gt; is supported for all data types, including lists and maps.&lt;/p&gt; &lt;p&gt; &lt;code&gt;AttributeValueList&lt;/code&gt; can contain only one &lt;code&gt;AttributeValue&lt;/code&gt; of type String, Number, Binary, String Set, Number Set, or Binary Set. If an item contains an &lt;code&gt;AttributeValue&lt;/code&gt; of a different type than the one provided in the request, the value does not match. For example, &lt;code&gt;{\&quot;S\&quot;:\&quot;6\&quot;}&lt;/code&gt; does not equal &lt;code&gt;{\&quot;N\&quot;:\&quot;6\&quot;}&lt;/code&gt;. Also, &lt;code&gt;{\&quot;N\&quot;:\&quot;6\&quot;}&lt;/code&gt; does not equal &lt;code&gt;{\&quot;NS\&quot;:[\&quot;6\&quot;, \&quot;2\&quot;, \&quot;1\&quot;]}&lt;/code&gt;.&lt;/p&gt; &lt;p/&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;LE&lt;/code&gt; : Less than or equal. &lt;/p&gt; &lt;p&gt; &lt;code&gt;AttributeValueList&lt;/code&gt; can contain only one &lt;code&gt;AttributeValue&lt;/code&gt; element of type String, Number, or Binary (not a set type). If an item contains an &lt;code&gt;AttributeValue&lt;/code&gt; element of a different type than the one provided in the request, the value does not match. For example, &lt;code&gt;{\&quot;S\&quot;:\&quot;6\&quot;}&lt;/code&gt; does not equal &lt;code&gt;{\&quot;N\&quot;:\&quot;6\&quot;}&lt;/code&gt;. Also, &lt;code&gt;{\&quot;N\&quot;:\&quot;6\&quot;}&lt;/code&gt; does not compare to &lt;code&gt;{\&quot;NS\&quot;:[\&quot;6\&quot;, \&quot;2\&quot;, \&quot;1\&quot;]}&lt;/code&gt;.&lt;/p&gt; &lt;p/&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;LT&lt;/code&gt; : Less than. &lt;/p&gt; &lt;p&gt; &lt;code&gt;AttributeValueList&lt;/code&gt; can contain only one &lt;code&gt;AttributeValue&lt;/code&gt; of type String, Number, or Binary (not a set type). If an item contains an &lt;code&gt;AttributeValue&lt;/code&gt; element of a different type than the one provided in the request, the value does not match. For example, &lt;code&gt;{\&quot;S\&quot;:\&quot;6\&quot;}&lt;/code&gt; does not equal &lt;code&gt;{\&quot;N\&quot;:\&quot;6\&quot;}&lt;/code&gt;. Also, &lt;code&gt;{\&quot;N\&quot;:\&quot;6\&quot;}&lt;/code&gt; does not compare to &lt;code&gt;{\&quot;NS\&quot;:[\&quot;6\&quot;, \&quot;2\&quot;, \&quot;1\&quot;]}&lt;/code&gt;.&lt;/p&gt; &lt;p/&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GE&lt;/code&gt; : Greater than or equal. &lt;/p&gt; &lt;p&gt; &lt;code&gt;AttributeValueList&lt;/code&gt; can contain only one &lt;code&gt;AttributeValue&lt;/code&gt; element of type String, Number, or Binary (not a set type). If an item contains an &lt;code&gt;AttributeValue&lt;/code&gt; element of a different type than the one provided in the request, the value does not match. For example, &lt;code&gt;{\&quot;S\&quot;:\&quot;6\&quot;}&lt;/code&gt; does not equal &lt;code&gt;{\&quot;N\&quot;:\&quot;6\&quot;}&lt;/code&gt;. Also, &lt;code&gt;{\&quot;N\&quot;:\&quot;6\&quot;}&lt;/code&gt; does not compare to &lt;code&gt;{\&quot;NS\&quot;:[\&quot;6\&quot;, \&quot;2\&quot;, \&quot;1\&quot;]}&lt;/code&gt;.&lt;/p&gt; &lt;p/&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GT&lt;/code&gt; : Greater than. &lt;/p&gt; &lt;p&gt; &lt;code&gt;AttributeValueList&lt;/code&gt; can contain only one &lt;code&gt;AttributeValue&lt;/code&gt; element of type String, Number, or Binary (not a set type). If an item contains an &lt;code&gt;AttributeValue&lt;/code&gt; element of a different type than the one provided in the request, the value does not match. For example, &lt;code&gt;{\&quot;S\&quot;:\&quot;6\&quot;}&lt;/code&gt; does not equal &lt;code&gt;{\&quot;N\&quot;:\&quot;6\&quot;}&lt;/code&gt;. Also, &lt;code&gt;{\&quot;N\&quot;:\&quot;6\&quot;}&lt;/code&gt; does not compare to &lt;code&gt;{\&quot;NS\&quot;:[\&quot;6\&quot;, \&quot;2\&quot;, \&quot;1\&quot;]}&lt;/code&gt;.&lt;/p&gt; &lt;p/&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;NOT_NULL&lt;/code&gt; : The attribute exists. &lt;code&gt;NOT_NULL&lt;/code&gt; is supported for all data types, including lists and maps.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operator tests for the existence of an attribute, not its data type. If the data type of attribute \&quot;&lt;code&gt;a&lt;/code&gt;\&quot; is null, and you evaluate it using &lt;code&gt;NOT_NULL&lt;/code&gt;, the result is a Boolean &lt;code&gt;true&lt;/code&gt;. This result is because the attribute \&quot;&lt;code&gt;a&lt;/code&gt;\&quot; exists; its data type is not relevant to the &lt;code&gt;NOT_NULL&lt;/code&gt; comparison operator.&lt;/p&gt; &lt;/note&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;NULL&lt;/code&gt; : The attribute does not exist. &lt;code&gt;NULL&lt;/code&gt; is supported for all data types, including lists and maps.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operator tests for the nonexistence of an attribute, not its data type. If the data type of attribute \&quot;&lt;code&gt;a&lt;/code&gt;\&quot; is null, and you evaluate it using &lt;code&gt;NULL&lt;/code&gt;, the result is a Boolean &lt;code&gt;false&lt;/code&gt;. This is because the attribute \&quot;&lt;code&gt;a&lt;/code&gt;\&quot; exists; its data type is not relevant to the &lt;code&gt;NULL&lt;/code&gt; comparison operator.&lt;/p&gt; &lt;/note&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;CONTAINS&lt;/code&gt; : Checks for a subsequence, or value in a set.&lt;/p&gt; &lt;p&gt; &lt;code&gt;AttributeValueList&lt;/code&gt; can contain only one &lt;code&gt;AttributeValue&lt;/code&gt; element of type String, Number, or Binary (not a set type). If the target attribute of the comparison is of type String, then the operator checks for a substring match. If the target attribute of the comparison is of type Binary, then the operator looks for a subsequence of the target that matches the input. If the target attribute of the comparison is a set (\&quot;&lt;code&gt;SS&lt;/code&gt;\&quot;, \&quot;&lt;code&gt;NS&lt;/code&gt;\&quot;, or \&quot;&lt;code&gt;BS&lt;/code&gt;\&quot;), then the operator evaluates to true if it finds an exact match with any member of the set.&lt;/p&gt; &lt;p&gt;CONTAINS is supported for lists: When evaluating \&quot;&lt;code&gt;a CONTAINS b&lt;/code&gt;\&quot;, \&quot;&lt;code&gt;a&lt;/code&gt;\&quot; can be a list; however, \&quot;&lt;code&gt;b&lt;/code&gt;\&quot; cannot be a set, a map, or a list.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;NOT_CONTAINS&lt;/code&gt; : Checks for absence of a subsequence, or absence of a value in a set.&lt;/p&gt; &lt;p&gt; &lt;code&gt;AttributeValueList&lt;/code&gt; can contain only one &lt;code&gt;AttributeValue&lt;/code&gt; element of type String, Number, or Binary (not a set type). If the target attribute of the comparison is a String, then the operator checks for the absence of a substring match. If the target attribute of the comparison is Binary, then the operator checks for the absence of a subsequence of the target that matches the input. If the target attribute of the comparison is a set (\&quot;&lt;code&gt;SS&lt;/code&gt;\&quot;, \&quot;&lt;code&gt;NS&lt;/code&gt;\&quot;, or \&quot;&lt;code&gt;BS&lt;/code&gt;\&quot;), then the operator evaluates to true if it &lt;i&gt;does not&lt;/i&gt; find an exact match with any member of the set.&lt;/p&gt; &lt;p&gt;NOT_CONTAINS is supported for lists: When evaluating \&quot;&lt;code&gt;a NOT CONTAINS b&lt;/code&gt;\&quot;, \&quot;&lt;code&gt;a&lt;/code&gt;\&quot; can be a list; however, \&quot;&lt;code&gt;b&lt;/code&gt;\&quot; cannot be a set, a map, or a list.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;BEGINS_WITH&lt;/code&gt; : Checks for a prefix. &lt;/p&gt; &lt;p&gt; &lt;code&gt;AttributeValueList&lt;/code&gt; can contain only one &lt;code&gt;AttributeValue&lt;/code&gt; of type String or Binary (not a Number or a set type). The target attribute of the comparison must be of type String or Binary (not a Number or a set type).&lt;/p&gt; &lt;p/&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;IN&lt;/code&gt; : Checks for matching elements in a list.&lt;/p&gt; &lt;p&gt; &lt;code&gt;AttributeValueList&lt;/code&gt; can contain one or more &lt;code&gt;AttributeValue&lt;/code&gt; elements of type String, Number, or Binary. These attributes are compared against an existing attribute of an item. If any elements of the input are equal to the item attribute, the expression evaluates to true.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;BETWEEN&lt;/code&gt; : Greater than or equal to the first value, and less than or equal to the second value. &lt;/p&gt; &lt;p&gt; &lt;code&gt;AttributeValueList&lt;/code&gt; must contain two &lt;code&gt;AttributeValue&lt;/code&gt; elements of the same type, either String, Number, or Binary (not a set type). A target attribute matches if the target value is greater than, or equal to, the first element and less than, or equal to, the second element. If an item contains an &lt;code&gt;AttributeValue&lt;/code&gt; element of a different type than the one provided in the request, the value does not match. For example, &lt;code&gt;{\&quot;S\&quot;:\&quot;6\&quot;}&lt;/code&gt; does not compare to &lt;code&gt;{\&quot;N\&quot;:\&quot;6\&quot;}&lt;/code&gt;. Also, &lt;code&gt;{\&quot;N\&quot;:\&quot;6\&quot;}&lt;/code&gt; does not compare to &lt;code&gt;{\&quot;NS\&quot;:[\&quot;6\&quot;, \&quot;2\&quot;, \&quot;1\&quot;]}&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
   * @return comparisonOperator
   */
  @javax.annotation.Nullable
  public ComparisonOperator getComparisonOperator() {
    return comparisonOperator;
  }

  public void setComparisonOperator(@javax.annotation.Nullable ComparisonOperator comparisonOperator) {
    this.comparisonOperator = comparisonOperator;
  }


  public ExpectedAttributeValue attributeValueList(@javax.annotation.Nullable List<AttributeValue> attributeValueList) {
    this.attributeValueList = attributeValueList;
    return this;
  }

  public ExpectedAttributeValue addAttributeValueListItem(AttributeValue attributeValueListItem) {
    if (this.attributeValueList == null) {
      this.attributeValueList = new ArrayList<>();
    }
    this.attributeValueList.add(attributeValueListItem);
    return this;
  }

  /**
   * &lt;p&gt;One or more values to evaluate against the supplied attribute. The number of values in the list depends on the &lt;code&gt;ComparisonOperator&lt;/code&gt; being used.&lt;/p&gt; &lt;p&gt;For type Number, value comparisons are numeric.&lt;/p&gt; &lt;p&gt;String value comparisons for greater than, equals, or less than are based on ASCII character code values. For example, &lt;code&gt;a&lt;/code&gt; is greater than &lt;code&gt;A&lt;/code&gt;, and &lt;code&gt;a&lt;/code&gt; is greater than &lt;code&gt;B&lt;/code&gt;. For a list of code values, see &lt;a href&#x3D;\&quot;http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters\&quot;&gt;http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;For Binary, DynamoDB treats each byte of the binary data as unsigned when it compares binary values.&lt;/p&gt; &lt;p&gt;For information on specifying data types in JSON, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataFormat.html\&quot;&gt;JSON Data Format&lt;/a&gt; in the &lt;i&gt;Amazon DynamoDB Developer Guide&lt;/i&gt;.&lt;/p&gt;
   * @return attributeValueList
   */
  @javax.annotation.Nullable
  public List<AttributeValue> getAttributeValueList() {
    return attributeValueList;
  }

  public void setAttributeValueList(@javax.annotation.Nullable List<AttributeValue> attributeValueList) {
    this.attributeValueList = attributeValueList;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExpectedAttributeValue expectedAttributeValue = (ExpectedAttributeValue) o;
    return Objects.equals(this.value, expectedAttributeValue.value) &&
        Objects.equals(this.exists, expectedAttributeValue.exists) &&
        Objects.equals(this.comparisonOperator, expectedAttributeValue.comparisonOperator) &&
        Objects.equals(this.attributeValueList, expectedAttributeValue.attributeValueList);
  }

  @Override
  public int hashCode() {
    return Objects.hash(value, exists, comparisonOperator, attributeValueList);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExpectedAttributeValue {\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    exists: ").append(toIndentedString(exists)).append("\n");
    sb.append("    comparisonOperator: ").append(toIndentedString(comparisonOperator)).append("\n");
    sb.append("    attributeValueList: ").append(toIndentedString(attributeValueList)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("Value", "Exists", "ComparisonOperator", "AttributeValueList"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExpectedAttributeValue
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExpectedAttributeValue.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExpectedAttributeValue is not found in the empty JSON string", ExpectedAttributeValue.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExpectedAttributeValue.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExpectedAttributeValue` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Value`
      if (jsonObj.get("Value") != null && !jsonObj.get("Value").isJsonNull()) {
        AttributeValue.validateJsonElement(jsonObj.get("Value"));
      }
      // validate the optional field `ComparisonOperator`
      if (jsonObj.get("ComparisonOperator") != null && !jsonObj.get("ComparisonOperator").isJsonNull()) {
        ComparisonOperator.validateJsonElement(jsonObj.get("ComparisonOperator"));
      }
      if (jsonObj.get("AttributeValueList") != null && !jsonObj.get("AttributeValueList").isJsonNull()) {
        JsonArray jsonArrayattributeValueList = jsonObj.getAsJsonArray("AttributeValueList");
        if (jsonArrayattributeValueList != null) {
          // ensure the json data is an array
          if (!jsonObj.get("AttributeValueList").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `AttributeValueList` to be an array in the JSON string but got `%s`", jsonObj.get("AttributeValueList").toString()));
          }

          // validate the optional field `AttributeValueList` (array)
          for (int i = 0; i < jsonArrayattributeValueList.size(); i++) {
            AttributeValue.validateJsonElement(jsonArrayattributeValueList.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExpectedAttributeValue.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExpectedAttributeValue' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExpectedAttributeValue> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExpectedAttributeValue.class));

       return (TypeAdapter<T>) new TypeAdapter<ExpectedAttributeValue>() {
           @Override
           public void write(JsonWriter out, ExpectedAttributeValue value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExpectedAttributeValue read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExpectedAttributeValue given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExpectedAttributeValue
   * @throws IOException if the JSON string is invalid with respect to ExpectedAttributeValue
   */
  public static ExpectedAttributeValue fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExpectedAttributeValue.class);
  }

  /**
   * Convert an instance of ExpectedAttributeValue to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

