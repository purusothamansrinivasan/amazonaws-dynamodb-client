/*
 * Amazon DynamoDB
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database, so that you don't have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.</p> <p>With DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic. You can scale up or scale down your tables' throughput capacity without downtime or performance degradation, and use the Amazon Web Services Management Console to monitor resource utilization and performance metrics.</p> <p>DynamoDB automatically spreads the data and traffic for your tables over a sufficient number of servers to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and automatically replicated across multiple Availability Zones in an Amazon Web Services Region, providing built-in high availability and data durability.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AutoScalingSettingsUpdate;
import org.openapitools.client.model.ReplicaGlobalSecondaryIndexSettingsUpdate;
import org.openapitools.client.model.TableClass;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents the settings for a global table in a Region that will be modified.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T14:20:21.724079+05:30[Asia/Kolkata]", comments = "Generator version: 7.15.0")
public class ReplicaSettingsUpdate {
  public static final String SERIALIZED_NAME_REGION_NAME = "RegionName";
  @SerializedName(SERIALIZED_NAME_REGION_NAME)
  @javax.annotation.Nonnull
  private String regionName;

  public static final String SERIALIZED_NAME_REPLICA_PROVISIONED_READ_CAPACITY_UNITS = "ReplicaProvisionedReadCapacityUnits";
  @SerializedName(SERIALIZED_NAME_REPLICA_PROVISIONED_READ_CAPACITY_UNITS)
  @javax.annotation.Nullable
  private Integer replicaProvisionedReadCapacityUnits;

  public static final String SERIALIZED_NAME_REPLICA_PROVISIONED_READ_CAPACITY_AUTO_SCALING_SETTINGS_UPDATE = "ReplicaProvisionedReadCapacityAutoScalingSettingsUpdate";
  @SerializedName(SERIALIZED_NAME_REPLICA_PROVISIONED_READ_CAPACITY_AUTO_SCALING_SETTINGS_UPDATE)
  @javax.annotation.Nullable
  private AutoScalingSettingsUpdate replicaProvisionedReadCapacityAutoScalingSettingsUpdate;

  public static final String SERIALIZED_NAME_REPLICA_GLOBAL_SECONDARY_INDEX_SETTINGS_UPDATE = "ReplicaGlobalSecondaryIndexSettingsUpdate";
  @SerializedName(SERIALIZED_NAME_REPLICA_GLOBAL_SECONDARY_INDEX_SETTINGS_UPDATE)
  @javax.annotation.Nullable
  private List<ReplicaGlobalSecondaryIndexSettingsUpdate> replicaGlobalSecondaryIndexSettingsUpdate;

  public static final String SERIALIZED_NAME_REPLICA_TABLE_CLASS = "ReplicaTableClass";
  @SerializedName(SERIALIZED_NAME_REPLICA_TABLE_CLASS)
  @javax.annotation.Nullable
  private TableClass replicaTableClass;

  public ReplicaSettingsUpdate() {
  }

  public ReplicaSettingsUpdate regionName(@javax.annotation.Nonnull String regionName) {
    this.regionName = regionName;
    return this;
  }

  /**
   * The Region of the replica to be added.
   * @return regionName
   */
  @javax.annotation.Nonnull
  public String getRegionName() {
    return regionName;
  }

  public void setRegionName(@javax.annotation.Nonnull String regionName) {
    this.regionName = regionName;
  }


  public ReplicaSettingsUpdate replicaProvisionedReadCapacityUnits(@javax.annotation.Nullable Integer replicaProvisionedReadCapacityUnits) {
    this.replicaProvisionedReadCapacityUnits = replicaProvisionedReadCapacityUnits;
    return this;
  }

  /**
   * The maximum number of strongly consistent reads consumed per second before DynamoDB returns a &lt;code&gt;ThrottlingException&lt;/code&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput\&quot;&gt;Specifying Read and Write Requirements&lt;/a&gt; in the &lt;i&gt;Amazon DynamoDB Developer Guide&lt;/i&gt;. 
   * minimum: 1
   * @return replicaProvisionedReadCapacityUnits
   */
  @javax.annotation.Nullable
  public Integer getReplicaProvisionedReadCapacityUnits() {
    return replicaProvisionedReadCapacityUnits;
  }

  public void setReplicaProvisionedReadCapacityUnits(@javax.annotation.Nullable Integer replicaProvisionedReadCapacityUnits) {
    this.replicaProvisionedReadCapacityUnits = replicaProvisionedReadCapacityUnits;
  }


  public ReplicaSettingsUpdate replicaProvisionedReadCapacityAutoScalingSettingsUpdate(@javax.annotation.Nullable AutoScalingSettingsUpdate replicaProvisionedReadCapacityAutoScalingSettingsUpdate) {
    this.replicaProvisionedReadCapacityAutoScalingSettingsUpdate = replicaProvisionedReadCapacityAutoScalingSettingsUpdate;
    return this;
  }

  /**
   * Auto scaling settings for managing a global table replica&#39;s read capacity units.
   * @return replicaProvisionedReadCapacityAutoScalingSettingsUpdate
   */
  @javax.annotation.Nullable
  public AutoScalingSettingsUpdate getReplicaProvisionedReadCapacityAutoScalingSettingsUpdate() {
    return replicaProvisionedReadCapacityAutoScalingSettingsUpdate;
  }

  public void setReplicaProvisionedReadCapacityAutoScalingSettingsUpdate(@javax.annotation.Nullable AutoScalingSettingsUpdate replicaProvisionedReadCapacityAutoScalingSettingsUpdate) {
    this.replicaProvisionedReadCapacityAutoScalingSettingsUpdate = replicaProvisionedReadCapacityAutoScalingSettingsUpdate;
  }


  public ReplicaSettingsUpdate replicaGlobalSecondaryIndexSettingsUpdate(@javax.annotation.Nullable List<ReplicaGlobalSecondaryIndexSettingsUpdate> replicaGlobalSecondaryIndexSettingsUpdate) {
    this.replicaGlobalSecondaryIndexSettingsUpdate = replicaGlobalSecondaryIndexSettingsUpdate;
    return this;
  }

  public ReplicaSettingsUpdate addReplicaGlobalSecondaryIndexSettingsUpdateItem(ReplicaGlobalSecondaryIndexSettingsUpdate replicaGlobalSecondaryIndexSettingsUpdateItem) {
    if (this.replicaGlobalSecondaryIndexSettingsUpdate == null) {
      this.replicaGlobalSecondaryIndexSettingsUpdate = new ArrayList<>();
    }
    this.replicaGlobalSecondaryIndexSettingsUpdate.add(replicaGlobalSecondaryIndexSettingsUpdateItem);
    return this;
  }

  /**
   * Represents the settings of a global secondary index for a global table that will be modified.
   * @return replicaGlobalSecondaryIndexSettingsUpdate
   */
  @javax.annotation.Nullable
  public List<ReplicaGlobalSecondaryIndexSettingsUpdate> getReplicaGlobalSecondaryIndexSettingsUpdate() {
    return replicaGlobalSecondaryIndexSettingsUpdate;
  }

  public void setReplicaGlobalSecondaryIndexSettingsUpdate(@javax.annotation.Nullable List<ReplicaGlobalSecondaryIndexSettingsUpdate> replicaGlobalSecondaryIndexSettingsUpdate) {
    this.replicaGlobalSecondaryIndexSettingsUpdate = replicaGlobalSecondaryIndexSettingsUpdate;
  }


  public ReplicaSettingsUpdate replicaTableClass(@javax.annotation.Nullable TableClass replicaTableClass) {
    this.replicaTableClass = replicaTableClass;
    return this;
  }

  /**
   * Replica-specific table class. If not specified, uses the source table&#39;s table class.
   * @return replicaTableClass
   */
  @javax.annotation.Nullable
  public TableClass getReplicaTableClass() {
    return replicaTableClass;
  }

  public void setReplicaTableClass(@javax.annotation.Nullable TableClass replicaTableClass) {
    this.replicaTableClass = replicaTableClass;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReplicaSettingsUpdate replicaSettingsUpdate = (ReplicaSettingsUpdate) o;
    return Objects.equals(this.regionName, replicaSettingsUpdate.regionName) &&
        Objects.equals(this.replicaProvisionedReadCapacityUnits, replicaSettingsUpdate.replicaProvisionedReadCapacityUnits) &&
        Objects.equals(this.replicaProvisionedReadCapacityAutoScalingSettingsUpdate, replicaSettingsUpdate.replicaProvisionedReadCapacityAutoScalingSettingsUpdate) &&
        Objects.equals(this.replicaGlobalSecondaryIndexSettingsUpdate, replicaSettingsUpdate.replicaGlobalSecondaryIndexSettingsUpdate) &&
        Objects.equals(this.replicaTableClass, replicaSettingsUpdate.replicaTableClass);
  }

  @Override
  public int hashCode() {
    return Objects.hash(regionName, replicaProvisionedReadCapacityUnits, replicaProvisionedReadCapacityAutoScalingSettingsUpdate, replicaGlobalSecondaryIndexSettingsUpdate, replicaTableClass);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReplicaSettingsUpdate {\n");
    sb.append("    regionName: ").append(toIndentedString(regionName)).append("\n");
    sb.append("    replicaProvisionedReadCapacityUnits: ").append(toIndentedString(replicaProvisionedReadCapacityUnits)).append("\n");
    sb.append("    replicaProvisionedReadCapacityAutoScalingSettingsUpdate: ").append(toIndentedString(replicaProvisionedReadCapacityAutoScalingSettingsUpdate)).append("\n");
    sb.append("    replicaGlobalSecondaryIndexSettingsUpdate: ").append(toIndentedString(replicaGlobalSecondaryIndexSettingsUpdate)).append("\n");
    sb.append("    replicaTableClass: ").append(toIndentedString(replicaTableClass)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("RegionName", "ReplicaProvisionedReadCapacityUnits", "ReplicaProvisionedReadCapacityAutoScalingSettingsUpdate", "ReplicaGlobalSecondaryIndexSettingsUpdate", "ReplicaTableClass"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("RegionName"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReplicaSettingsUpdate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReplicaSettingsUpdate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReplicaSettingsUpdate is not found in the empty JSON string", ReplicaSettingsUpdate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReplicaSettingsUpdate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReplicaSettingsUpdate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ReplicaSettingsUpdate.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("RegionName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RegionName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RegionName").toString()));
      }
      // validate the optional field `ReplicaProvisionedReadCapacityAutoScalingSettingsUpdate`
      if (jsonObj.get("ReplicaProvisionedReadCapacityAutoScalingSettingsUpdate") != null && !jsonObj.get("ReplicaProvisionedReadCapacityAutoScalingSettingsUpdate").isJsonNull()) {
        AutoScalingSettingsUpdate.validateJsonElement(jsonObj.get("ReplicaProvisionedReadCapacityAutoScalingSettingsUpdate"));
      }
      if (jsonObj.get("ReplicaGlobalSecondaryIndexSettingsUpdate") != null && !jsonObj.get("ReplicaGlobalSecondaryIndexSettingsUpdate").isJsonNull()) {
        JsonArray jsonArrayreplicaGlobalSecondaryIndexSettingsUpdate = jsonObj.getAsJsonArray("ReplicaGlobalSecondaryIndexSettingsUpdate");
        if (jsonArrayreplicaGlobalSecondaryIndexSettingsUpdate != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ReplicaGlobalSecondaryIndexSettingsUpdate").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ReplicaGlobalSecondaryIndexSettingsUpdate` to be an array in the JSON string but got `%s`", jsonObj.get("ReplicaGlobalSecondaryIndexSettingsUpdate").toString()));
          }

          // validate the optional field `ReplicaGlobalSecondaryIndexSettingsUpdate` (array)
          for (int i = 0; i < jsonArrayreplicaGlobalSecondaryIndexSettingsUpdate.size(); i++) {
            ReplicaGlobalSecondaryIndexSettingsUpdate.validateJsonElement(jsonArrayreplicaGlobalSecondaryIndexSettingsUpdate.get(i));
          };
        }
      }
      // validate the optional field `ReplicaTableClass`
      if (jsonObj.get("ReplicaTableClass") != null && !jsonObj.get("ReplicaTableClass").isJsonNull()) {
        TableClass.validateJsonElement(jsonObj.get("ReplicaTableClass"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReplicaSettingsUpdate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReplicaSettingsUpdate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReplicaSettingsUpdate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReplicaSettingsUpdate.class));

       return (TypeAdapter<T>) new TypeAdapter<ReplicaSettingsUpdate>() {
           @Override
           public void write(JsonWriter out, ReplicaSettingsUpdate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReplicaSettingsUpdate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReplicaSettingsUpdate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReplicaSettingsUpdate
   * @throws IOException if the JSON string is invalid with respect to ReplicaSettingsUpdate
   */
  public static ReplicaSettingsUpdate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReplicaSettingsUpdate.class);
  }

  /**
   * Convert an instance of ReplicaSettingsUpdate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

