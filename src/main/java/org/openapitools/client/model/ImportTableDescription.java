/*
 * Amazon DynamoDB
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database, so that you don't have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.</p> <p>With DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic. You can scale up or scale down your tables' throughput capacity without downtime or performance degradation, and use the Amazon Web Services Management Console to monitor resource utilization and performance metrics.</p> <p>DynamoDB automatically spreads the data and traffic for your tables over a sufficient number of servers to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and automatically replicated across multiple Availability Zones in an Amazon Web Services Region, providing built-in high availability and data durability.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.ImportStatus;
import org.openapitools.client.model.InputCompressionType;
import org.openapitools.client.model.InputFormat;
import org.openapitools.client.model.InputFormatOptions;
import org.openapitools.client.model.S3BucketSource;
import org.openapitools.client.model.TableCreationParameters;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 *  Represents the properties of the table being imported into. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T14:20:21.724079+05:30[Asia/Kolkata]", comments = "Generator version: 7.15.0")
public class ImportTableDescription {
  public static final String SERIALIZED_NAME_IMPORT_ARN = "ImportArn";
  @SerializedName(SERIALIZED_NAME_IMPORT_ARN)
  @javax.annotation.Nullable
  private String importArn;

  public static final String SERIALIZED_NAME_IMPORT_STATUS = "ImportStatus";
  @SerializedName(SERIALIZED_NAME_IMPORT_STATUS)
  @javax.annotation.Nullable
  private ImportStatus importStatus;

  public static final String SERIALIZED_NAME_TABLE_ARN = "TableArn";
  @SerializedName(SERIALIZED_NAME_TABLE_ARN)
  @javax.annotation.Nullable
  private String tableArn;

  public static final String SERIALIZED_NAME_TABLE_ID = "TableId";
  @SerializedName(SERIALIZED_NAME_TABLE_ID)
  @javax.annotation.Nullable
  private String tableId;

  public static final String SERIALIZED_NAME_CLIENT_TOKEN = "ClientToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_TOKEN)
  @javax.annotation.Nullable
  private String clientToken;

  public static final String SERIALIZED_NAME_S3_BUCKET_SOURCE = "S3BucketSource";
  @SerializedName(SERIALIZED_NAME_S3_BUCKET_SOURCE)
  @javax.annotation.Nullable
  private S3BucketSource s3BucketSource;

  public static final String SERIALIZED_NAME_ERROR_COUNT = "ErrorCount";
  @SerializedName(SERIALIZED_NAME_ERROR_COUNT)
  @javax.annotation.Nullable
  private Integer errorCount;

  public static final String SERIALIZED_NAME_CLOUD_WATCH_LOG_GROUP_ARN = "CloudWatchLogGroupArn";
  @SerializedName(SERIALIZED_NAME_CLOUD_WATCH_LOG_GROUP_ARN)
  @javax.annotation.Nullable
  private String cloudWatchLogGroupArn;

  public static final String SERIALIZED_NAME_INPUT_FORMAT = "InputFormat";
  @SerializedName(SERIALIZED_NAME_INPUT_FORMAT)
  @javax.annotation.Nullable
  private InputFormat inputFormat;

  public static final String SERIALIZED_NAME_INPUT_FORMAT_OPTIONS = "InputFormatOptions";
  @SerializedName(SERIALIZED_NAME_INPUT_FORMAT_OPTIONS)
  @javax.annotation.Nullable
  private InputFormatOptions inputFormatOptions;

  public static final String SERIALIZED_NAME_INPUT_COMPRESSION_TYPE = "InputCompressionType";
  @SerializedName(SERIALIZED_NAME_INPUT_COMPRESSION_TYPE)
  @javax.annotation.Nullable
  private InputCompressionType inputCompressionType;

  public static final String SERIALIZED_NAME_TABLE_CREATION_PARAMETERS = "TableCreationParameters";
  @SerializedName(SERIALIZED_NAME_TABLE_CREATION_PARAMETERS)
  @javax.annotation.Nullable
  private TableCreationParameters tableCreationParameters;

  public static final String SERIALIZED_NAME_START_TIME = "StartTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  @javax.annotation.Nullable
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_END_TIME = "EndTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  @javax.annotation.Nullable
  private OffsetDateTime endTime;

  public static final String SERIALIZED_NAME_PROCESSED_SIZE_BYTES = "ProcessedSizeBytes";
  @SerializedName(SERIALIZED_NAME_PROCESSED_SIZE_BYTES)
  @javax.annotation.Nullable
  private Integer processedSizeBytes;

  public static final String SERIALIZED_NAME_PROCESSED_ITEM_COUNT = "ProcessedItemCount";
  @SerializedName(SERIALIZED_NAME_PROCESSED_ITEM_COUNT)
  @javax.annotation.Nullable
  private Integer processedItemCount;

  public static final String SERIALIZED_NAME_IMPORTED_ITEM_COUNT = "ImportedItemCount";
  @SerializedName(SERIALIZED_NAME_IMPORTED_ITEM_COUNT)
  @javax.annotation.Nullable
  private Integer importedItemCount;

  public static final String SERIALIZED_NAME_FAILURE_CODE = "FailureCode";
  @SerializedName(SERIALIZED_NAME_FAILURE_CODE)
  @javax.annotation.Nullable
  private String failureCode;

  public static final String SERIALIZED_NAME_FAILURE_MESSAGE = "FailureMessage";
  @SerializedName(SERIALIZED_NAME_FAILURE_MESSAGE)
  @javax.annotation.Nullable
  private String failureMessage;

  public ImportTableDescription() {
  }

  public ImportTableDescription importArn(@javax.annotation.Nullable String importArn) {
    this.importArn = importArn;
    return this;
  }

  /**
   *  The Amazon Resource Number (ARN) corresponding to the import request. 
   * @return importArn
   */
  @javax.annotation.Nullable
  public String getImportArn() {
    return importArn;
  }

  public void setImportArn(@javax.annotation.Nullable String importArn) {
    this.importArn = importArn;
  }


  public ImportTableDescription importStatus(@javax.annotation.Nullable ImportStatus importStatus) {
    this.importStatus = importStatus;
    return this;
  }

  /**
   *  The status of the import. 
   * @return importStatus
   */
  @javax.annotation.Nullable
  public ImportStatus getImportStatus() {
    return importStatus;
  }

  public void setImportStatus(@javax.annotation.Nullable ImportStatus importStatus) {
    this.importStatus = importStatus;
  }


  public ImportTableDescription tableArn(@javax.annotation.Nullable String tableArn) {
    this.tableArn = tableArn;
    return this;
  }

  /**
   *  The Amazon Resource Number (ARN) of the table being imported into. 
   * @return tableArn
   */
  @javax.annotation.Nullable
  public String getTableArn() {
    return tableArn;
  }

  public void setTableArn(@javax.annotation.Nullable String tableArn) {
    this.tableArn = tableArn;
  }


  public ImportTableDescription tableId(@javax.annotation.Nullable String tableId) {
    this.tableId = tableId;
    return this;
  }

  /**
   *  The table id corresponding to the table created by import table process. 
   * @return tableId
   */
  @javax.annotation.Nullable
  public String getTableId() {
    return tableId;
  }

  public void setTableId(@javax.annotation.Nullable String tableId) {
    this.tableId = tableId;
  }


  public ImportTableDescription clientToken(@javax.annotation.Nullable String clientToken) {
    this.clientToken = clientToken;
    return this;
  }

  /**
   *  The client token that was provided for the import task. Reusing the client token on retry makes a call to &lt;code&gt;ImportTable&lt;/code&gt; idempotent. 
   * @return clientToken
   */
  @javax.annotation.Nullable
  public String getClientToken() {
    return clientToken;
  }

  public void setClientToken(@javax.annotation.Nullable String clientToken) {
    this.clientToken = clientToken;
  }


  public ImportTableDescription s3BucketSource(@javax.annotation.Nullable S3BucketSource s3BucketSource) {
    this.s3BucketSource = s3BucketSource;
    return this;
  }

  /**
   *  Values for the S3 bucket the source file is imported from. Includes bucket name (required), key prefix (optional) and bucket account owner ID (optional). 
   * @return s3BucketSource
   */
  @javax.annotation.Nullable
  public S3BucketSource getS3BucketSource() {
    return s3BucketSource;
  }

  public void setS3BucketSource(@javax.annotation.Nullable S3BucketSource s3BucketSource) {
    this.s3BucketSource = s3BucketSource;
  }


  public ImportTableDescription errorCount(@javax.annotation.Nullable Integer errorCount) {
    this.errorCount = errorCount;
    return this;
  }

  /**
   *  The number of errors occurred on importing the source file into the target table. 
   * minimum: 0
   * @return errorCount
   */
  @javax.annotation.Nullable
  public Integer getErrorCount() {
    return errorCount;
  }

  public void setErrorCount(@javax.annotation.Nullable Integer errorCount) {
    this.errorCount = errorCount;
  }


  public ImportTableDescription cloudWatchLogGroupArn(@javax.annotation.Nullable String cloudWatchLogGroupArn) {
    this.cloudWatchLogGroupArn = cloudWatchLogGroupArn;
    return this;
  }

  /**
   *  The Amazon Resource Number (ARN) of the Cloudwatch Log Group associated with the target table. 
   * @return cloudWatchLogGroupArn
   */
  @javax.annotation.Nullable
  public String getCloudWatchLogGroupArn() {
    return cloudWatchLogGroupArn;
  }

  public void setCloudWatchLogGroupArn(@javax.annotation.Nullable String cloudWatchLogGroupArn) {
    this.cloudWatchLogGroupArn = cloudWatchLogGroupArn;
  }


  public ImportTableDescription inputFormat(@javax.annotation.Nullable InputFormat inputFormat) {
    this.inputFormat = inputFormat;
    return this;
  }

  /**
   *  The format of the source data going into the target table. 
   * @return inputFormat
   */
  @javax.annotation.Nullable
  public InputFormat getInputFormat() {
    return inputFormat;
  }

  public void setInputFormat(@javax.annotation.Nullable InputFormat inputFormat) {
    this.inputFormat = inputFormat;
  }


  public ImportTableDescription inputFormatOptions(@javax.annotation.Nullable InputFormatOptions inputFormatOptions) {
    this.inputFormatOptions = inputFormatOptions;
    return this;
  }

  /**
   *  The format options for the data that was imported into the target table. There is one value, CsvOption. 
   * @return inputFormatOptions
   */
  @javax.annotation.Nullable
  public InputFormatOptions getInputFormatOptions() {
    return inputFormatOptions;
  }

  public void setInputFormatOptions(@javax.annotation.Nullable InputFormatOptions inputFormatOptions) {
    this.inputFormatOptions = inputFormatOptions;
  }


  public ImportTableDescription inputCompressionType(@javax.annotation.Nullable InputCompressionType inputCompressionType) {
    this.inputCompressionType = inputCompressionType;
    return this;
  }

  /**
   *  The compression options for the data that has been imported into the target table. The values are NONE, GZIP, or ZSTD. 
   * @return inputCompressionType
   */
  @javax.annotation.Nullable
  public InputCompressionType getInputCompressionType() {
    return inputCompressionType;
  }

  public void setInputCompressionType(@javax.annotation.Nullable InputCompressionType inputCompressionType) {
    this.inputCompressionType = inputCompressionType;
  }


  public ImportTableDescription tableCreationParameters(@javax.annotation.Nullable TableCreationParameters tableCreationParameters) {
    this.tableCreationParameters = tableCreationParameters;
    return this;
  }

  /**
   *  The parameters for the new table that is being imported into. 
   * @return tableCreationParameters
   */
  @javax.annotation.Nullable
  public TableCreationParameters getTableCreationParameters() {
    return tableCreationParameters;
  }

  public void setTableCreationParameters(@javax.annotation.Nullable TableCreationParameters tableCreationParameters) {
    this.tableCreationParameters = tableCreationParameters;
  }


  public ImportTableDescription startTime(@javax.annotation.Nullable OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   *  The time when this import task started. 
   * @return startTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(@javax.annotation.Nullable OffsetDateTime startTime) {
    this.startTime = startTime;
  }


  public ImportTableDescription endTime(@javax.annotation.Nullable OffsetDateTime endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   *  The time at which the creation of the table associated with this import task completed. 
   * @return endTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndTime() {
    return endTime;
  }

  public void setEndTime(@javax.annotation.Nullable OffsetDateTime endTime) {
    this.endTime = endTime;
  }


  public ImportTableDescription processedSizeBytes(@javax.annotation.Nullable Integer processedSizeBytes) {
    this.processedSizeBytes = processedSizeBytes;
    return this;
  }

  /**
   *  The total size of data processed from the source file, in Bytes. 
   * @return processedSizeBytes
   */
  @javax.annotation.Nullable
  public Integer getProcessedSizeBytes() {
    return processedSizeBytes;
  }

  public void setProcessedSizeBytes(@javax.annotation.Nullable Integer processedSizeBytes) {
    this.processedSizeBytes = processedSizeBytes;
  }


  public ImportTableDescription processedItemCount(@javax.annotation.Nullable Integer processedItemCount) {
    this.processedItemCount = processedItemCount;
    return this;
  }

  /**
   *  The total number of items processed from the source file. 
   * minimum: 0
   * @return processedItemCount
   */
  @javax.annotation.Nullable
  public Integer getProcessedItemCount() {
    return processedItemCount;
  }

  public void setProcessedItemCount(@javax.annotation.Nullable Integer processedItemCount) {
    this.processedItemCount = processedItemCount;
  }


  public ImportTableDescription importedItemCount(@javax.annotation.Nullable Integer importedItemCount) {
    this.importedItemCount = importedItemCount;
    return this;
  }

  /**
   *  The number of items successfully imported into the new table. 
   * minimum: 0
   * @return importedItemCount
   */
  @javax.annotation.Nullable
  public Integer getImportedItemCount() {
    return importedItemCount;
  }

  public void setImportedItemCount(@javax.annotation.Nullable Integer importedItemCount) {
    this.importedItemCount = importedItemCount;
  }


  public ImportTableDescription failureCode(@javax.annotation.Nullable String failureCode) {
    this.failureCode = failureCode;
    return this;
  }

  /**
   *  The error code corresponding to the failure that the import job ran into during execution. 
   * @return failureCode
   */
  @javax.annotation.Nullable
  public String getFailureCode() {
    return failureCode;
  }

  public void setFailureCode(@javax.annotation.Nullable String failureCode) {
    this.failureCode = failureCode;
  }


  public ImportTableDescription failureMessage(@javax.annotation.Nullable String failureMessage) {
    this.failureMessage = failureMessage;
    return this;
  }

  /**
   *  The error message corresponding to the failure that the import job ran into during execution. 
   * @return failureMessage
   */
  @javax.annotation.Nullable
  public String getFailureMessage() {
    return failureMessage;
  }

  public void setFailureMessage(@javax.annotation.Nullable String failureMessage) {
    this.failureMessage = failureMessage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImportTableDescription importTableDescription = (ImportTableDescription) o;
    return Objects.equals(this.importArn, importTableDescription.importArn) &&
        Objects.equals(this.importStatus, importTableDescription.importStatus) &&
        Objects.equals(this.tableArn, importTableDescription.tableArn) &&
        Objects.equals(this.tableId, importTableDescription.tableId) &&
        Objects.equals(this.clientToken, importTableDescription.clientToken) &&
        Objects.equals(this.s3BucketSource, importTableDescription.s3BucketSource) &&
        Objects.equals(this.errorCount, importTableDescription.errorCount) &&
        Objects.equals(this.cloudWatchLogGroupArn, importTableDescription.cloudWatchLogGroupArn) &&
        Objects.equals(this.inputFormat, importTableDescription.inputFormat) &&
        Objects.equals(this.inputFormatOptions, importTableDescription.inputFormatOptions) &&
        Objects.equals(this.inputCompressionType, importTableDescription.inputCompressionType) &&
        Objects.equals(this.tableCreationParameters, importTableDescription.tableCreationParameters) &&
        Objects.equals(this.startTime, importTableDescription.startTime) &&
        Objects.equals(this.endTime, importTableDescription.endTime) &&
        Objects.equals(this.processedSizeBytes, importTableDescription.processedSizeBytes) &&
        Objects.equals(this.processedItemCount, importTableDescription.processedItemCount) &&
        Objects.equals(this.importedItemCount, importTableDescription.importedItemCount) &&
        Objects.equals(this.failureCode, importTableDescription.failureCode) &&
        Objects.equals(this.failureMessage, importTableDescription.failureMessage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(importArn, importStatus, tableArn, tableId, clientToken, s3BucketSource, errorCount, cloudWatchLogGroupArn, inputFormat, inputFormatOptions, inputCompressionType, tableCreationParameters, startTime, endTime, processedSizeBytes, processedItemCount, importedItemCount, failureCode, failureMessage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImportTableDescription {\n");
    sb.append("    importArn: ").append(toIndentedString(importArn)).append("\n");
    sb.append("    importStatus: ").append(toIndentedString(importStatus)).append("\n");
    sb.append("    tableArn: ").append(toIndentedString(tableArn)).append("\n");
    sb.append("    tableId: ").append(toIndentedString(tableId)).append("\n");
    sb.append("    clientToken: ").append(toIndentedString(clientToken)).append("\n");
    sb.append("    s3BucketSource: ").append(toIndentedString(s3BucketSource)).append("\n");
    sb.append("    errorCount: ").append(toIndentedString(errorCount)).append("\n");
    sb.append("    cloudWatchLogGroupArn: ").append(toIndentedString(cloudWatchLogGroupArn)).append("\n");
    sb.append("    inputFormat: ").append(toIndentedString(inputFormat)).append("\n");
    sb.append("    inputFormatOptions: ").append(toIndentedString(inputFormatOptions)).append("\n");
    sb.append("    inputCompressionType: ").append(toIndentedString(inputCompressionType)).append("\n");
    sb.append("    tableCreationParameters: ").append(toIndentedString(tableCreationParameters)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    processedSizeBytes: ").append(toIndentedString(processedSizeBytes)).append("\n");
    sb.append("    processedItemCount: ").append(toIndentedString(processedItemCount)).append("\n");
    sb.append("    importedItemCount: ").append(toIndentedString(importedItemCount)).append("\n");
    sb.append("    failureCode: ").append(toIndentedString(failureCode)).append("\n");
    sb.append("    failureMessage: ").append(toIndentedString(failureMessage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("ImportArn", "ImportStatus", "TableArn", "TableId", "ClientToken", "S3BucketSource", "ErrorCount", "CloudWatchLogGroupArn", "InputFormat", "InputFormatOptions", "InputCompressionType", "TableCreationParameters", "StartTime", "EndTime", "ProcessedSizeBytes", "ProcessedItemCount", "ImportedItemCount", "FailureCode", "FailureMessage"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ImportTableDescription
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ImportTableDescription.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ImportTableDescription is not found in the empty JSON string", ImportTableDescription.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ImportTableDescription.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ImportTableDescription` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ImportArn") != null && !jsonObj.get("ImportArn").isJsonNull()) && !jsonObj.get("ImportArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ImportArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ImportArn").toString()));
      }
      // validate the optional field `ImportStatus`
      if (jsonObj.get("ImportStatus") != null && !jsonObj.get("ImportStatus").isJsonNull()) {
        ImportStatus.validateJsonElement(jsonObj.get("ImportStatus"));
      }
      if ((jsonObj.get("TableArn") != null && !jsonObj.get("TableArn").isJsonNull()) && !jsonObj.get("TableArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TableArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TableArn").toString()));
      }
      if ((jsonObj.get("TableId") != null && !jsonObj.get("TableId").isJsonNull()) && !jsonObj.get("TableId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TableId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TableId").toString()));
      }
      if ((jsonObj.get("ClientToken") != null && !jsonObj.get("ClientToken").isJsonNull()) && !jsonObj.get("ClientToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ClientToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ClientToken").toString()));
      }
      // validate the optional field `S3BucketSource`
      if (jsonObj.get("S3BucketSource") != null && !jsonObj.get("S3BucketSource").isJsonNull()) {
        S3BucketSource.validateJsonElement(jsonObj.get("S3BucketSource"));
      }
      if ((jsonObj.get("CloudWatchLogGroupArn") != null && !jsonObj.get("CloudWatchLogGroupArn").isJsonNull()) && !jsonObj.get("CloudWatchLogGroupArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CloudWatchLogGroupArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CloudWatchLogGroupArn").toString()));
      }
      // validate the optional field `InputFormat`
      if (jsonObj.get("InputFormat") != null && !jsonObj.get("InputFormat").isJsonNull()) {
        InputFormat.validateJsonElement(jsonObj.get("InputFormat"));
      }
      // validate the optional field `InputFormatOptions`
      if (jsonObj.get("InputFormatOptions") != null && !jsonObj.get("InputFormatOptions").isJsonNull()) {
        InputFormatOptions.validateJsonElement(jsonObj.get("InputFormatOptions"));
      }
      // validate the optional field `InputCompressionType`
      if (jsonObj.get("InputCompressionType") != null && !jsonObj.get("InputCompressionType").isJsonNull()) {
        InputCompressionType.validateJsonElement(jsonObj.get("InputCompressionType"));
      }
      // validate the optional field `TableCreationParameters`
      if (jsonObj.get("TableCreationParameters") != null && !jsonObj.get("TableCreationParameters").isJsonNull()) {
        TableCreationParameters.validateJsonElement(jsonObj.get("TableCreationParameters"));
      }
      if ((jsonObj.get("FailureCode") != null && !jsonObj.get("FailureCode").isJsonNull()) && !jsonObj.get("FailureCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FailureCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FailureCode").toString()));
      }
      if ((jsonObj.get("FailureMessage") != null && !jsonObj.get("FailureMessage").isJsonNull()) && !jsonObj.get("FailureMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FailureMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FailureMessage").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ImportTableDescription.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ImportTableDescription' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ImportTableDescription> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ImportTableDescription.class));

       return (TypeAdapter<T>) new TypeAdapter<ImportTableDescription>() {
           @Override
           public void write(JsonWriter out, ImportTableDescription value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ImportTableDescription read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ImportTableDescription given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ImportTableDescription
   * @throws IOException if the JSON string is invalid with respect to ImportTableDescription
   */
  public static ImportTableDescription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ImportTableDescription.class);
  }

  /**
   * Convert an instance of ImportTableDescription to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

