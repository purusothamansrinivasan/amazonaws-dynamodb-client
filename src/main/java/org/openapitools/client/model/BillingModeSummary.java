/*
 * Amazon DynamoDB
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database, so that you don't have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.</p> <p>With DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic. You can scale up or scale down your tables' throughput capacity without downtime or performance degradation, and use the Amazon Web Services Management Console to monitor resource utilization and performance metrics.</p> <p>DynamoDB automatically spreads the data and traffic for your tables over a sufficient number of servers to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and automatically replicated across multiple Availability Zones in an Amazon Web Services Region, providing built-in high availability and data durability.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.BillingMode;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;Contains the details for the read/write capacity mode. This page talks about &lt;code&gt;PROVISIONED&lt;/code&gt; and &lt;code&gt;PAY_PER_REQUEST&lt;/code&gt; billing modes. For more information about these modes, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadWriteCapacityMode.html\&quot;&gt;Read/write capacity mode&lt;/a&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You may need to switch to on-demand mode at least once in order to return a &lt;code&gt;BillingModeSummary&lt;/code&gt; response.&lt;/p&gt; &lt;/note&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T14:20:21.724079+05:30[Asia/Kolkata]", comments = "Generator version: 7.15.0")
public class BillingModeSummary {
  public static final String SERIALIZED_NAME_BILLING_MODE = "BillingMode";
  @SerializedName(SERIALIZED_NAME_BILLING_MODE)
  @javax.annotation.Nullable
  private BillingMode billingMode;

  public static final String SERIALIZED_NAME_LAST_UPDATE_TO_PAY_PER_REQUEST_DATE_TIME = "LastUpdateToPayPerRequestDateTime";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATE_TO_PAY_PER_REQUEST_DATE_TIME)
  @javax.annotation.Nullable
  private OffsetDateTime lastUpdateToPayPerRequestDateTime;

  public BillingModeSummary() {
  }

  public BillingModeSummary billingMode(@javax.annotation.Nullable BillingMode billingMode) {
    this.billingMode = billingMode;
    return this;
  }

  /**
   * &lt;p&gt;Controls how you are charged for read and write throughput and how you manage capacity. This setting can be changed later.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;PROVISIONED&lt;/code&gt; - Sets the read/write capacity mode to &lt;code&gt;PROVISIONED&lt;/code&gt;. We recommend using &lt;code&gt;PROVISIONED&lt;/code&gt; for predictable workloads.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;PAY_PER_REQUEST&lt;/code&gt; - Sets the read/write capacity mode to &lt;code&gt;PAY_PER_REQUEST&lt;/code&gt;. We recommend using &lt;code&gt;PAY_PER_REQUEST&lt;/code&gt; for unpredictable workloads. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
   * @return billingMode
   */
  @javax.annotation.Nullable
  public BillingMode getBillingMode() {
    return billingMode;
  }

  public void setBillingMode(@javax.annotation.Nullable BillingMode billingMode) {
    this.billingMode = billingMode;
  }


  public BillingModeSummary lastUpdateToPayPerRequestDateTime(@javax.annotation.Nullable OffsetDateTime lastUpdateToPayPerRequestDateTime) {
    this.lastUpdateToPayPerRequestDateTime = lastUpdateToPayPerRequestDateTime;
    return this;
  }

  /**
   * Represents the time when &lt;code&gt;PAY_PER_REQUEST&lt;/code&gt; was last set as the read/write capacity mode.
   * @return lastUpdateToPayPerRequestDateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdateToPayPerRequestDateTime() {
    return lastUpdateToPayPerRequestDateTime;
  }

  public void setLastUpdateToPayPerRequestDateTime(@javax.annotation.Nullable OffsetDateTime lastUpdateToPayPerRequestDateTime) {
    this.lastUpdateToPayPerRequestDateTime = lastUpdateToPayPerRequestDateTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BillingModeSummary billingModeSummary = (BillingModeSummary) o;
    return Objects.equals(this.billingMode, billingModeSummary.billingMode) &&
        Objects.equals(this.lastUpdateToPayPerRequestDateTime, billingModeSummary.lastUpdateToPayPerRequestDateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(billingMode, lastUpdateToPayPerRequestDateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BillingModeSummary {\n");
    sb.append("    billingMode: ").append(toIndentedString(billingMode)).append("\n");
    sb.append("    lastUpdateToPayPerRequestDateTime: ").append(toIndentedString(lastUpdateToPayPerRequestDateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("BillingMode", "LastUpdateToPayPerRequestDateTime"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BillingModeSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BillingModeSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BillingModeSummary is not found in the empty JSON string", BillingModeSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BillingModeSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BillingModeSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `BillingMode`
      if (jsonObj.get("BillingMode") != null && !jsonObj.get("BillingMode").isJsonNull()) {
        BillingMode.validateJsonElement(jsonObj.get("BillingMode"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BillingModeSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BillingModeSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BillingModeSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BillingModeSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<BillingModeSummary>() {
           @Override
           public void write(JsonWriter out, BillingModeSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BillingModeSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BillingModeSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BillingModeSummary
   * @throws IOException if the JSON string is invalid with respect to BillingModeSummary
   */
  public static BillingModeSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BillingModeSummary.class);
  }

  /**
   * Convert an instance of BillingModeSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

