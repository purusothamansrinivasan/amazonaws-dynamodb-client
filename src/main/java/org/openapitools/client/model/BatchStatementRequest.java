/*
 * Amazon DynamoDB
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database, so that you don't have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.</p> <p>With DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic. You can scale up or scale down your tables' throughput capacity without downtime or performance degradation, and use the Amazon Web Services Management Console to monitor resource utilization and performance metrics.</p> <p>DynamoDB automatically spreads the data and traffic for your tables over a sufficient number of servers to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and automatically replicated across multiple Availability Zones in an Amazon Web Services Region, providing built-in high availability and data durability.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AttributeValue;
import org.openapitools.client.model.ReturnValuesOnConditionCheckFailure;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 *  A PartiQL batch statement request. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T14:20:21.724079+05:30[Asia/Kolkata]", comments = "Generator version: 7.15.0")
public class BatchStatementRequest {
  public static final String SERIALIZED_NAME_STATEMENT = "Statement";
  @SerializedName(SERIALIZED_NAME_STATEMENT)
  @javax.annotation.Nonnull
  private String statement;

  public static final String SERIALIZED_NAME_PARAMETERS = "Parameters";
  @SerializedName(SERIALIZED_NAME_PARAMETERS)
  @javax.annotation.Nullable
  private List<AttributeValue> parameters;

  public static final String SERIALIZED_NAME_CONSISTENT_READ = "ConsistentRead";
  @SerializedName(SERIALIZED_NAME_CONSISTENT_READ)
  @javax.annotation.Nullable
  private Boolean consistentRead;

  public static final String SERIALIZED_NAME_RETURN_VALUES_ON_CONDITION_CHECK_FAILURE = "ReturnValuesOnConditionCheckFailure";
  @SerializedName(SERIALIZED_NAME_RETURN_VALUES_ON_CONDITION_CHECK_FAILURE)
  @javax.annotation.Nullable
  private ReturnValuesOnConditionCheckFailure returnValuesOnConditionCheckFailure;

  public BatchStatementRequest() {
  }

  public BatchStatementRequest statement(@javax.annotation.Nonnull String statement) {
    this.statement = statement;
    return this;
  }

  /**
   *  A valid PartiQL statement. 
   * @return statement
   */
  @javax.annotation.Nonnull
  public String getStatement() {
    return statement;
  }

  public void setStatement(@javax.annotation.Nonnull String statement) {
    this.statement = statement;
  }


  public BatchStatementRequest parameters(@javax.annotation.Nullable List<AttributeValue> parameters) {
    this.parameters = parameters;
    return this;
  }

  public BatchStatementRequest addParametersItem(AttributeValue parametersItem) {
    if (this.parameters == null) {
      this.parameters = new ArrayList<>();
    }
    this.parameters.add(parametersItem);
    return this;
  }

  /**
   *  The parameters associated with a PartiQL statement in the batch request. 
   * @return parameters
   */
  @javax.annotation.Nullable
  public List<AttributeValue> getParameters() {
    return parameters;
  }

  public void setParameters(@javax.annotation.Nullable List<AttributeValue> parameters) {
    this.parameters = parameters;
  }


  public BatchStatementRequest consistentRead(@javax.annotation.Nullable Boolean consistentRead) {
    this.consistentRead = consistentRead;
    return this;
  }

  /**
   *  The read consistency of the PartiQL batch request. 
   * @return consistentRead
   */
  @javax.annotation.Nullable
  public Boolean getConsistentRead() {
    return consistentRead;
  }

  public void setConsistentRead(@javax.annotation.Nullable Boolean consistentRead) {
    this.consistentRead = consistentRead;
  }


  public BatchStatementRequest returnValuesOnConditionCheckFailure(@javax.annotation.Nullable ReturnValuesOnConditionCheckFailure returnValuesOnConditionCheckFailure) {
    this.returnValuesOnConditionCheckFailure = returnValuesOnConditionCheckFailure;
    return this;
  }

  /**
   * &lt;p&gt;An optional parameter that returns the item attributes for a PartiQL batch request operation that failed a condition check.&lt;/p&gt; &lt;p&gt;There is no additional cost associated with requesting a return value aside from the small network and processing overhead of receiving a larger response. No read capacity units are consumed.&lt;/p&gt;
   * @return returnValuesOnConditionCheckFailure
   */
  @javax.annotation.Nullable
  public ReturnValuesOnConditionCheckFailure getReturnValuesOnConditionCheckFailure() {
    return returnValuesOnConditionCheckFailure;
  }

  public void setReturnValuesOnConditionCheckFailure(@javax.annotation.Nullable ReturnValuesOnConditionCheckFailure returnValuesOnConditionCheckFailure) {
    this.returnValuesOnConditionCheckFailure = returnValuesOnConditionCheckFailure;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BatchStatementRequest batchStatementRequest = (BatchStatementRequest) o;
    return Objects.equals(this.statement, batchStatementRequest.statement) &&
        Objects.equals(this.parameters, batchStatementRequest.parameters) &&
        Objects.equals(this.consistentRead, batchStatementRequest.consistentRead) &&
        Objects.equals(this.returnValuesOnConditionCheckFailure, batchStatementRequest.returnValuesOnConditionCheckFailure);
  }

  @Override
  public int hashCode() {
    return Objects.hash(statement, parameters, consistentRead, returnValuesOnConditionCheckFailure);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BatchStatementRequest {\n");
    sb.append("    statement: ").append(toIndentedString(statement)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    consistentRead: ").append(toIndentedString(consistentRead)).append("\n");
    sb.append("    returnValuesOnConditionCheckFailure: ").append(toIndentedString(returnValuesOnConditionCheckFailure)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("Statement", "Parameters", "ConsistentRead", "ReturnValuesOnConditionCheckFailure"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("Statement"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BatchStatementRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BatchStatementRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BatchStatementRequest is not found in the empty JSON string", BatchStatementRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BatchStatementRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BatchStatementRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BatchStatementRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("Statement").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Statement` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Statement").toString()));
      }
      if (jsonObj.get("Parameters") != null && !jsonObj.get("Parameters").isJsonNull()) {
        JsonArray jsonArrayparameters = jsonObj.getAsJsonArray("Parameters");
        if (jsonArrayparameters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Parameters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Parameters` to be an array in the JSON string but got `%s`", jsonObj.get("Parameters").toString()));
          }

          // validate the optional field `Parameters` (array)
          for (int i = 0; i < jsonArrayparameters.size(); i++) {
            AttributeValue.validateJsonElement(jsonArrayparameters.get(i));
          };
        }
      }
      // validate the optional field `ReturnValuesOnConditionCheckFailure`
      if (jsonObj.get("ReturnValuesOnConditionCheckFailure") != null && !jsonObj.get("ReturnValuesOnConditionCheckFailure").isJsonNull()) {
        ReturnValuesOnConditionCheckFailure.validateJsonElement(jsonObj.get("ReturnValuesOnConditionCheckFailure"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BatchStatementRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BatchStatementRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BatchStatementRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BatchStatementRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<BatchStatementRequest>() {
           @Override
           public void write(JsonWriter out, BatchStatementRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BatchStatementRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BatchStatementRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BatchStatementRequest
   * @throws IOException if the JSON string is invalid with respect to BatchStatementRequest
   */
  public static BatchStatementRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BatchStatementRequest.class);
  }

  /**
   * Convert an instance of BatchStatementRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

