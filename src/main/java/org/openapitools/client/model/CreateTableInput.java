/*
 * Amazon DynamoDB
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database, so that you don't have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.</p> <p>With DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic. You can scale up or scale down your tables' throughput capacity without downtime or performance degradation, and use the Amazon Web Services Management Console to monitor resource utilization and performance metrics.</p> <p>DynamoDB automatically spreads the data and traffic for your tables over a sufficient number of servers to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and automatically replicated across multiple Availability Zones in an Amazon Web Services Region, providing built-in high availability and data durability.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AttributeDefinition;
import org.openapitools.client.model.BillingMode;
import org.openapitools.client.model.GlobalSecondaryIndex;
import org.openapitools.client.model.KeySchemaElement;
import org.openapitools.client.model.LocalSecondaryIndex;
import org.openapitools.client.model.ProvisionedThroughput;
import org.openapitools.client.model.SSESpecification;
import org.openapitools.client.model.StreamSpecification;
import org.openapitools.client.model.TableClass;
import org.openapitools.client.model.Tag;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents the input of a &lt;code&gt;CreateTable&lt;/code&gt; operation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T14:20:21.724079+05:30[Asia/Kolkata]", comments = "Generator version: 7.15.0")
public class CreateTableInput {
  public static final String SERIALIZED_NAME_ATTRIBUTE_DEFINITIONS = "AttributeDefinitions";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTE_DEFINITIONS)
  @javax.annotation.Nonnull
  private List<AttributeDefinition> attributeDefinitions;

  public static final String SERIALIZED_NAME_TABLE_NAME = "TableName";
  @SerializedName(SERIALIZED_NAME_TABLE_NAME)
  @javax.annotation.Nonnull
  private String tableName;

  public static final String SERIALIZED_NAME_KEY_SCHEMA = "KeySchema";
  @SerializedName(SERIALIZED_NAME_KEY_SCHEMA)
  @javax.annotation.Nonnull
  private List<KeySchemaElement> keySchema;

  public static final String SERIALIZED_NAME_LOCAL_SECONDARY_INDEXES = "LocalSecondaryIndexes";
  @SerializedName(SERIALIZED_NAME_LOCAL_SECONDARY_INDEXES)
  @javax.annotation.Nullable
  private List<LocalSecondaryIndex> localSecondaryIndexes;

  public static final String SERIALIZED_NAME_GLOBAL_SECONDARY_INDEXES = "GlobalSecondaryIndexes";
  @SerializedName(SERIALIZED_NAME_GLOBAL_SECONDARY_INDEXES)
  @javax.annotation.Nullable
  private List<GlobalSecondaryIndex> globalSecondaryIndexes;

  public static final String SERIALIZED_NAME_BILLING_MODE = "BillingMode";
  @SerializedName(SERIALIZED_NAME_BILLING_MODE)
  @javax.annotation.Nullable
  private BillingMode billingMode;

  public static final String SERIALIZED_NAME_PROVISIONED_THROUGHPUT = "ProvisionedThroughput";
  @SerializedName(SERIALIZED_NAME_PROVISIONED_THROUGHPUT)
  @javax.annotation.Nullable
  private ProvisionedThroughput provisionedThroughput;

  public static final String SERIALIZED_NAME_STREAM_SPECIFICATION = "StreamSpecification";
  @SerializedName(SERIALIZED_NAME_STREAM_SPECIFICATION)
  @javax.annotation.Nullable
  private StreamSpecification streamSpecification;

  public static final String SERIALIZED_NAME_SS_E_SPECIFICATION = "SSESpecification";
  @SerializedName(SERIALIZED_NAME_SS_E_SPECIFICATION)
  @javax.annotation.Nullable
  private SSESpecification ssESpecification;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  @javax.annotation.Nullable
  private List<Tag> tags;

  public static final String SERIALIZED_NAME_TABLE_CLASS = "TableClass";
  @SerializedName(SERIALIZED_NAME_TABLE_CLASS)
  @javax.annotation.Nullable
  private TableClass tableClass;

  public static final String SERIALIZED_NAME_DELETION_PROTECTION_ENABLED = "DeletionProtectionEnabled";
  @SerializedName(SERIALIZED_NAME_DELETION_PROTECTION_ENABLED)
  @javax.annotation.Nullable
  private Boolean deletionProtectionEnabled;

  public CreateTableInput() {
  }

  public CreateTableInput attributeDefinitions(@javax.annotation.Nonnull List<AttributeDefinition> attributeDefinitions) {
    this.attributeDefinitions = attributeDefinitions;
    return this;
  }

  public CreateTableInput addAttributeDefinitionsItem(AttributeDefinition attributeDefinitionsItem) {
    if (this.attributeDefinitions == null) {
      this.attributeDefinitions = new ArrayList<>();
    }
    this.attributeDefinitions.add(attributeDefinitionsItem);
    return this;
  }

  /**
   * An array of attributes that describe the key schema for the table and indexes.
   * @return attributeDefinitions
   */
  @javax.annotation.Nonnull
  public List<AttributeDefinition> getAttributeDefinitions() {
    return attributeDefinitions;
  }

  public void setAttributeDefinitions(@javax.annotation.Nonnull List<AttributeDefinition> attributeDefinitions) {
    this.attributeDefinitions = attributeDefinitions;
  }


  public CreateTableInput tableName(@javax.annotation.Nonnull String tableName) {
    this.tableName = tableName;
    return this;
  }

  /**
   * The name of the table to create.
   * @return tableName
   */
  @javax.annotation.Nonnull
  public String getTableName() {
    return tableName;
  }

  public void setTableName(@javax.annotation.Nonnull String tableName) {
    this.tableName = tableName;
  }


  public CreateTableInput keySchema(@javax.annotation.Nonnull List<KeySchemaElement> keySchema) {
    this.keySchema = keySchema;
    return this;
  }

  public CreateTableInput addKeySchemaItem(KeySchemaElement keySchemaItem) {
    if (this.keySchema == null) {
      this.keySchema = new ArrayList<>();
    }
    this.keySchema.add(keySchemaItem);
    return this;
  }

  /**
   * &lt;p&gt;Specifies the attributes that make up the primary key for a table or an index. The attributes in &lt;code&gt;KeySchema&lt;/code&gt; must also be defined in the &lt;code&gt;AttributeDefinitions&lt;/code&gt; array. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html\&quot;&gt;Data Model&lt;/a&gt; in the &lt;i&gt;Amazon DynamoDB Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;Each &lt;code&gt;KeySchemaElement&lt;/code&gt; in the array is composed of:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;AttributeName&lt;/code&gt; - The name of this key attribute.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;KeyType&lt;/code&gt; - The role that the key attribute will assume:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;HASH&lt;/code&gt; - partition key&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;RANGE&lt;/code&gt; - sort key&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;The partition key of an item is also known as its &lt;i&gt;hash attribute&lt;/i&gt;. The term \&quot;hash attribute\&quot; derives from the DynamoDB usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.&lt;/p&gt; &lt;p&gt;The sort key of an item is also known as its &lt;i&gt;range attribute&lt;/i&gt;. The term \&quot;range attribute\&quot; derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;For a simple primary key (partition key), you must provide exactly one element with a &lt;code&gt;KeyType&lt;/code&gt; of &lt;code&gt;HASH&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For a composite primary key (partition key and sort key), you must provide exactly two elements, in this order: The first element must have a &lt;code&gt;KeyType&lt;/code&gt; of &lt;code&gt;HASH&lt;/code&gt;, and the second element must have a &lt;code&gt;KeyType&lt;/code&gt; of &lt;code&gt;RANGE&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#WorkingWithTables.primary.key\&quot;&gt;Working with Tables&lt;/a&gt; in the &lt;i&gt;Amazon DynamoDB Developer Guide&lt;/i&gt;.&lt;/p&gt;
   * @return keySchema
   */
  @javax.annotation.Nonnull
  public List<KeySchemaElement> getKeySchema() {
    return keySchema;
  }

  public void setKeySchema(@javax.annotation.Nonnull List<KeySchemaElement> keySchema) {
    this.keySchema = keySchema;
  }


  public CreateTableInput localSecondaryIndexes(@javax.annotation.Nullable List<LocalSecondaryIndex> localSecondaryIndexes) {
    this.localSecondaryIndexes = localSecondaryIndexes;
    return this;
  }

  public CreateTableInput addLocalSecondaryIndexesItem(LocalSecondaryIndex localSecondaryIndexesItem) {
    if (this.localSecondaryIndexes == null) {
      this.localSecondaryIndexes = new ArrayList<>();
    }
    this.localSecondaryIndexes.add(localSecondaryIndexesItem);
    return this;
  }

  /**
   * &lt;p&gt;One or more local secondary indexes (the maximum is 5) to be created on the table. Each index is scoped to a given partition key value. There is a 10 GB size limit per partition key value; otherwise, the size of a local secondary index is unconstrained.&lt;/p&gt; &lt;p&gt;Each local secondary index in the array includes the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;IndexName&lt;/code&gt; - The name of the local secondary index. Must be unique only for this table.&lt;/p&gt; &lt;p/&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;KeySchema&lt;/code&gt; - Specifies the key schema for the local secondary index. The key schema must begin with the same partition key as the table.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Projection&lt;/code&gt; - Specifies attributes that are copied (projected) from the table into the index. These are in addition to the primary key attributes and index key attributes, which are automatically projected. Each attribute specification is composed of:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ProjectionType&lt;/code&gt; - One of the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;KEYS_ONLY&lt;/code&gt; - Only the index and primary keys are projected into the index.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;INCLUDE&lt;/code&gt; - Only the specified table attributes are projected into the index. The list of projected attributes is in &lt;code&gt;NonKeyAttributes&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ALL&lt;/code&gt; - All of the table attributes are projected into the index.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;NonKeyAttributes&lt;/code&gt; - A list of one or more non-key attribute names that are projected into the secondary index. The total count of attributes provided in &lt;code&gt;NonKeyAttributes&lt;/code&gt;, summed across all of the secondary indexes, must not exceed 100. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt;
   * @return localSecondaryIndexes
   */
  @javax.annotation.Nullable
  public List<LocalSecondaryIndex> getLocalSecondaryIndexes() {
    return localSecondaryIndexes;
  }

  public void setLocalSecondaryIndexes(@javax.annotation.Nullable List<LocalSecondaryIndex> localSecondaryIndexes) {
    this.localSecondaryIndexes = localSecondaryIndexes;
  }


  public CreateTableInput globalSecondaryIndexes(@javax.annotation.Nullable List<GlobalSecondaryIndex> globalSecondaryIndexes) {
    this.globalSecondaryIndexes = globalSecondaryIndexes;
    return this;
  }

  public CreateTableInput addGlobalSecondaryIndexesItem(GlobalSecondaryIndex globalSecondaryIndexesItem) {
    if (this.globalSecondaryIndexes == null) {
      this.globalSecondaryIndexes = new ArrayList<>();
    }
    this.globalSecondaryIndexes.add(globalSecondaryIndexesItem);
    return this;
  }

  /**
   * &lt;p&gt;One or more global secondary indexes (the maximum is 20) to be created on the table. Each global secondary index in the array includes the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;IndexName&lt;/code&gt; - The name of the global secondary index. Must be unique only for this table.&lt;/p&gt; &lt;p/&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;KeySchema&lt;/code&gt; - Specifies the key schema for the global secondary index.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Projection&lt;/code&gt; - Specifies attributes that are copied (projected) from the table into the index. These are in addition to the primary key attributes and index key attributes, which are automatically projected. Each attribute specification is composed of:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ProjectionType&lt;/code&gt; - One of the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;KEYS_ONLY&lt;/code&gt; - Only the index and primary keys are projected into the index.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;INCLUDE&lt;/code&gt; - Only the specified table attributes are projected into the index. The list of projected attributes is in &lt;code&gt;NonKeyAttributes&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ALL&lt;/code&gt; - All of the table attributes are projected into the index.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;NonKeyAttributes&lt;/code&gt; - A list of one or more non-key attribute names that are projected into the secondary index. The total count of attributes provided in &lt;code&gt;NonKeyAttributes&lt;/code&gt;, summed across all of the secondary indexes, must not exceed 100. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ProvisionedThroughput&lt;/code&gt; - The provisioned throughput settings for the global secondary index, consisting of read and write capacity units.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
   * @return globalSecondaryIndexes
   */
  @javax.annotation.Nullable
  public List<GlobalSecondaryIndex> getGlobalSecondaryIndexes() {
    return globalSecondaryIndexes;
  }

  public void setGlobalSecondaryIndexes(@javax.annotation.Nullable List<GlobalSecondaryIndex> globalSecondaryIndexes) {
    this.globalSecondaryIndexes = globalSecondaryIndexes;
  }


  public CreateTableInput billingMode(@javax.annotation.Nullable BillingMode billingMode) {
    this.billingMode = billingMode;
    return this;
  }

  /**
   * &lt;p&gt;Controls how you are charged for read and write throughput and how you manage capacity. This setting can be changed later.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;PROVISIONED&lt;/code&gt; - We recommend using &lt;code&gt;PROVISIONED&lt;/code&gt; for predictable workloads. &lt;code&gt;PROVISIONED&lt;/code&gt; sets the billing mode to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadWriteCapacityMode.html#HowItWorks.ProvisionedThroughput.Manual\&quot;&gt;Provisioned Mode&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;PAY_PER_REQUEST&lt;/code&gt; - We recommend using &lt;code&gt;PAY_PER_REQUEST&lt;/code&gt; for unpredictable workloads. &lt;code&gt;PAY_PER_REQUEST&lt;/code&gt; sets the billing mode to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadWriteCapacityMode.html#HowItWorks.OnDemand\&quot;&gt;On-Demand Mode&lt;/a&gt;. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
   * @return billingMode
   */
  @javax.annotation.Nullable
  public BillingMode getBillingMode() {
    return billingMode;
  }

  public void setBillingMode(@javax.annotation.Nullable BillingMode billingMode) {
    this.billingMode = billingMode;
  }


  public CreateTableInput provisionedThroughput(@javax.annotation.Nullable ProvisionedThroughput provisionedThroughput) {
    this.provisionedThroughput = provisionedThroughput;
    return this;
  }

  /**
   * &lt;p&gt;Represents the provisioned throughput settings for a specified table or index. The settings can be modified using the &lt;code&gt;UpdateTable&lt;/code&gt; operation.&lt;/p&gt; &lt;p&gt; If you set BillingMode as &lt;code&gt;PROVISIONED&lt;/code&gt;, you must specify this property. If you set BillingMode as &lt;code&gt;PAY_PER_REQUEST&lt;/code&gt;, you cannot specify this property.&lt;/p&gt; &lt;p&gt;For current minimum and maximum provisioned throughput values, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html\&quot;&gt;Service, Account, and Table Quotas&lt;/a&gt; in the &lt;i&gt;Amazon DynamoDB Developer Guide&lt;/i&gt;.&lt;/p&gt;
   * @return provisionedThroughput
   */
  @javax.annotation.Nullable
  public ProvisionedThroughput getProvisionedThroughput() {
    return provisionedThroughput;
  }

  public void setProvisionedThroughput(@javax.annotation.Nullable ProvisionedThroughput provisionedThroughput) {
    this.provisionedThroughput = provisionedThroughput;
  }


  public CreateTableInput streamSpecification(@javax.annotation.Nullable StreamSpecification streamSpecification) {
    this.streamSpecification = streamSpecification;
    return this;
  }

  /**
   * &lt;p&gt;The settings for DynamoDB Streams on the table. These settings consist of:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;StreamEnabled&lt;/code&gt; - Indicates whether DynamoDB Streams is to be enabled (true) or disabled (false).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;StreamViewType&lt;/code&gt; - When an item in the table is modified, &lt;code&gt;StreamViewType&lt;/code&gt; determines what information is written to the table&#39;s stream. Valid values for &lt;code&gt;StreamViewType&lt;/code&gt; are:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;KEYS_ONLY&lt;/code&gt; - Only the key attributes of the modified item are written to the stream.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;NEW_IMAGE&lt;/code&gt; - The entire item, as it appears after it was modified, is written to the stream.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;OLD_IMAGE&lt;/code&gt; - The entire item, as it appeared before it was modified, is written to the stream.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;NEW_AND_OLD_IMAGES&lt;/code&gt; - Both the new and the old item images of the item are written to the stream.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt;
   * @return streamSpecification
   */
  @javax.annotation.Nullable
  public StreamSpecification getStreamSpecification() {
    return streamSpecification;
  }

  public void setStreamSpecification(@javax.annotation.Nullable StreamSpecification streamSpecification) {
    this.streamSpecification = streamSpecification;
  }


  public CreateTableInput ssESpecification(@javax.annotation.Nullable SSESpecification ssESpecification) {
    this.ssESpecification = ssESpecification;
    return this;
  }

  /**
   * Represents the settings used to enable server-side encryption.
   * @return ssESpecification
   */
  @javax.annotation.Nullable
  public SSESpecification getSsESpecification() {
    return ssESpecification;
  }

  public void setSsESpecification(@javax.annotation.Nullable SSESpecification ssESpecification) {
    this.ssESpecification = ssESpecification;
  }


  public CreateTableInput tags(@javax.annotation.Nullable List<Tag> tags) {
    this.tags = tags;
    return this;
  }

  public CreateTableInput addTagsItem(Tag tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * A list of key-value pairs to label the table. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Tagging.html\&quot;&gt;Tagging for DynamoDB&lt;/a&gt;.
   * @return tags
   */
  @javax.annotation.Nullable
  public List<Tag> getTags() {
    return tags;
  }

  public void setTags(@javax.annotation.Nullable List<Tag> tags) {
    this.tags = tags;
  }


  public CreateTableInput tableClass(@javax.annotation.Nullable TableClass tableClass) {
    this.tableClass = tableClass;
    return this;
  }

  /**
   * The table class of the new table. Valid values are &lt;code&gt;STANDARD&lt;/code&gt; and &lt;code&gt;STANDARD_INFREQUENT_ACCESS&lt;/code&gt;.
   * @return tableClass
   */
  @javax.annotation.Nullable
  public TableClass getTableClass() {
    return tableClass;
  }

  public void setTableClass(@javax.annotation.Nullable TableClass tableClass) {
    this.tableClass = tableClass;
  }


  public CreateTableInput deletionProtectionEnabled(@javax.annotation.Nullable Boolean deletionProtectionEnabled) {
    this.deletionProtectionEnabled = deletionProtectionEnabled;
    return this;
  }

  /**
   * Indicates whether deletion protection is to be enabled (true) or disabled (false) on the table.
   * @return deletionProtectionEnabled
   */
  @javax.annotation.Nullable
  public Boolean getDeletionProtectionEnabled() {
    return deletionProtectionEnabled;
  }

  public void setDeletionProtectionEnabled(@javax.annotation.Nullable Boolean deletionProtectionEnabled) {
    this.deletionProtectionEnabled = deletionProtectionEnabled;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateTableInput createTableInput = (CreateTableInput) o;
    return Objects.equals(this.attributeDefinitions, createTableInput.attributeDefinitions) &&
        Objects.equals(this.tableName, createTableInput.tableName) &&
        Objects.equals(this.keySchema, createTableInput.keySchema) &&
        Objects.equals(this.localSecondaryIndexes, createTableInput.localSecondaryIndexes) &&
        Objects.equals(this.globalSecondaryIndexes, createTableInput.globalSecondaryIndexes) &&
        Objects.equals(this.billingMode, createTableInput.billingMode) &&
        Objects.equals(this.provisionedThroughput, createTableInput.provisionedThroughput) &&
        Objects.equals(this.streamSpecification, createTableInput.streamSpecification) &&
        Objects.equals(this.ssESpecification, createTableInput.ssESpecification) &&
        Objects.equals(this.tags, createTableInput.tags) &&
        Objects.equals(this.tableClass, createTableInput.tableClass) &&
        Objects.equals(this.deletionProtectionEnabled, createTableInput.deletionProtectionEnabled);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attributeDefinitions, tableName, keySchema, localSecondaryIndexes, globalSecondaryIndexes, billingMode, provisionedThroughput, streamSpecification, ssESpecification, tags, tableClass, deletionProtectionEnabled);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateTableInput {\n");
    sb.append("    attributeDefinitions: ").append(toIndentedString(attributeDefinitions)).append("\n");
    sb.append("    tableName: ").append(toIndentedString(tableName)).append("\n");
    sb.append("    keySchema: ").append(toIndentedString(keySchema)).append("\n");
    sb.append("    localSecondaryIndexes: ").append(toIndentedString(localSecondaryIndexes)).append("\n");
    sb.append("    globalSecondaryIndexes: ").append(toIndentedString(globalSecondaryIndexes)).append("\n");
    sb.append("    billingMode: ").append(toIndentedString(billingMode)).append("\n");
    sb.append("    provisionedThroughput: ").append(toIndentedString(provisionedThroughput)).append("\n");
    sb.append("    streamSpecification: ").append(toIndentedString(streamSpecification)).append("\n");
    sb.append("    ssESpecification: ").append(toIndentedString(ssESpecification)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    tableClass: ").append(toIndentedString(tableClass)).append("\n");
    sb.append("    deletionProtectionEnabled: ").append(toIndentedString(deletionProtectionEnabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("AttributeDefinitions", "TableName", "KeySchema", "LocalSecondaryIndexes", "GlobalSecondaryIndexes", "BillingMode", "ProvisionedThroughput", "StreamSpecification", "SSESpecification", "Tags", "TableClass", "DeletionProtectionEnabled"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("AttributeDefinitions", "TableName", "KeySchema"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateTableInput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateTableInput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateTableInput is not found in the empty JSON string", CreateTableInput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateTableInput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateTableInput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateTableInput.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("AttributeDefinitions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `AttributeDefinitions` to be an array in the JSON string but got `%s`", jsonObj.get("AttributeDefinitions").toString()));
      }

      JsonArray jsonArrayattributeDefinitions = jsonObj.getAsJsonArray("AttributeDefinitions");
      // validate the required field `AttributeDefinitions` (array)
      for (int i = 0; i < jsonArrayattributeDefinitions.size(); i++) {
        AttributeDefinition.validateJsonElement(jsonArrayattributeDefinitions.get(i));
      };
      if (!jsonObj.get("TableName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TableName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TableName").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("KeySchema").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `KeySchema` to be an array in the JSON string but got `%s`", jsonObj.get("KeySchema").toString()));
      }

      JsonArray jsonArraykeySchema = jsonObj.getAsJsonArray("KeySchema");
      // validate the required field `KeySchema` (array)
      for (int i = 0; i < jsonArraykeySchema.size(); i++) {
        KeySchemaElement.validateJsonElement(jsonArraykeySchema.get(i));
      };
      if (jsonObj.get("LocalSecondaryIndexes") != null && !jsonObj.get("LocalSecondaryIndexes").isJsonNull()) {
        JsonArray jsonArraylocalSecondaryIndexes = jsonObj.getAsJsonArray("LocalSecondaryIndexes");
        if (jsonArraylocalSecondaryIndexes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("LocalSecondaryIndexes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `LocalSecondaryIndexes` to be an array in the JSON string but got `%s`", jsonObj.get("LocalSecondaryIndexes").toString()));
          }

          // validate the optional field `LocalSecondaryIndexes` (array)
          for (int i = 0; i < jsonArraylocalSecondaryIndexes.size(); i++) {
            LocalSecondaryIndex.validateJsonElement(jsonArraylocalSecondaryIndexes.get(i));
          };
        }
      }
      if (jsonObj.get("GlobalSecondaryIndexes") != null && !jsonObj.get("GlobalSecondaryIndexes").isJsonNull()) {
        JsonArray jsonArrayglobalSecondaryIndexes = jsonObj.getAsJsonArray("GlobalSecondaryIndexes");
        if (jsonArrayglobalSecondaryIndexes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("GlobalSecondaryIndexes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `GlobalSecondaryIndexes` to be an array in the JSON string but got `%s`", jsonObj.get("GlobalSecondaryIndexes").toString()));
          }

          // validate the optional field `GlobalSecondaryIndexes` (array)
          for (int i = 0; i < jsonArrayglobalSecondaryIndexes.size(); i++) {
            GlobalSecondaryIndex.validateJsonElement(jsonArrayglobalSecondaryIndexes.get(i));
          };
        }
      }
      // validate the optional field `BillingMode`
      if (jsonObj.get("BillingMode") != null && !jsonObj.get("BillingMode").isJsonNull()) {
        BillingMode.validateJsonElement(jsonObj.get("BillingMode"));
      }
      // validate the optional field `ProvisionedThroughput`
      if (jsonObj.get("ProvisionedThroughput") != null && !jsonObj.get("ProvisionedThroughput").isJsonNull()) {
        ProvisionedThroughput.validateJsonElement(jsonObj.get("ProvisionedThroughput"));
      }
      // validate the optional field `StreamSpecification`
      if (jsonObj.get("StreamSpecification") != null && !jsonObj.get("StreamSpecification").isJsonNull()) {
        StreamSpecification.validateJsonElement(jsonObj.get("StreamSpecification"));
      }
      // validate the optional field `SSESpecification`
      if (jsonObj.get("SSESpecification") != null && !jsonObj.get("SSESpecification").isJsonNull()) {
        SSESpecification.validateJsonElement(jsonObj.get("SSESpecification"));
      }
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        JsonArray jsonArraytags = jsonObj.getAsJsonArray("Tags");
        if (jsonArraytags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Tags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Tags` to be an array in the JSON string but got `%s`", jsonObj.get("Tags").toString()));
          }

          // validate the optional field `Tags` (array)
          for (int i = 0; i < jsonArraytags.size(); i++) {
            Tag.validateJsonElement(jsonArraytags.get(i));
          };
        }
      }
      // validate the optional field `TableClass`
      if (jsonObj.get("TableClass") != null && !jsonObj.get("TableClass").isJsonNull()) {
        TableClass.validateJsonElement(jsonObj.get("TableClass"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateTableInput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateTableInput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateTableInput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateTableInput.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateTableInput>() {
           @Override
           public void write(JsonWriter out, CreateTableInput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateTableInput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateTableInput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateTableInput
   * @throws IOException if the JSON string is invalid with respect to CreateTableInput
   */
  public static CreateTableInput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateTableInput.class);
  }

  /**
   * Convert an instance of CreateTableInput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

