/*
 * Amazon DynamoDB
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database, so that you don't have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.</p> <p>With DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic. You can scale up or scale down your tables' throughput capacity without downtime or performance degradation, and use the Amazon Web Services Management Console to monitor resource utilization and performance metrics.</p> <p>DynamoDB automatically spreads the data and traffic for your tables over a sufficient number of servers to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and automatically replicated across multiple Availability Zones in an Amazon Web Services Region, providing built-in high availability and data durability.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BillingMode;
import org.openapitools.client.model.KeySchemaElement;
import org.openapitools.client.model.ProvisionedThroughput;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains the details of the table when the backup was created. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T14:20:21.724079+05:30[Asia/Kolkata]", comments = "Generator version: 7.15.0")
public class SourceTableDetails {
  public static final String SERIALIZED_NAME_TABLE_NAME = "TableName";
  @SerializedName(SERIALIZED_NAME_TABLE_NAME)
  @javax.annotation.Nonnull
  private String tableName;

  public static final String SERIALIZED_NAME_TABLE_ID = "TableId";
  @SerializedName(SERIALIZED_NAME_TABLE_ID)
  @javax.annotation.Nonnull
  private String tableId;

  public static final String SERIALIZED_NAME_TABLE_ARN = "TableArn";
  @SerializedName(SERIALIZED_NAME_TABLE_ARN)
  @javax.annotation.Nullable
  private String tableArn;

  public static final String SERIALIZED_NAME_TABLE_SIZE_BYTES = "TableSizeBytes";
  @SerializedName(SERIALIZED_NAME_TABLE_SIZE_BYTES)
  @javax.annotation.Nullable
  private Integer tableSizeBytes;

  public static final String SERIALIZED_NAME_KEY_SCHEMA = "KeySchema";
  @SerializedName(SERIALIZED_NAME_KEY_SCHEMA)
  @javax.annotation.Nonnull
  private List<KeySchemaElement> keySchema;

  public static final String SERIALIZED_NAME_TABLE_CREATION_DATE_TIME = "TableCreationDateTime";
  @SerializedName(SERIALIZED_NAME_TABLE_CREATION_DATE_TIME)
  @javax.annotation.Nonnull
  private OffsetDateTime tableCreationDateTime;

  public static final String SERIALIZED_NAME_PROVISIONED_THROUGHPUT = "ProvisionedThroughput";
  @SerializedName(SERIALIZED_NAME_PROVISIONED_THROUGHPUT)
  @javax.annotation.Nonnull
  private ProvisionedThroughput provisionedThroughput;

  public static final String SERIALIZED_NAME_ITEM_COUNT = "ItemCount";
  @SerializedName(SERIALIZED_NAME_ITEM_COUNT)
  @javax.annotation.Nullable
  private Integer itemCount;

  public static final String SERIALIZED_NAME_BILLING_MODE = "BillingMode";
  @SerializedName(SERIALIZED_NAME_BILLING_MODE)
  @javax.annotation.Nullable
  private BillingMode billingMode;

  public SourceTableDetails() {
  }

  public SourceTableDetails tableName(@javax.annotation.Nonnull String tableName) {
    this.tableName = tableName;
    return this;
  }

  /**
   * The name of the table for which the backup was created. 
   * @return tableName
   */
  @javax.annotation.Nonnull
  public String getTableName() {
    return tableName;
  }

  public void setTableName(@javax.annotation.Nonnull String tableName) {
    this.tableName = tableName;
  }


  public SourceTableDetails tableId(@javax.annotation.Nonnull String tableId) {
    this.tableId = tableId;
    return this;
  }

  /**
   * Unique identifier for the table for which the backup was created. 
   * @return tableId
   */
  @javax.annotation.Nonnull
  public String getTableId() {
    return tableId;
  }

  public void setTableId(@javax.annotation.Nonnull String tableId) {
    this.tableId = tableId;
  }


  public SourceTableDetails tableArn(@javax.annotation.Nullable String tableArn) {
    this.tableArn = tableArn;
    return this;
  }

  /**
   * ARN of the table for which backup was created. 
   * @return tableArn
   */
  @javax.annotation.Nullable
  public String getTableArn() {
    return tableArn;
  }

  public void setTableArn(@javax.annotation.Nullable String tableArn) {
    this.tableArn = tableArn;
  }


  public SourceTableDetails tableSizeBytes(@javax.annotation.Nullable Integer tableSizeBytes) {
    this.tableSizeBytes = tableSizeBytes;
    return this;
  }

  /**
   * Size of the table in bytes. Note that this is an approximate value.
   * @return tableSizeBytes
   */
  @javax.annotation.Nullable
  public Integer getTableSizeBytes() {
    return tableSizeBytes;
  }

  public void setTableSizeBytes(@javax.annotation.Nullable Integer tableSizeBytes) {
    this.tableSizeBytes = tableSizeBytes;
  }


  public SourceTableDetails keySchema(@javax.annotation.Nonnull List<KeySchemaElement> keySchema) {
    this.keySchema = keySchema;
    return this;
  }

  public SourceTableDetails addKeySchemaItem(KeySchemaElement keySchemaItem) {
    if (this.keySchema == null) {
      this.keySchema = new ArrayList<>();
    }
    this.keySchema.add(keySchemaItem);
    return this;
  }

  /**
   * Schema of the table. 
   * @return keySchema
   */
  @javax.annotation.Nonnull
  public List<KeySchemaElement> getKeySchema() {
    return keySchema;
  }

  public void setKeySchema(@javax.annotation.Nonnull List<KeySchemaElement> keySchema) {
    this.keySchema = keySchema;
  }


  public SourceTableDetails tableCreationDateTime(@javax.annotation.Nonnull OffsetDateTime tableCreationDateTime) {
    this.tableCreationDateTime = tableCreationDateTime;
    return this;
  }

  /**
   * Time when the source table was created. 
   * @return tableCreationDateTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getTableCreationDateTime() {
    return tableCreationDateTime;
  }

  public void setTableCreationDateTime(@javax.annotation.Nonnull OffsetDateTime tableCreationDateTime) {
    this.tableCreationDateTime = tableCreationDateTime;
  }


  public SourceTableDetails provisionedThroughput(@javax.annotation.Nonnull ProvisionedThroughput provisionedThroughput) {
    this.provisionedThroughput = provisionedThroughput;
    return this;
  }

  /**
   * Read IOPs and Write IOPS on the table when the backup was created.
   * @return provisionedThroughput
   */
  @javax.annotation.Nonnull
  public ProvisionedThroughput getProvisionedThroughput() {
    return provisionedThroughput;
  }

  public void setProvisionedThroughput(@javax.annotation.Nonnull ProvisionedThroughput provisionedThroughput) {
    this.provisionedThroughput = provisionedThroughput;
  }


  public SourceTableDetails itemCount(@javax.annotation.Nullable Integer itemCount) {
    this.itemCount = itemCount;
    return this;
  }

  /**
   * Number of items in the table. Note that this is an approximate value. 
   * minimum: 0
   * @return itemCount
   */
  @javax.annotation.Nullable
  public Integer getItemCount() {
    return itemCount;
  }

  public void setItemCount(@javax.annotation.Nullable Integer itemCount) {
    this.itemCount = itemCount;
  }


  public SourceTableDetails billingMode(@javax.annotation.Nullable BillingMode billingMode) {
    this.billingMode = billingMode;
    return this;
  }

  /**
   * &lt;p&gt;Controls how you are charged for read and write throughput and how you manage capacity. This setting can be changed later.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;PROVISIONED&lt;/code&gt; - Sets the read/write capacity mode to &lt;code&gt;PROVISIONED&lt;/code&gt;. We recommend using &lt;code&gt;PROVISIONED&lt;/code&gt; for predictable workloads.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;PAY_PER_REQUEST&lt;/code&gt; - Sets the read/write capacity mode to &lt;code&gt;PAY_PER_REQUEST&lt;/code&gt;. We recommend using &lt;code&gt;PAY_PER_REQUEST&lt;/code&gt; for unpredictable workloads. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
   * @return billingMode
   */
  @javax.annotation.Nullable
  public BillingMode getBillingMode() {
    return billingMode;
  }

  public void setBillingMode(@javax.annotation.Nullable BillingMode billingMode) {
    this.billingMode = billingMode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SourceTableDetails sourceTableDetails = (SourceTableDetails) o;
    return Objects.equals(this.tableName, sourceTableDetails.tableName) &&
        Objects.equals(this.tableId, sourceTableDetails.tableId) &&
        Objects.equals(this.tableArn, sourceTableDetails.tableArn) &&
        Objects.equals(this.tableSizeBytes, sourceTableDetails.tableSizeBytes) &&
        Objects.equals(this.keySchema, sourceTableDetails.keySchema) &&
        Objects.equals(this.tableCreationDateTime, sourceTableDetails.tableCreationDateTime) &&
        Objects.equals(this.provisionedThroughput, sourceTableDetails.provisionedThroughput) &&
        Objects.equals(this.itemCount, sourceTableDetails.itemCount) &&
        Objects.equals(this.billingMode, sourceTableDetails.billingMode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tableName, tableId, tableArn, tableSizeBytes, keySchema, tableCreationDateTime, provisionedThroughput, itemCount, billingMode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SourceTableDetails {\n");
    sb.append("    tableName: ").append(toIndentedString(tableName)).append("\n");
    sb.append("    tableId: ").append(toIndentedString(tableId)).append("\n");
    sb.append("    tableArn: ").append(toIndentedString(tableArn)).append("\n");
    sb.append("    tableSizeBytes: ").append(toIndentedString(tableSizeBytes)).append("\n");
    sb.append("    keySchema: ").append(toIndentedString(keySchema)).append("\n");
    sb.append("    tableCreationDateTime: ").append(toIndentedString(tableCreationDateTime)).append("\n");
    sb.append("    provisionedThroughput: ").append(toIndentedString(provisionedThroughput)).append("\n");
    sb.append("    itemCount: ").append(toIndentedString(itemCount)).append("\n");
    sb.append("    billingMode: ").append(toIndentedString(billingMode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("TableName", "TableId", "TableArn", "TableSizeBytes", "KeySchema", "TableCreationDateTime", "ProvisionedThroughput", "ItemCount", "BillingMode"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("TableName", "TableId", "KeySchema", "TableCreationDateTime", "ProvisionedThroughput"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SourceTableDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SourceTableDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SourceTableDetails is not found in the empty JSON string", SourceTableDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SourceTableDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SourceTableDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SourceTableDetails.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("TableName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TableName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TableName").toString()));
      }
      if (!jsonObj.get("TableId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TableId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TableId").toString()));
      }
      if ((jsonObj.get("TableArn") != null && !jsonObj.get("TableArn").isJsonNull()) && !jsonObj.get("TableArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TableArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TableArn").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("KeySchema").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `KeySchema` to be an array in the JSON string but got `%s`", jsonObj.get("KeySchema").toString()));
      }

      JsonArray jsonArraykeySchema = jsonObj.getAsJsonArray("KeySchema");
      // validate the required field `KeySchema` (array)
      for (int i = 0; i < jsonArraykeySchema.size(); i++) {
        KeySchemaElement.validateJsonElement(jsonArraykeySchema.get(i));
      };
      // validate the required field `ProvisionedThroughput`
      ProvisionedThroughput.validateJsonElement(jsonObj.get("ProvisionedThroughput"));
      // validate the optional field `BillingMode`
      if (jsonObj.get("BillingMode") != null && !jsonObj.get("BillingMode").isJsonNull()) {
        BillingMode.validateJsonElement(jsonObj.get("BillingMode"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SourceTableDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SourceTableDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SourceTableDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SourceTableDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<SourceTableDetails>() {
           @Override
           public void write(JsonWriter out, SourceTableDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SourceTableDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SourceTableDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SourceTableDetails
   * @throws IOException if the JSON string is invalid with respect to SourceTableDetails
   */
  public static SourceTableDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SourceTableDetails.class);
  }

  /**
   * Convert an instance of SourceTableDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

