/*
 * Amazon DynamoDB
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database, so that you don't have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.</p> <p>With DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic. You can scale up or scale down your tables' throughput capacity without downtime or performance degradation, and use the Amazon Web Services Management Console to monitor resource utilization and performance metrics.</p> <p>DynamoDB automatically spreads the data and traffic for your tables over a sufficient number of servers to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and automatically replicated across multiple Availability Zones in an Amazon Web Services Region, providing built-in high availability and data durability.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.SSEStatus;
import org.openapitools.client.model.SSEType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The description of the server-side encryption status on the specified table.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T14:20:21.724079+05:30[Asia/Kolkata]", comments = "Generator version: 7.15.0")
public class SSEDescription {
  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  @javax.annotation.Nullable
  private SSEStatus status;

  public static final String SERIALIZED_NAME_SS_E_TYPE = "SSEType";
  @SerializedName(SERIALIZED_NAME_SS_E_TYPE)
  @javax.annotation.Nullable
  private SSEType ssEType;

  public static final String SERIALIZED_NAME_KM_S_MASTER_KEY_ARN = "KMSMasterKeyArn";
  @SerializedName(SERIALIZED_NAME_KM_S_MASTER_KEY_ARN)
  @javax.annotation.Nullable
  private String kmSMasterKeyArn;

  public static final String SERIALIZED_NAME_INACCESSIBLE_ENCRYPTION_DATE_TIME = "InaccessibleEncryptionDateTime";
  @SerializedName(SERIALIZED_NAME_INACCESSIBLE_ENCRYPTION_DATE_TIME)
  @javax.annotation.Nullable
  private OffsetDateTime inaccessibleEncryptionDateTime;

  public SSEDescription() {
  }

  public SSEDescription status(@javax.annotation.Nullable SSEStatus status) {
    this.status = status;
    return this;
  }

  /**
   * &lt;p&gt;Represents the current state of server-side encryption. The only supported values are:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ENABLED&lt;/code&gt; - Server-side encryption is enabled.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;UPDATING&lt;/code&gt; - Server-side encryption is being updated.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
   * @return status
   */
  @javax.annotation.Nullable
  public SSEStatus getStatus() {
    return status;
  }

  public void setStatus(@javax.annotation.Nullable SSEStatus status) {
    this.status = status;
  }


  public SSEDescription ssEType(@javax.annotation.Nullable SSEType ssEType) {
    this.ssEType = ssEType;
    return this;
  }

  /**
   * &lt;p&gt;Server-side encryption type. The only supported value is:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;KMS&lt;/code&gt; - Server-side encryption that uses Key Management Service. The key is stored in your account and is managed by KMS (KMS charges apply).&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
   * @return ssEType
   */
  @javax.annotation.Nullable
  public SSEType getSsEType() {
    return ssEType;
  }

  public void setSsEType(@javax.annotation.Nullable SSEType ssEType) {
    this.ssEType = ssEType;
  }


  public SSEDescription kmSMasterKeyArn(@javax.annotation.Nullable String kmSMasterKeyArn) {
    this.kmSMasterKeyArn = kmSMasterKeyArn;
    return this;
  }

  /**
   * The KMS key ARN used for the KMS encryption.
   * @return kmSMasterKeyArn
   */
  @javax.annotation.Nullable
  public String getKmSMasterKeyArn() {
    return kmSMasterKeyArn;
  }

  public void setKmSMasterKeyArn(@javax.annotation.Nullable String kmSMasterKeyArn) {
    this.kmSMasterKeyArn = kmSMasterKeyArn;
  }


  public SSEDescription inaccessibleEncryptionDateTime(@javax.annotation.Nullable OffsetDateTime inaccessibleEncryptionDateTime) {
    this.inaccessibleEncryptionDateTime = inaccessibleEncryptionDateTime;
    return this;
  }

  /**
   * Indicates the time, in UNIX epoch date format, when DynamoDB detected that the table&#39;s KMS key was inaccessible. This attribute will automatically be cleared when DynamoDB detects that the table&#39;s KMS key is accessible again. DynamoDB will initiate the table archival process when table&#39;s KMS key remains inaccessible for more than seven days from this date.
   * @return inaccessibleEncryptionDateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getInaccessibleEncryptionDateTime() {
    return inaccessibleEncryptionDateTime;
  }

  public void setInaccessibleEncryptionDateTime(@javax.annotation.Nullable OffsetDateTime inaccessibleEncryptionDateTime) {
    this.inaccessibleEncryptionDateTime = inaccessibleEncryptionDateTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SSEDescription ssEDescription = (SSEDescription) o;
    return Objects.equals(this.status, ssEDescription.status) &&
        Objects.equals(this.ssEType, ssEDescription.ssEType) &&
        Objects.equals(this.kmSMasterKeyArn, ssEDescription.kmSMasterKeyArn) &&
        Objects.equals(this.inaccessibleEncryptionDateTime, ssEDescription.inaccessibleEncryptionDateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(status, ssEType, kmSMasterKeyArn, inaccessibleEncryptionDateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SSEDescription {\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    ssEType: ").append(toIndentedString(ssEType)).append("\n");
    sb.append("    kmSMasterKeyArn: ").append(toIndentedString(kmSMasterKeyArn)).append("\n");
    sb.append("    inaccessibleEncryptionDateTime: ").append(toIndentedString(inaccessibleEncryptionDateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("Status", "SSEType", "KMSMasterKeyArn", "InaccessibleEncryptionDateTime"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SSEDescription
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SSEDescription.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SSEDescription is not found in the empty JSON string", SSEDescription.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SSEDescription.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SSEDescription` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        SSEStatus.validateJsonElement(jsonObj.get("Status"));
      }
      // validate the optional field `SSEType`
      if (jsonObj.get("SSEType") != null && !jsonObj.get("SSEType").isJsonNull()) {
        SSEType.validateJsonElement(jsonObj.get("SSEType"));
      }
      if ((jsonObj.get("KMSMasterKeyArn") != null && !jsonObj.get("KMSMasterKeyArn").isJsonNull()) && !jsonObj.get("KMSMasterKeyArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `KMSMasterKeyArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("KMSMasterKeyArn").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SSEDescription.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SSEDescription' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SSEDescription> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SSEDescription.class));

       return (TypeAdapter<T>) new TypeAdapter<SSEDescription>() {
           @Override
           public void write(JsonWriter out, SSEDescription value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SSEDescription read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SSEDescription given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SSEDescription
   * @throws IOException if the JSON string is invalid with respect to SSEDescription
   */
  public static SSEDescription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SSEDescription.class);
  }

  /**
   * Convert an instance of SSEDescription to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

