/*
 * Amazon DynamoDB
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database, so that you don't have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.</p> <p>With DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic. You can scale up or scale down your tables' throughput capacity without downtime or performance degradation, and use the Amazon Web Services Management Console to monitor resource utilization and performance metrics.</p> <p>DynamoDB automatically spreads the data and traffic for your tables over a sufficient number of servers to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and automatically replicated across multiple Availability Zones in an Amazon Web Services Region, providing built-in high availability and data durability.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;Represents the data for an attribute.&lt;/p&gt; &lt;p&gt;Each attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes\&quot;&gt;Data Types&lt;/a&gt; in the &lt;i&gt;Amazon DynamoDB Developer Guide&lt;/i&gt;.&lt;/p&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T14:20:21.724079+05:30[Asia/Kolkata]", comments = "Generator version: 7.15.0")
public class AttributeValue {
  public static final String SERIALIZED_NAME_S = "S";
  @SerializedName(SERIALIZED_NAME_S)
  @javax.annotation.Nullable
  private String S;

  public static final String SERIALIZED_NAME_N = "N";
  @SerializedName(SERIALIZED_NAME_N)
  @javax.annotation.Nullable
  private String N;

  public static final String SERIALIZED_NAME_B = "B";
  @SerializedName(SERIALIZED_NAME_B)
  @javax.annotation.Nullable
  private String B;

  public static final String SERIALIZED_NAME_S_S = "SS";
  @SerializedName(SERIALIZED_NAME_S_S)
  @javax.annotation.Nullable
  private List<String> SS;

  public static final String SERIALIZED_NAME_N_S = "NS";
  @SerializedName(SERIALIZED_NAME_N_S)
  @javax.annotation.Nullable
  private List<String> NS;

  public static final String SERIALIZED_NAME_B_S = "BS";
  @SerializedName(SERIALIZED_NAME_B_S)
  @javax.annotation.Nullable
  private List<String> BS;

  public static final String SERIALIZED_NAME_M = "M";
  @SerializedName(SERIALIZED_NAME_M)
  @javax.annotation.Nullable
  private Map<String, AttributeValue> M;

  public static final String SERIALIZED_NAME_L = "L";
  @SerializedName(SERIALIZED_NAME_L)
  @javax.annotation.Nullable
  private List<AttributeValue> L;

  public static final String SERIALIZED_NAME_N_U_L_L = "NULL";
  @SerializedName(SERIALIZED_NAME_N_U_L_L)
  @javax.annotation.Nullable
  private Boolean NULL;

  public static final String SERIALIZED_NAME_B_O_O_L = "BOOL";
  @SerializedName(SERIALIZED_NAME_B_O_O_L)
  @javax.annotation.Nullable
  private Boolean BOOL;

  public AttributeValue() {
  }

  public AttributeValue S(@javax.annotation.Nullable String S) {
    this.S = S;
    return this;
  }

  /**
   * &lt;p&gt;An attribute of type String. For example:&lt;/p&gt; &lt;p&gt; &lt;code&gt;\&quot;S\&quot;: \&quot;Hello\&quot;&lt;/code&gt; &lt;/p&gt;
   * @return S
   */
  @javax.annotation.Nullable
  public String getS() {
    return S;
  }

  public void setS(@javax.annotation.Nullable String S) {
    this.S = S;
  }


  public AttributeValue N(@javax.annotation.Nullable String N) {
    this.N = N;
    return this;
  }

  /**
   * &lt;p&gt;An attribute of type Number. For example:&lt;/p&gt; &lt;p&gt; &lt;code&gt;\&quot;N\&quot;: \&quot;123.45\&quot;&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.&lt;/p&gt;
   * @return N
   */
  @javax.annotation.Nullable
  public String getN() {
    return N;
  }

  public void setN(@javax.annotation.Nullable String N) {
    this.N = N;
  }


  public AttributeValue B(@javax.annotation.Nullable String B) {
    this.B = B;
    return this;
  }

  /**
   * &lt;p&gt;An attribute of type Binary. For example:&lt;/p&gt; &lt;p&gt; &lt;code&gt;\&quot;B\&quot;: \&quot;dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\&quot;&lt;/code&gt; &lt;/p&gt;
   * @return B
   */
  @javax.annotation.Nullable
  public String getB() {
    return B;
  }

  public void setB(@javax.annotation.Nullable String B) {
    this.B = B;
  }


  public AttributeValue SS(@javax.annotation.Nullable List<String> SS) {
    this.SS = SS;
    return this;
  }

  public AttributeValue addSSItem(String SSItem) {
    if (this.SS == null) {
      this.SS = new ArrayList<>();
    }
    this.SS.add(SSItem);
    return this;
  }

  /**
   * &lt;p&gt;An attribute of type String Set. For example:&lt;/p&gt; &lt;p&gt; &lt;code&gt;\&quot;SS\&quot;: [\&quot;Giraffe\&quot;, \&quot;Hippo\&quot; ,\&quot;Zebra\&quot;]&lt;/code&gt; &lt;/p&gt;
   * @return SS
   */
  @javax.annotation.Nullable
  public List<String> getSS() {
    return SS;
  }

  public void setSS(@javax.annotation.Nullable List<String> SS) {
    this.SS = SS;
  }


  public AttributeValue NS(@javax.annotation.Nullable List<String> NS) {
    this.NS = NS;
    return this;
  }

  public AttributeValue addNSItem(String NSItem) {
    if (this.NS == null) {
      this.NS = new ArrayList<>();
    }
    this.NS.add(NSItem);
    return this;
  }

  /**
   * &lt;p&gt;An attribute of type Number Set. For example:&lt;/p&gt; &lt;p&gt; &lt;code&gt;\&quot;NS\&quot;: [\&quot;42.2\&quot;, \&quot;-19\&quot;, \&quot;7.5\&quot;, \&quot;3.14\&quot;]&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.&lt;/p&gt;
   * @return NS
   */
  @javax.annotation.Nullable
  public List<String> getNS() {
    return NS;
  }

  public void setNS(@javax.annotation.Nullable List<String> NS) {
    this.NS = NS;
  }


  public AttributeValue BS(@javax.annotation.Nullable List<String> BS) {
    this.BS = BS;
    return this;
  }

  public AttributeValue addBSItem(String BSItem) {
    if (this.BS == null) {
      this.BS = new ArrayList<>();
    }
    this.BS.add(BSItem);
    return this;
  }

  /**
   * &lt;p&gt;An attribute of type Binary Set. For example:&lt;/p&gt; &lt;p&gt; &lt;code&gt;\&quot;BS\&quot;: [\&quot;U3Vubnk&#x3D;\&quot;, \&quot;UmFpbnk&#x3D;\&quot;, \&quot;U25vd3k&#x3D;\&quot;]&lt;/code&gt; &lt;/p&gt;
   * @return BS
   */
  @javax.annotation.Nullable
  public List<String> getBS() {
    return BS;
  }

  public void setBS(@javax.annotation.Nullable List<String> BS) {
    this.BS = BS;
  }


  public AttributeValue M(@javax.annotation.Nullable Map<String, AttributeValue> M) {
    this.M = M;
    return this;
  }

  public AttributeValue putMItem(String key, AttributeValue MItem) {
    if (this.M == null) {
      this.M = new HashMap<>();
    }
    this.M.put(key, MItem);
    return this;
  }

  /**
   * &lt;p&gt;An attribute of type Map. For example:&lt;/p&gt; &lt;p&gt; &lt;code&gt;\&quot;M\&quot;: {\&quot;Name\&quot;: {\&quot;S\&quot;: \&quot;Joe\&quot;}, \&quot;Age\&quot;: {\&quot;N\&quot;: \&quot;35\&quot;}}&lt;/code&gt; &lt;/p&gt;
   * @return M
   */
  @javax.annotation.Nullable
  public Map<String, AttributeValue> getM() {
    return M;
  }

  public void setM(@javax.annotation.Nullable Map<String, AttributeValue> M) {
    this.M = M;
  }


  public AttributeValue L(@javax.annotation.Nullable List<AttributeValue> L) {
    this.L = L;
    return this;
  }

  public AttributeValue addLItem(AttributeValue LItem) {
    if (this.L == null) {
      this.L = new ArrayList<>();
    }
    this.L.add(LItem);
    return this;
  }

  /**
   * &lt;p&gt;An attribute of type List. For example:&lt;/p&gt; &lt;p&gt; &lt;code&gt;\&quot;L\&quot;: [ {\&quot;S\&quot;: \&quot;Cookies\&quot;} , {\&quot;S\&quot;: \&quot;Coffee\&quot;}, {\&quot;N\&quot;: \&quot;3.14159\&quot;}]&lt;/code&gt; &lt;/p&gt;
   * @return L
   */
  @javax.annotation.Nullable
  public List<AttributeValue> getL() {
    return L;
  }

  public void setL(@javax.annotation.Nullable List<AttributeValue> L) {
    this.L = L;
  }


  public AttributeValue NULL(@javax.annotation.Nullable Boolean NULL) {
    this.NULL = NULL;
    return this;
  }

  /**
   * &lt;p&gt;An attribute of type Null. For example:&lt;/p&gt; &lt;p&gt; &lt;code&gt;\&quot;NULL\&quot;: true&lt;/code&gt; &lt;/p&gt;
   * @return NULL
   */
  @javax.annotation.Nullable
  public Boolean getNULL() {
    return NULL;
  }

  public void setNULL(@javax.annotation.Nullable Boolean NULL) {
    this.NULL = NULL;
  }


  public AttributeValue BOOL(@javax.annotation.Nullable Boolean BOOL) {
    this.BOOL = BOOL;
    return this;
  }

  /**
   * &lt;p&gt;An attribute of type Boolean. For example:&lt;/p&gt; &lt;p&gt; &lt;code&gt;\&quot;BOOL\&quot;: true&lt;/code&gt; &lt;/p&gt;
   * @return BOOL
   */
  @javax.annotation.Nullable
  public Boolean getBOOL() {
    return BOOL;
  }

  public void setBOOL(@javax.annotation.Nullable Boolean BOOL) {
    this.BOOL = BOOL;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AttributeValue attributeValue = (AttributeValue) o;
    return Objects.equals(this.S, attributeValue.S) &&
        Objects.equals(this.N, attributeValue.N) &&
        Objects.equals(this.B, attributeValue.B) &&
        Objects.equals(this.SS, attributeValue.SS) &&
        Objects.equals(this.NS, attributeValue.NS) &&
        Objects.equals(this.BS, attributeValue.BS) &&
        Objects.equals(this.M, attributeValue.M) &&
        Objects.equals(this.L, attributeValue.L) &&
        Objects.equals(this.NULL, attributeValue.NULL) &&
        Objects.equals(this.BOOL, attributeValue.BOOL);
  }

  @Override
  public int hashCode() {
    return Objects.hash(S, N, B, SS, NS, BS, M, L, NULL, BOOL);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AttributeValue {\n");
    sb.append("    S: ").append(toIndentedString(S)).append("\n");
    sb.append("    N: ").append(toIndentedString(N)).append("\n");
    sb.append("    B: ").append(toIndentedString(B)).append("\n");
    sb.append("    SS: ").append(toIndentedString(SS)).append("\n");
    sb.append("    NS: ").append(toIndentedString(NS)).append("\n");
    sb.append("    BS: ").append(toIndentedString(BS)).append("\n");
    sb.append("    M: ").append(toIndentedString(M)).append("\n");
    sb.append("    L: ").append(toIndentedString(L)).append("\n");
    sb.append("    NULL: ").append(toIndentedString(NULL)).append("\n");
    sb.append("    BOOL: ").append(toIndentedString(BOOL)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("S", "N", "B", "SS", "NS", "BS", "M", "L", "NULL", "BOOL"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AttributeValue
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AttributeValue.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AttributeValue is not found in the empty JSON string", AttributeValue.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AttributeValue.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AttributeValue` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("S") != null && !jsonObj.get("S").isJsonNull()) && !jsonObj.get("S").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `S` to be a primitive type in the JSON string but got `%s`", jsonObj.get("S").toString()));
      }
      if ((jsonObj.get("N") != null && !jsonObj.get("N").isJsonNull()) && !jsonObj.get("N").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `N` to be a primitive type in the JSON string but got `%s`", jsonObj.get("N").toString()));
      }
      if ((jsonObj.get("B") != null && !jsonObj.get("B").isJsonNull()) && !jsonObj.get("B").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `B` to be a primitive type in the JSON string but got `%s`", jsonObj.get("B").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("SS") != null && !jsonObj.get("SS").isJsonNull() && !jsonObj.get("SS").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `SS` to be an array in the JSON string but got `%s`", jsonObj.get("SS").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("NS") != null && !jsonObj.get("NS").isJsonNull() && !jsonObj.get("NS").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `NS` to be an array in the JSON string but got `%s`", jsonObj.get("NS").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("BS") != null && !jsonObj.get("BS").isJsonNull() && !jsonObj.get("BS").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `BS` to be an array in the JSON string but got `%s`", jsonObj.get("BS").toString()));
      }
      if (jsonObj.get("L") != null && !jsonObj.get("L").isJsonNull()) {
        JsonArray jsonArrayL = jsonObj.getAsJsonArray("L");
        if (jsonArrayL != null) {
          // ensure the json data is an array
          if (!jsonObj.get("L").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `L` to be an array in the JSON string but got `%s`", jsonObj.get("L").toString()));
          }

          // validate the optional field `L` (array)
          for (int i = 0; i < jsonArrayL.size(); i++) {
            AttributeValue.validateJsonElement(jsonArrayL.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AttributeValue.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AttributeValue' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AttributeValue> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AttributeValue.class));

       return (TypeAdapter<T>) new TypeAdapter<AttributeValue>() {
           @Override
           public void write(JsonWriter out, AttributeValue value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AttributeValue read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AttributeValue given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AttributeValue
   * @throws IOException if the JSON string is invalid with respect to AttributeValue
   */
  public static AttributeValue fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AttributeValue.class);
  }

  /**
   * Convert an instance of AttributeValue to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

