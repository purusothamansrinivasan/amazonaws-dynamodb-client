/*
 * Amazon DynamoDB
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database, so that you don't have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.</p> <p>With DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic. You can scale up or scale down your tables' throughput capacity without downtime or performance degradation, and use the Amazon Web Services Management Console to monitor resource utilization and performance metrics.</p> <p>DynamoDB automatically spreads the data and traffic for your tables over a sufficient number of servers to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and automatically replicated across multiple Availability Zones in an Amazon Web Services Region, providing built-in high availability and data durability.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AttributeValue;
import org.openapitools.client.model.ReturnConsumedCapacity;
import org.openapitools.client.model.ReturnValuesOnConditionCheckFailure;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ExecuteStatementInput
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T14:20:21.724079+05:30[Asia/Kolkata]", comments = "Generator version: 7.15.0")
public class ExecuteStatementInput {
  public static final String SERIALIZED_NAME_STATEMENT = "Statement";
  @SerializedName(SERIALIZED_NAME_STATEMENT)
  @javax.annotation.Nonnull
  private String statement;

  public static final String SERIALIZED_NAME_PARAMETERS = "Parameters";
  @SerializedName(SERIALIZED_NAME_PARAMETERS)
  @javax.annotation.Nullable
  private List<AttributeValue> parameters;

  public static final String SERIALIZED_NAME_CONSISTENT_READ = "ConsistentRead";
  @SerializedName(SERIALIZED_NAME_CONSISTENT_READ)
  @javax.annotation.Nullable
  private Boolean consistentRead;

  public static final String SERIALIZED_NAME_NEXT_TOKEN = "NextToken";
  @SerializedName(SERIALIZED_NAME_NEXT_TOKEN)
  @javax.annotation.Nullable
  private String nextToken;

  public static final String SERIALIZED_NAME_RETURN_CONSUMED_CAPACITY = "ReturnConsumedCapacity";
  @SerializedName(SERIALIZED_NAME_RETURN_CONSUMED_CAPACITY)
  @javax.annotation.Nullable
  private ReturnConsumedCapacity returnConsumedCapacity;

  public static final String SERIALIZED_NAME_LIMIT = "Limit";
  @SerializedName(SERIALIZED_NAME_LIMIT)
  @javax.annotation.Nullable
  private Integer limit;

  public static final String SERIALIZED_NAME_RETURN_VALUES_ON_CONDITION_CHECK_FAILURE = "ReturnValuesOnConditionCheckFailure";
  @SerializedName(SERIALIZED_NAME_RETURN_VALUES_ON_CONDITION_CHECK_FAILURE)
  @javax.annotation.Nullable
  private ReturnValuesOnConditionCheckFailure returnValuesOnConditionCheckFailure;

  public ExecuteStatementInput() {
  }

  public ExecuteStatementInput statement(@javax.annotation.Nonnull String statement) {
    this.statement = statement;
    return this;
  }

  /**
   * The PartiQL statement representing the operation to run.
   * @return statement
   */
  @javax.annotation.Nonnull
  public String getStatement() {
    return statement;
  }

  public void setStatement(@javax.annotation.Nonnull String statement) {
    this.statement = statement;
  }


  public ExecuteStatementInput parameters(@javax.annotation.Nullable List<AttributeValue> parameters) {
    this.parameters = parameters;
    return this;
  }

  public ExecuteStatementInput addParametersItem(AttributeValue parametersItem) {
    if (this.parameters == null) {
      this.parameters = new ArrayList<>();
    }
    this.parameters.add(parametersItem);
    return this;
  }

  /**
   * The parameters for the PartiQL statement, if any.
   * @return parameters
   */
  @javax.annotation.Nullable
  public List<AttributeValue> getParameters() {
    return parameters;
  }

  public void setParameters(@javax.annotation.Nullable List<AttributeValue> parameters) {
    this.parameters = parameters;
  }


  public ExecuteStatementInput consistentRead(@javax.annotation.Nullable Boolean consistentRead) {
    this.consistentRead = consistentRead;
    return this;
  }

  /**
   * The consistency of a read operation. If set to &lt;code&gt;true&lt;/code&gt;, then a strongly consistent read is used; otherwise, an eventually consistent read is used.
   * @return consistentRead
   */
  @javax.annotation.Nullable
  public Boolean getConsistentRead() {
    return consistentRead;
  }

  public void setConsistentRead(@javax.annotation.Nullable Boolean consistentRead) {
    this.consistentRead = consistentRead;
  }


  public ExecuteStatementInput nextToken(@javax.annotation.Nullable String nextToken) {
    this.nextToken = nextToken;
    return this;
  }

  /**
   * Set this value to get remaining results, if &lt;code&gt;NextToken&lt;/code&gt; was returned in the statement response.
   * @return nextToken
   */
  @javax.annotation.Nullable
  public String getNextToken() {
    return nextToken;
  }

  public void setNextToken(@javax.annotation.Nullable String nextToken) {
    this.nextToken = nextToken;
  }


  public ExecuteStatementInput returnConsumedCapacity(@javax.annotation.Nullable ReturnConsumedCapacity returnConsumedCapacity) {
    this.returnConsumedCapacity = returnConsumedCapacity;
    return this;
  }

  /**
   * Get returnConsumedCapacity
   * @return returnConsumedCapacity
   */
  @javax.annotation.Nullable
  public ReturnConsumedCapacity getReturnConsumedCapacity() {
    return returnConsumedCapacity;
  }

  public void setReturnConsumedCapacity(@javax.annotation.Nullable ReturnConsumedCapacity returnConsumedCapacity) {
    this.returnConsumedCapacity = returnConsumedCapacity;
  }


  public ExecuteStatementInput limit(@javax.annotation.Nullable Integer limit) {
    this.limit = limit;
    return this;
  }

  /**
   * The maximum number of items to evaluate (not necessarily the number of matching items). If DynamoDB processes the number of items up to the limit while processing the results, it stops the operation and returns the matching values up to that point, along with a key in &lt;code&gt;LastEvaluatedKey&lt;/code&gt; to apply in a subsequent operation so you can pick up where you left off. Also, if the processed dataset size exceeds 1 MB before DynamoDB reaches this limit, it stops the operation and returns the matching values up to the limit, and a key in &lt;code&gt;LastEvaluatedKey&lt;/code&gt; to apply in a subsequent operation to continue the operation. 
   * minimum: 1
   * @return limit
   */
  @javax.annotation.Nullable
  public Integer getLimit() {
    return limit;
  }

  public void setLimit(@javax.annotation.Nullable Integer limit) {
    this.limit = limit;
  }


  public ExecuteStatementInput returnValuesOnConditionCheckFailure(@javax.annotation.Nullable ReturnValuesOnConditionCheckFailure returnValuesOnConditionCheckFailure) {
    this.returnValuesOnConditionCheckFailure = returnValuesOnConditionCheckFailure;
    return this;
  }

  /**
   * &lt;p&gt;An optional parameter that returns the item attributes for an &lt;code&gt;ExecuteStatement&lt;/code&gt; operation that failed a condition check.&lt;/p&gt; &lt;p&gt;There is no additional cost associated with requesting a return value aside from the small network and processing overhead of receiving a larger response. No read capacity units are consumed.&lt;/p&gt;
   * @return returnValuesOnConditionCheckFailure
   */
  @javax.annotation.Nullable
  public ReturnValuesOnConditionCheckFailure getReturnValuesOnConditionCheckFailure() {
    return returnValuesOnConditionCheckFailure;
  }

  public void setReturnValuesOnConditionCheckFailure(@javax.annotation.Nullable ReturnValuesOnConditionCheckFailure returnValuesOnConditionCheckFailure) {
    this.returnValuesOnConditionCheckFailure = returnValuesOnConditionCheckFailure;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExecuteStatementInput executeStatementInput = (ExecuteStatementInput) o;
    return Objects.equals(this.statement, executeStatementInput.statement) &&
        Objects.equals(this.parameters, executeStatementInput.parameters) &&
        Objects.equals(this.consistentRead, executeStatementInput.consistentRead) &&
        Objects.equals(this.nextToken, executeStatementInput.nextToken) &&
        Objects.equals(this.returnConsumedCapacity, executeStatementInput.returnConsumedCapacity) &&
        Objects.equals(this.limit, executeStatementInput.limit) &&
        Objects.equals(this.returnValuesOnConditionCheckFailure, executeStatementInput.returnValuesOnConditionCheckFailure);
  }

  @Override
  public int hashCode() {
    return Objects.hash(statement, parameters, consistentRead, nextToken, returnConsumedCapacity, limit, returnValuesOnConditionCheckFailure);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExecuteStatementInput {\n");
    sb.append("    statement: ").append(toIndentedString(statement)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    consistentRead: ").append(toIndentedString(consistentRead)).append("\n");
    sb.append("    nextToken: ").append(toIndentedString(nextToken)).append("\n");
    sb.append("    returnConsumedCapacity: ").append(toIndentedString(returnConsumedCapacity)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    returnValuesOnConditionCheckFailure: ").append(toIndentedString(returnValuesOnConditionCheckFailure)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("Statement", "Parameters", "ConsistentRead", "NextToken", "ReturnConsumedCapacity", "Limit", "ReturnValuesOnConditionCheckFailure"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("Statement"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExecuteStatementInput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExecuteStatementInput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExecuteStatementInput is not found in the empty JSON string", ExecuteStatementInput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExecuteStatementInput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExecuteStatementInput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ExecuteStatementInput.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("Statement").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Statement` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Statement").toString()));
      }
      if (jsonObj.get("Parameters") != null && !jsonObj.get("Parameters").isJsonNull()) {
        JsonArray jsonArrayparameters = jsonObj.getAsJsonArray("Parameters");
        if (jsonArrayparameters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Parameters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Parameters` to be an array in the JSON string but got `%s`", jsonObj.get("Parameters").toString()));
          }

          // validate the optional field `Parameters` (array)
          for (int i = 0; i < jsonArrayparameters.size(); i++) {
            AttributeValue.validateJsonElement(jsonArrayparameters.get(i));
          };
        }
      }
      if ((jsonObj.get("NextToken") != null && !jsonObj.get("NextToken").isJsonNull()) && !jsonObj.get("NextToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NextToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NextToken").toString()));
      }
      // validate the optional field `ReturnConsumedCapacity`
      if (jsonObj.get("ReturnConsumedCapacity") != null && !jsonObj.get("ReturnConsumedCapacity").isJsonNull()) {
        ReturnConsumedCapacity.validateJsonElement(jsonObj.get("ReturnConsumedCapacity"));
      }
      // validate the optional field `ReturnValuesOnConditionCheckFailure`
      if (jsonObj.get("ReturnValuesOnConditionCheckFailure") != null && !jsonObj.get("ReturnValuesOnConditionCheckFailure").isJsonNull()) {
        ReturnValuesOnConditionCheckFailure.validateJsonElement(jsonObj.get("ReturnValuesOnConditionCheckFailure"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExecuteStatementInput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExecuteStatementInput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExecuteStatementInput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExecuteStatementInput.class));

       return (TypeAdapter<T>) new TypeAdapter<ExecuteStatementInput>() {
           @Override
           public void write(JsonWriter out, ExecuteStatementInput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExecuteStatementInput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExecuteStatementInput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExecuteStatementInput
   * @throws IOException if the JSON string is invalid with respect to ExecuteStatementInput
   */
  public static ExecuteStatementInput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExecuteStatementInput.class);
  }

  /**
   * Convert an instance of ExecuteStatementInput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

