/*
 * Amazon DynamoDB
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database, so that you don't have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.</p> <p>With DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic. You can scale up or scale down your tables' throughput capacity without downtime or performance degradation, and use the Amazon Web Services Management Console to monitor resource utilization and performance metrics.</p> <p>DynamoDB automatically spreads the data and traffic for your tables over a sufficient number of servers to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and automatically replicated across multiple Availability Zones in an Amazon Web Services Region, providing built-in high availability and data durability.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.ReturnConsumedCapacity;
import org.openapitools.client.model.ReturnItemCollectionMetrics;
import org.openapitools.client.model.WriteRequest;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents the input of a &lt;code&gt;BatchWriteItem&lt;/code&gt; operation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T14:20:21.724079+05:30[Asia/Kolkata]", comments = "Generator version: 7.15.0")
public class BatchWriteItemInput {
  public static final String SERIALIZED_NAME_REQUEST_ITEMS = "RequestItems";
  @SerializedName(SERIALIZED_NAME_REQUEST_ITEMS)
  @javax.annotation.Nonnull
  private Map<String, List<WriteRequest>> requestItems;

  public static final String SERIALIZED_NAME_RETURN_CONSUMED_CAPACITY = "ReturnConsumedCapacity";
  @SerializedName(SERIALIZED_NAME_RETURN_CONSUMED_CAPACITY)
  @javax.annotation.Nullable
  private ReturnConsumedCapacity returnConsumedCapacity;

  public static final String SERIALIZED_NAME_RETURN_ITEM_COLLECTION_METRICS = "ReturnItemCollectionMetrics";
  @SerializedName(SERIALIZED_NAME_RETURN_ITEM_COLLECTION_METRICS)
  @javax.annotation.Nullable
  private ReturnItemCollectionMetrics returnItemCollectionMetrics;

  public BatchWriteItemInput() {
  }

  public BatchWriteItemInput requestItems(@javax.annotation.Nonnull Map<String, List<WriteRequest>> requestItems) {
    this.requestItems = requestItems;
    return this;
  }

  public BatchWriteItemInput putRequestItemsItem(String key, List<WriteRequest> requestItemsItem) {
    if (this.requestItems == null) {
      this.requestItems = new HashMap<>();
    }
    this.requestItems.put(key, requestItemsItem);
    return this;
  }

  /**
   * &lt;p&gt;A map of one or more table names and, for each table, a list of operations to be performed (&lt;code&gt;DeleteRequest&lt;/code&gt; or &lt;code&gt;PutRequest&lt;/code&gt;). Each element in the map consists of the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DeleteRequest&lt;/code&gt; - Perform a &lt;code&gt;DeleteItem&lt;/code&gt; operation on the specified item. The item to be deleted is identified by a &lt;code&gt;Key&lt;/code&gt; subelement:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Key&lt;/code&gt; - A map of primary key attribute values that uniquely identify the item. Each entry in this map consists of an attribute name and an attribute value. For each primary key, you must provide &lt;i&gt;all&lt;/i&gt; of the key attributes. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide values for &lt;i&gt;both&lt;/i&gt; the partition key and the sort key.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;PutRequest&lt;/code&gt; - Perform a &lt;code&gt;PutItem&lt;/code&gt; operation on the specified item. The item to be put is identified by an &lt;code&gt;Item&lt;/code&gt; subelement:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Item&lt;/code&gt; - A map of attributes and their values. Each entry in this map consists of an attribute name and an attribute value. Attribute values must not be null; string and binary type attributes must have lengths greater than zero; and set type attributes must not be empty. Requests that contain empty values are rejected with a &lt;code&gt;ValidationException&lt;/code&gt; exception.&lt;/p&gt; &lt;p&gt;If you specify any attributes that are part of an index key, then the data types for those attributes must match those of the schema in the table&#39;s attribute definition.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt;
   * @return requestItems
   */
  @javax.annotation.Nonnull
  public Map<String, List<WriteRequest>> getRequestItems() {
    return requestItems;
  }

  public void setRequestItems(@javax.annotation.Nonnull Map<String, List<WriteRequest>> requestItems) {
    this.requestItems = requestItems;
  }


  public BatchWriteItemInput returnConsumedCapacity(@javax.annotation.Nullable ReturnConsumedCapacity returnConsumedCapacity) {
    this.returnConsumedCapacity = returnConsumedCapacity;
    return this;
  }

  /**
   * Get returnConsumedCapacity
   * @return returnConsumedCapacity
   */
  @javax.annotation.Nullable
  public ReturnConsumedCapacity getReturnConsumedCapacity() {
    return returnConsumedCapacity;
  }

  public void setReturnConsumedCapacity(@javax.annotation.Nullable ReturnConsumedCapacity returnConsumedCapacity) {
    this.returnConsumedCapacity = returnConsumedCapacity;
  }


  public BatchWriteItemInput returnItemCollectionMetrics(@javax.annotation.Nullable ReturnItemCollectionMetrics returnItemCollectionMetrics) {
    this.returnItemCollectionMetrics = returnItemCollectionMetrics;
    return this;
  }

  /**
   * Determines whether item collection metrics are returned. If set to &lt;code&gt;SIZE&lt;/code&gt;, the response includes statistics about item collections, if any, that were modified during the operation are returned in the response. If set to &lt;code&gt;NONE&lt;/code&gt; (the default), no statistics are returned.
   * @return returnItemCollectionMetrics
   */
  @javax.annotation.Nullable
  public ReturnItemCollectionMetrics getReturnItemCollectionMetrics() {
    return returnItemCollectionMetrics;
  }

  public void setReturnItemCollectionMetrics(@javax.annotation.Nullable ReturnItemCollectionMetrics returnItemCollectionMetrics) {
    this.returnItemCollectionMetrics = returnItemCollectionMetrics;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BatchWriteItemInput batchWriteItemInput = (BatchWriteItemInput) o;
    return Objects.equals(this.requestItems, batchWriteItemInput.requestItems) &&
        Objects.equals(this.returnConsumedCapacity, batchWriteItemInput.returnConsumedCapacity) &&
        Objects.equals(this.returnItemCollectionMetrics, batchWriteItemInput.returnItemCollectionMetrics);
  }

  @Override
  public int hashCode() {
    return Objects.hash(requestItems, returnConsumedCapacity, returnItemCollectionMetrics);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BatchWriteItemInput {\n");
    sb.append("    requestItems: ").append(toIndentedString(requestItems)).append("\n");
    sb.append("    returnConsumedCapacity: ").append(toIndentedString(returnConsumedCapacity)).append("\n");
    sb.append("    returnItemCollectionMetrics: ").append(toIndentedString(returnItemCollectionMetrics)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("RequestItems", "ReturnConsumedCapacity", "ReturnItemCollectionMetrics"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("RequestItems"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BatchWriteItemInput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BatchWriteItemInput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BatchWriteItemInput is not found in the empty JSON string", BatchWriteItemInput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BatchWriteItemInput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BatchWriteItemInput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BatchWriteItemInput.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ReturnConsumedCapacity`
      if (jsonObj.get("ReturnConsumedCapacity") != null && !jsonObj.get("ReturnConsumedCapacity").isJsonNull()) {
        ReturnConsumedCapacity.validateJsonElement(jsonObj.get("ReturnConsumedCapacity"));
      }
      // validate the optional field `ReturnItemCollectionMetrics`
      if (jsonObj.get("ReturnItemCollectionMetrics") != null && !jsonObj.get("ReturnItemCollectionMetrics").isJsonNull()) {
        ReturnItemCollectionMetrics.validateJsonElement(jsonObj.get("ReturnItemCollectionMetrics"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BatchWriteItemInput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BatchWriteItemInput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BatchWriteItemInput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BatchWriteItemInput.class));

       return (TypeAdapter<T>) new TypeAdapter<BatchWriteItemInput>() {
           @Override
           public void write(JsonWriter out, BatchWriteItemInput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BatchWriteItemInput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BatchWriteItemInput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BatchWriteItemInput
   * @throws IOException if the JSON string is invalid with respect to BatchWriteItemInput
   */
  public static BatchWriteItemInput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BatchWriteItemInput.class);
  }

  /**
   * Convert an instance of BatchWriteItemInput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

