/*
 * Amazon DynamoDB
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database, so that you don't have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.</p> <p>With DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic. You can scale up or scale down your tables' throughput capacity without downtime or performance degradation, and use the Amazon Web Services Management Console to monitor resource utilization and performance metrics.</p> <p>DynamoDB automatically spreads the data and traffic for your tables over a sufficient number of servers to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and automatically replicated across multiple Availability Zones in an Amazon Web Services Region, providing built-in high availability and data durability.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ProvisionedThroughputOverride;
import org.openapitools.client.model.ReplicaGlobalSecondaryIndexDescription;
import org.openapitools.client.model.ReplicaStatus;
import org.openapitools.client.model.TableClassSummary;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains the details of the replica.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T14:20:21.724079+05:30[Asia/Kolkata]", comments = "Generator version: 7.15.0")
public class ReplicaDescription {
  public static final String SERIALIZED_NAME_REGION_NAME = "RegionName";
  @SerializedName(SERIALIZED_NAME_REGION_NAME)
  @javax.annotation.Nullable
  private String regionName;

  public static final String SERIALIZED_NAME_REPLICA_STATUS = "ReplicaStatus";
  @SerializedName(SERIALIZED_NAME_REPLICA_STATUS)
  @javax.annotation.Nullable
  private ReplicaStatus replicaStatus;

  public static final String SERIALIZED_NAME_REPLICA_STATUS_DESCRIPTION = "ReplicaStatusDescription";
  @SerializedName(SERIALIZED_NAME_REPLICA_STATUS_DESCRIPTION)
  @javax.annotation.Nullable
  private String replicaStatusDescription;

  public static final String SERIALIZED_NAME_REPLICA_STATUS_PERCENT_PROGRESS = "ReplicaStatusPercentProgress";
  @SerializedName(SERIALIZED_NAME_REPLICA_STATUS_PERCENT_PROGRESS)
  @javax.annotation.Nullable
  private String replicaStatusPercentProgress;

  public static final String SERIALIZED_NAME_KM_S_MASTER_KEY_ID = "KMSMasterKeyId";
  @SerializedName(SERIALIZED_NAME_KM_S_MASTER_KEY_ID)
  @javax.annotation.Nullable
  private String kmSMasterKeyId;

  public static final String SERIALIZED_NAME_PROVISIONED_THROUGHPUT_OVERRIDE = "ProvisionedThroughputOverride";
  @SerializedName(SERIALIZED_NAME_PROVISIONED_THROUGHPUT_OVERRIDE)
  @javax.annotation.Nullable
  private ProvisionedThroughputOverride provisionedThroughputOverride;

  public static final String SERIALIZED_NAME_GLOBAL_SECONDARY_INDEXES = "GlobalSecondaryIndexes";
  @SerializedName(SERIALIZED_NAME_GLOBAL_SECONDARY_INDEXES)
  @javax.annotation.Nullable
  private List<ReplicaGlobalSecondaryIndexDescription> globalSecondaryIndexes;

  public static final String SERIALIZED_NAME_REPLICA_INACCESSIBLE_DATE_TIME = "ReplicaInaccessibleDateTime";
  @SerializedName(SERIALIZED_NAME_REPLICA_INACCESSIBLE_DATE_TIME)
  @javax.annotation.Nullable
  private OffsetDateTime replicaInaccessibleDateTime;

  public static final String SERIALIZED_NAME_REPLICA_TABLE_CLASS_SUMMARY = "ReplicaTableClassSummary";
  @SerializedName(SERIALIZED_NAME_REPLICA_TABLE_CLASS_SUMMARY)
  @javax.annotation.Nullable
  private TableClassSummary replicaTableClassSummary;

  public ReplicaDescription() {
  }

  public ReplicaDescription regionName(@javax.annotation.Nullable String regionName) {
    this.regionName = regionName;
    return this;
  }

  /**
   * The name of the Region.
   * @return regionName
   */
  @javax.annotation.Nullable
  public String getRegionName() {
    return regionName;
  }

  public void setRegionName(@javax.annotation.Nullable String regionName) {
    this.regionName = regionName;
  }


  public ReplicaDescription replicaStatus(@javax.annotation.Nullable ReplicaStatus replicaStatus) {
    this.replicaStatus = replicaStatus;
    return this;
  }

  /**
   * &lt;p&gt;The current state of the replica:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;CREATING&lt;/code&gt; - The replica is being created.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;UPDATING&lt;/code&gt; - The replica is being updated.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DELETING&lt;/code&gt; - The replica is being deleted.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ACTIVE&lt;/code&gt; - The replica is ready for use.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;REGION_DISABLED&lt;/code&gt; - The replica is inaccessible because the Amazon Web Services Region has been disabled.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If the Amazon Web Services Region remains inaccessible for more than 20 hours, DynamoDB will remove this replica from the replication group. The replica will not be deleted and replication will stop from and to this region.&lt;/p&gt; &lt;/note&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;INACCESSIBLE_ENCRYPTION_CREDENTIALS &lt;/code&gt; - The KMS key used to encrypt the table is inaccessible.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If the KMS key remains inaccessible for more than 20 hours, DynamoDB will remove this replica from the replication group. The replica will not be deleted and replication will stop from and to this region.&lt;/p&gt; &lt;/note&gt; &lt;/li&gt; &lt;/ul&gt;
   * @return replicaStatus
   */
  @javax.annotation.Nullable
  public ReplicaStatus getReplicaStatus() {
    return replicaStatus;
  }

  public void setReplicaStatus(@javax.annotation.Nullable ReplicaStatus replicaStatus) {
    this.replicaStatus = replicaStatus;
  }


  public ReplicaDescription replicaStatusDescription(@javax.annotation.Nullable String replicaStatusDescription) {
    this.replicaStatusDescription = replicaStatusDescription;
    return this;
  }

  /**
   * Detailed information about the replica status.
   * @return replicaStatusDescription
   */
  @javax.annotation.Nullable
  public String getReplicaStatusDescription() {
    return replicaStatusDescription;
  }

  public void setReplicaStatusDescription(@javax.annotation.Nullable String replicaStatusDescription) {
    this.replicaStatusDescription = replicaStatusDescription;
  }


  public ReplicaDescription replicaStatusPercentProgress(@javax.annotation.Nullable String replicaStatusPercentProgress) {
    this.replicaStatusPercentProgress = replicaStatusPercentProgress;
    return this;
  }

  /**
   * Specifies the progress of a Create, Update, or Delete action on the replica as a percentage.
   * @return replicaStatusPercentProgress
   */
  @javax.annotation.Nullable
  public String getReplicaStatusPercentProgress() {
    return replicaStatusPercentProgress;
  }

  public void setReplicaStatusPercentProgress(@javax.annotation.Nullable String replicaStatusPercentProgress) {
    this.replicaStatusPercentProgress = replicaStatusPercentProgress;
  }


  public ReplicaDescription kmSMasterKeyId(@javax.annotation.Nullable String kmSMasterKeyId) {
    this.kmSMasterKeyId = kmSMasterKeyId;
    return this;
  }

  /**
   * The KMS key of the replica that will be used for KMS encryption.
   * @return kmSMasterKeyId
   */
  @javax.annotation.Nullable
  public String getKmSMasterKeyId() {
    return kmSMasterKeyId;
  }

  public void setKmSMasterKeyId(@javax.annotation.Nullable String kmSMasterKeyId) {
    this.kmSMasterKeyId = kmSMasterKeyId;
  }


  public ReplicaDescription provisionedThroughputOverride(@javax.annotation.Nullable ProvisionedThroughputOverride provisionedThroughputOverride) {
    this.provisionedThroughputOverride = provisionedThroughputOverride;
    return this;
  }

  /**
   * Replica-specific provisioned throughput. If not described, uses the source table&#39;s provisioned throughput settings.
   * @return provisionedThroughputOverride
   */
  @javax.annotation.Nullable
  public ProvisionedThroughputOverride getProvisionedThroughputOverride() {
    return provisionedThroughputOverride;
  }

  public void setProvisionedThroughputOverride(@javax.annotation.Nullable ProvisionedThroughputOverride provisionedThroughputOverride) {
    this.provisionedThroughputOverride = provisionedThroughputOverride;
  }


  public ReplicaDescription globalSecondaryIndexes(@javax.annotation.Nullable List<ReplicaGlobalSecondaryIndexDescription> globalSecondaryIndexes) {
    this.globalSecondaryIndexes = globalSecondaryIndexes;
    return this;
  }

  public ReplicaDescription addGlobalSecondaryIndexesItem(ReplicaGlobalSecondaryIndexDescription globalSecondaryIndexesItem) {
    if (this.globalSecondaryIndexes == null) {
      this.globalSecondaryIndexes = new ArrayList<>();
    }
    this.globalSecondaryIndexes.add(globalSecondaryIndexesItem);
    return this;
  }

  /**
   * Replica-specific global secondary index settings.
   * @return globalSecondaryIndexes
   */
  @javax.annotation.Nullable
  public List<ReplicaGlobalSecondaryIndexDescription> getGlobalSecondaryIndexes() {
    return globalSecondaryIndexes;
  }

  public void setGlobalSecondaryIndexes(@javax.annotation.Nullable List<ReplicaGlobalSecondaryIndexDescription> globalSecondaryIndexes) {
    this.globalSecondaryIndexes = globalSecondaryIndexes;
  }


  public ReplicaDescription replicaInaccessibleDateTime(@javax.annotation.Nullable OffsetDateTime replicaInaccessibleDateTime) {
    this.replicaInaccessibleDateTime = replicaInaccessibleDateTime;
    return this;
  }

  /**
   * The time at which the replica was first detected as inaccessible. To determine cause of inaccessibility check the &lt;code&gt;ReplicaStatus&lt;/code&gt; property.
   * @return replicaInaccessibleDateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getReplicaInaccessibleDateTime() {
    return replicaInaccessibleDateTime;
  }

  public void setReplicaInaccessibleDateTime(@javax.annotation.Nullable OffsetDateTime replicaInaccessibleDateTime) {
    this.replicaInaccessibleDateTime = replicaInaccessibleDateTime;
  }


  public ReplicaDescription replicaTableClassSummary(@javax.annotation.Nullable TableClassSummary replicaTableClassSummary) {
    this.replicaTableClassSummary = replicaTableClassSummary;
    return this;
  }

  /**
   * Get replicaTableClassSummary
   * @return replicaTableClassSummary
   */
  @javax.annotation.Nullable
  public TableClassSummary getReplicaTableClassSummary() {
    return replicaTableClassSummary;
  }

  public void setReplicaTableClassSummary(@javax.annotation.Nullable TableClassSummary replicaTableClassSummary) {
    this.replicaTableClassSummary = replicaTableClassSummary;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReplicaDescription replicaDescription = (ReplicaDescription) o;
    return Objects.equals(this.regionName, replicaDescription.regionName) &&
        Objects.equals(this.replicaStatus, replicaDescription.replicaStatus) &&
        Objects.equals(this.replicaStatusDescription, replicaDescription.replicaStatusDescription) &&
        Objects.equals(this.replicaStatusPercentProgress, replicaDescription.replicaStatusPercentProgress) &&
        Objects.equals(this.kmSMasterKeyId, replicaDescription.kmSMasterKeyId) &&
        Objects.equals(this.provisionedThroughputOverride, replicaDescription.provisionedThroughputOverride) &&
        Objects.equals(this.globalSecondaryIndexes, replicaDescription.globalSecondaryIndexes) &&
        Objects.equals(this.replicaInaccessibleDateTime, replicaDescription.replicaInaccessibleDateTime) &&
        Objects.equals(this.replicaTableClassSummary, replicaDescription.replicaTableClassSummary);
  }

  @Override
  public int hashCode() {
    return Objects.hash(regionName, replicaStatus, replicaStatusDescription, replicaStatusPercentProgress, kmSMasterKeyId, provisionedThroughputOverride, globalSecondaryIndexes, replicaInaccessibleDateTime, replicaTableClassSummary);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReplicaDescription {\n");
    sb.append("    regionName: ").append(toIndentedString(regionName)).append("\n");
    sb.append("    replicaStatus: ").append(toIndentedString(replicaStatus)).append("\n");
    sb.append("    replicaStatusDescription: ").append(toIndentedString(replicaStatusDescription)).append("\n");
    sb.append("    replicaStatusPercentProgress: ").append(toIndentedString(replicaStatusPercentProgress)).append("\n");
    sb.append("    kmSMasterKeyId: ").append(toIndentedString(kmSMasterKeyId)).append("\n");
    sb.append("    provisionedThroughputOverride: ").append(toIndentedString(provisionedThroughputOverride)).append("\n");
    sb.append("    globalSecondaryIndexes: ").append(toIndentedString(globalSecondaryIndexes)).append("\n");
    sb.append("    replicaInaccessibleDateTime: ").append(toIndentedString(replicaInaccessibleDateTime)).append("\n");
    sb.append("    replicaTableClassSummary: ").append(toIndentedString(replicaTableClassSummary)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("RegionName", "ReplicaStatus", "ReplicaStatusDescription", "ReplicaStatusPercentProgress", "KMSMasterKeyId", "ProvisionedThroughputOverride", "GlobalSecondaryIndexes", "ReplicaInaccessibleDateTime", "ReplicaTableClassSummary"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReplicaDescription
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReplicaDescription.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReplicaDescription is not found in the empty JSON string", ReplicaDescription.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReplicaDescription.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReplicaDescription` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("RegionName") != null && !jsonObj.get("RegionName").isJsonNull()) && !jsonObj.get("RegionName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RegionName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RegionName").toString()));
      }
      // validate the optional field `ReplicaStatus`
      if (jsonObj.get("ReplicaStatus") != null && !jsonObj.get("ReplicaStatus").isJsonNull()) {
        ReplicaStatus.validateJsonElement(jsonObj.get("ReplicaStatus"));
      }
      if ((jsonObj.get("ReplicaStatusDescription") != null && !jsonObj.get("ReplicaStatusDescription").isJsonNull()) && !jsonObj.get("ReplicaStatusDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ReplicaStatusDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ReplicaStatusDescription").toString()));
      }
      if ((jsonObj.get("ReplicaStatusPercentProgress") != null && !jsonObj.get("ReplicaStatusPercentProgress").isJsonNull()) && !jsonObj.get("ReplicaStatusPercentProgress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ReplicaStatusPercentProgress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ReplicaStatusPercentProgress").toString()));
      }
      if ((jsonObj.get("KMSMasterKeyId") != null && !jsonObj.get("KMSMasterKeyId").isJsonNull()) && !jsonObj.get("KMSMasterKeyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `KMSMasterKeyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("KMSMasterKeyId").toString()));
      }
      // validate the optional field `ProvisionedThroughputOverride`
      if (jsonObj.get("ProvisionedThroughputOverride") != null && !jsonObj.get("ProvisionedThroughputOverride").isJsonNull()) {
        ProvisionedThroughputOverride.validateJsonElement(jsonObj.get("ProvisionedThroughputOverride"));
      }
      if (jsonObj.get("GlobalSecondaryIndexes") != null && !jsonObj.get("GlobalSecondaryIndexes").isJsonNull()) {
        JsonArray jsonArrayglobalSecondaryIndexes = jsonObj.getAsJsonArray("GlobalSecondaryIndexes");
        if (jsonArrayglobalSecondaryIndexes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("GlobalSecondaryIndexes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `GlobalSecondaryIndexes` to be an array in the JSON string but got `%s`", jsonObj.get("GlobalSecondaryIndexes").toString()));
          }

          // validate the optional field `GlobalSecondaryIndexes` (array)
          for (int i = 0; i < jsonArrayglobalSecondaryIndexes.size(); i++) {
            ReplicaGlobalSecondaryIndexDescription.validateJsonElement(jsonArrayglobalSecondaryIndexes.get(i));
          };
        }
      }
      // validate the optional field `ReplicaTableClassSummary`
      if (jsonObj.get("ReplicaTableClassSummary") != null && !jsonObj.get("ReplicaTableClassSummary").isJsonNull()) {
        TableClassSummary.validateJsonElement(jsonObj.get("ReplicaTableClassSummary"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReplicaDescription.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReplicaDescription' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReplicaDescription> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReplicaDescription.class));

       return (TypeAdapter<T>) new TypeAdapter<ReplicaDescription>() {
           @Override
           public void write(JsonWriter out, ReplicaDescription value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReplicaDescription read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReplicaDescription given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReplicaDescription
   * @throws IOException if the JSON string is invalid with respect to ReplicaDescription
   */
  public static ReplicaDescription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReplicaDescription.class);
  }

  /**
   * Convert an instance of ReplicaDescription to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

