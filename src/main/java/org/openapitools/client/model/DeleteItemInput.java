/*
 * Amazon DynamoDB
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database, so that you don't have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.</p> <p>With DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic. You can scale up or scale down your tables' throughput capacity without downtime or performance degradation, and use the Amazon Web Services Management Console to monitor resource utilization and performance metrics.</p> <p>DynamoDB automatically spreads the data and traffic for your tables over a sufficient number of servers to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and automatically replicated across multiple Availability Zones in an Amazon Web Services Region, providing built-in high availability and data durability.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.AttributeValue;
import org.openapitools.client.model.ConditionalOperator;
import org.openapitools.client.model.ExpectedAttributeValue;
import org.openapitools.client.model.ReturnConsumedCapacity;
import org.openapitools.client.model.ReturnItemCollectionMetrics;
import org.openapitools.client.model.ReturnValue;
import org.openapitools.client.model.ReturnValuesOnConditionCheckFailure;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents the input of a &lt;code&gt;DeleteItem&lt;/code&gt; operation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T14:20:21.724079+05:30[Asia/Kolkata]", comments = "Generator version: 7.15.0")
public class DeleteItemInput {
  public static final String SERIALIZED_NAME_TABLE_NAME = "TableName";
  @SerializedName(SERIALIZED_NAME_TABLE_NAME)
  @javax.annotation.Nonnull
  private String tableName;

  public static final String SERIALIZED_NAME_KEY = "Key";
  @SerializedName(SERIALIZED_NAME_KEY)
  @javax.annotation.Nonnull
  private Map<String, AttributeValue> key;

  public static final String SERIALIZED_NAME_EXPECTED = "Expected";
  @SerializedName(SERIALIZED_NAME_EXPECTED)
  @javax.annotation.Nullable
  private Map<String, ExpectedAttributeValue> expected;

  public static final String SERIALIZED_NAME_CONDITIONAL_OPERATOR = "ConditionalOperator";
  @SerializedName(SERIALIZED_NAME_CONDITIONAL_OPERATOR)
  @javax.annotation.Nullable
  private ConditionalOperator conditionalOperator;

  public static final String SERIALIZED_NAME_RETURN_VALUES = "ReturnValues";
  @SerializedName(SERIALIZED_NAME_RETURN_VALUES)
  @javax.annotation.Nullable
  private ReturnValue returnValues;

  public static final String SERIALIZED_NAME_RETURN_CONSUMED_CAPACITY = "ReturnConsumedCapacity";
  @SerializedName(SERIALIZED_NAME_RETURN_CONSUMED_CAPACITY)
  @javax.annotation.Nullable
  private ReturnConsumedCapacity returnConsumedCapacity;

  public static final String SERIALIZED_NAME_RETURN_ITEM_COLLECTION_METRICS = "ReturnItemCollectionMetrics";
  @SerializedName(SERIALIZED_NAME_RETURN_ITEM_COLLECTION_METRICS)
  @javax.annotation.Nullable
  private ReturnItemCollectionMetrics returnItemCollectionMetrics;

  public static final String SERIALIZED_NAME_CONDITION_EXPRESSION = "ConditionExpression";
  @SerializedName(SERIALIZED_NAME_CONDITION_EXPRESSION)
  @javax.annotation.Nullable
  private String conditionExpression;

  public static final String SERIALIZED_NAME_EXPRESSION_ATTRIBUTE_NAMES = "ExpressionAttributeNames";
  @SerializedName(SERIALIZED_NAME_EXPRESSION_ATTRIBUTE_NAMES)
  @javax.annotation.Nullable
  private Map<String, String> expressionAttributeNames;

  public static final String SERIALIZED_NAME_EXPRESSION_ATTRIBUTE_VALUES = "ExpressionAttributeValues";
  @SerializedName(SERIALIZED_NAME_EXPRESSION_ATTRIBUTE_VALUES)
  @javax.annotation.Nullable
  private Map<String, AttributeValue> expressionAttributeValues;

  public static final String SERIALIZED_NAME_RETURN_VALUES_ON_CONDITION_CHECK_FAILURE = "ReturnValuesOnConditionCheckFailure";
  @SerializedName(SERIALIZED_NAME_RETURN_VALUES_ON_CONDITION_CHECK_FAILURE)
  @javax.annotation.Nullable
  private ReturnValuesOnConditionCheckFailure returnValuesOnConditionCheckFailure;

  public DeleteItemInput() {
  }

  public DeleteItemInput tableName(@javax.annotation.Nonnull String tableName) {
    this.tableName = tableName;
    return this;
  }

  /**
   * The name of the table from which to delete the item.
   * @return tableName
   */
  @javax.annotation.Nonnull
  public String getTableName() {
    return tableName;
  }

  public void setTableName(@javax.annotation.Nonnull String tableName) {
    this.tableName = tableName;
  }


  public DeleteItemInput key(@javax.annotation.Nonnull Map<String, AttributeValue> key) {
    this.key = key;
    return this;
  }

  public DeleteItemInput putKeyItem(String key, AttributeValue keyItem) {
    if (this.key == null) {
      this.key = new HashMap<>();
    }
    this.key.put(key, keyItem);
    return this;
  }

  /**
   * &lt;p&gt;A map of attribute names to &lt;code&gt;AttributeValue&lt;/code&gt; objects, representing the primary key of the item to delete.&lt;/p&gt; &lt;p&gt;For the primary key, you must provide all of the key attributes. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide values for both the partition key and the sort key.&lt;/p&gt;
   * @return key
   */
  @javax.annotation.Nonnull
  public Map<String, AttributeValue> getKey() {
    return key;
  }

  public void setKey(@javax.annotation.Nonnull Map<String, AttributeValue> key) {
    this.key = key;
  }


  public DeleteItemInput expected(@javax.annotation.Nullable Map<String, ExpectedAttributeValue> expected) {
    this.expected = expected;
    return this;
  }

  public DeleteItemInput putExpectedItem(String key, ExpectedAttributeValue expectedItem) {
    if (this.expected == null) {
      this.expected = new HashMap<>();
    }
    this.expected.put(key, expectedItem);
    return this;
  }

  /**
   * This is a legacy parameter. Use &lt;code&gt;ConditionExpression&lt;/code&gt; instead. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.Expected.html\&quot;&gt;Expected&lt;/a&gt; in the &lt;i&gt;Amazon DynamoDB Developer Guide&lt;/i&gt;.
   * @return expected
   */
  @javax.annotation.Nullable
  public Map<String, ExpectedAttributeValue> getExpected() {
    return expected;
  }

  public void setExpected(@javax.annotation.Nullable Map<String, ExpectedAttributeValue> expected) {
    this.expected = expected;
  }


  public DeleteItemInput conditionalOperator(@javax.annotation.Nullable ConditionalOperator conditionalOperator) {
    this.conditionalOperator = conditionalOperator;
    return this;
  }

  /**
   * This is a legacy parameter. Use &lt;code&gt;ConditionExpression&lt;/code&gt; instead. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.ConditionalOperator.html\&quot;&gt;ConditionalOperator&lt;/a&gt; in the &lt;i&gt;Amazon DynamoDB Developer Guide&lt;/i&gt;.
   * @return conditionalOperator
   */
  @javax.annotation.Nullable
  public ConditionalOperator getConditionalOperator() {
    return conditionalOperator;
  }

  public void setConditionalOperator(@javax.annotation.Nullable ConditionalOperator conditionalOperator) {
    this.conditionalOperator = conditionalOperator;
  }


  public DeleteItemInput returnValues(@javax.annotation.Nullable ReturnValue returnValues) {
    this.returnValues = returnValues;
    return this;
  }

  /**
   * &lt;p&gt;Use &lt;code&gt;ReturnValues&lt;/code&gt; if you want to get the item attributes as they appeared before they were deleted. For &lt;code&gt;DeleteItem&lt;/code&gt;, the valid values are:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;NONE&lt;/code&gt; - If &lt;code&gt;ReturnValues&lt;/code&gt; is not specified, or if its value is &lt;code&gt;NONE&lt;/code&gt;, then nothing is returned. (This setting is the default for &lt;code&gt;ReturnValues&lt;/code&gt;.)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ALL_OLD&lt;/code&gt; - The content of the old item is returned.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;There is no additional cost associated with requesting a return value aside from the small network and processing overhead of receiving a larger response. No read capacity units are consumed.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;ReturnValues&lt;/code&gt; parameter is used by several DynamoDB operations; however, &lt;code&gt;DeleteItem&lt;/code&gt; does not recognize any values other than &lt;code&gt;NONE&lt;/code&gt; or &lt;code&gt;ALL_OLD&lt;/code&gt;.&lt;/p&gt; &lt;/note&gt;
   * @return returnValues
   */
  @javax.annotation.Nullable
  public ReturnValue getReturnValues() {
    return returnValues;
  }

  public void setReturnValues(@javax.annotation.Nullable ReturnValue returnValues) {
    this.returnValues = returnValues;
  }


  public DeleteItemInput returnConsumedCapacity(@javax.annotation.Nullable ReturnConsumedCapacity returnConsumedCapacity) {
    this.returnConsumedCapacity = returnConsumedCapacity;
    return this;
  }

  /**
   * Get returnConsumedCapacity
   * @return returnConsumedCapacity
   */
  @javax.annotation.Nullable
  public ReturnConsumedCapacity getReturnConsumedCapacity() {
    return returnConsumedCapacity;
  }

  public void setReturnConsumedCapacity(@javax.annotation.Nullable ReturnConsumedCapacity returnConsumedCapacity) {
    this.returnConsumedCapacity = returnConsumedCapacity;
  }


  public DeleteItemInput returnItemCollectionMetrics(@javax.annotation.Nullable ReturnItemCollectionMetrics returnItemCollectionMetrics) {
    this.returnItemCollectionMetrics = returnItemCollectionMetrics;
    return this;
  }

  /**
   * Determines whether item collection metrics are returned. If set to &lt;code&gt;SIZE&lt;/code&gt;, the response includes statistics about item collections, if any, that were modified during the operation are returned in the response. If set to &lt;code&gt;NONE&lt;/code&gt; (the default), no statistics are returned.
   * @return returnItemCollectionMetrics
   */
  @javax.annotation.Nullable
  public ReturnItemCollectionMetrics getReturnItemCollectionMetrics() {
    return returnItemCollectionMetrics;
  }

  public void setReturnItemCollectionMetrics(@javax.annotation.Nullable ReturnItemCollectionMetrics returnItemCollectionMetrics) {
    this.returnItemCollectionMetrics = returnItemCollectionMetrics;
  }


  public DeleteItemInput conditionExpression(@javax.annotation.Nullable String conditionExpression) {
    this.conditionExpression = conditionExpression;
    return this;
  }

  /**
   * &lt;p&gt;A condition that must be satisfied in order for a conditional &lt;code&gt;DeleteItem&lt;/code&gt; to succeed.&lt;/p&gt; &lt;p&gt;An expression can contain any of the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Functions: &lt;code&gt;attribute_exists | attribute_not_exists | attribute_type | contains | begins_with | size&lt;/code&gt; &lt;/p&gt; &lt;p&gt;These function names are case-sensitive.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Comparison operators: &lt;code&gt;&#x3D; | &amp;lt;&amp;gt; | &amp;lt; | &amp;gt; | &amp;lt;&#x3D; | &amp;gt;&#x3D; | BETWEEN | IN &lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; Logical operators: &lt;code&gt;AND | OR | NOT&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information about condition expressions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html\&quot;&gt;Condition Expressions&lt;/a&gt; in the &lt;i&gt;Amazon DynamoDB Developer Guide&lt;/i&gt;.&lt;/p&gt;
   * @return conditionExpression
   */
  @javax.annotation.Nullable
  public String getConditionExpression() {
    return conditionExpression;
  }

  public void setConditionExpression(@javax.annotation.Nullable String conditionExpression) {
    this.conditionExpression = conditionExpression;
  }


  public DeleteItemInput expressionAttributeNames(@javax.annotation.Nullable Map<String, String> expressionAttributeNames) {
    this.expressionAttributeNames = expressionAttributeNames;
    return this;
  }

  public DeleteItemInput putExpressionAttributeNamesItem(String key, String expressionAttributeNamesItem) {
    if (this.expressionAttributeNames == null) {
      this.expressionAttributeNames = new HashMap<>();
    }
    this.expressionAttributeNames.put(key, expressionAttributeNamesItem);
    return this;
  }

  /**
   * &lt;p&gt;One or more substitution tokens for attribute names in an expression. The following are some use cases for using &lt;code&gt;ExpressionAttributeNames&lt;/code&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;To access an attribute whose name conflicts with a DynamoDB reserved word.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;To create a placeholder for repeating occurrences of an attribute name in an expression.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;To prevent special characters in an attribute name from being misinterpreted in an expression.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Use the &lt;b&gt;#&lt;/b&gt; character in an expression to dereference an attribute name. For example, consider the following attribute name:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Percentile&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html\&quot;&gt;Reserved Words&lt;/a&gt; in the &lt;i&gt;Amazon DynamoDB Developer Guide&lt;/i&gt;). To work around this, you could specify the following for &lt;code&gt;ExpressionAttributeNames&lt;/code&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;{\&quot;#P\&quot;:\&quot;Percentile\&quot;}&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;You could then use this substitution in an expression, as in this example:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;#P &#x3D; :val&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;Tokens that begin with the &lt;b&gt;:&lt;/b&gt; character are &lt;i&gt;expression attribute values&lt;/i&gt;, which are placeholders for the actual value at runtime.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;For more information on expression attribute names, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html\&quot;&gt;Specifying Item Attributes&lt;/a&gt; in the &lt;i&gt;Amazon DynamoDB Developer Guide&lt;/i&gt;.&lt;/p&gt;
   * @return expressionAttributeNames
   */
  @javax.annotation.Nullable
  public Map<String, String> getExpressionAttributeNames() {
    return expressionAttributeNames;
  }

  public void setExpressionAttributeNames(@javax.annotation.Nullable Map<String, String> expressionAttributeNames) {
    this.expressionAttributeNames = expressionAttributeNames;
  }


  public DeleteItemInput expressionAttributeValues(@javax.annotation.Nullable Map<String, AttributeValue> expressionAttributeValues) {
    this.expressionAttributeValues = expressionAttributeValues;
    return this;
  }

  public DeleteItemInput putExpressionAttributeValuesItem(String key, AttributeValue expressionAttributeValuesItem) {
    if (this.expressionAttributeValues == null) {
      this.expressionAttributeValues = new HashMap<>();
    }
    this.expressionAttributeValues.put(key, expressionAttributeValuesItem);
    return this;
  }

  /**
   * &lt;p&gt;One or more values that can be substituted in an expression.&lt;/p&gt; &lt;p&gt;Use the &lt;b&gt;:&lt;/b&gt; (colon) character in an expression to dereference an attribute value. For example, suppose that you wanted to check whether the value of the &lt;i&gt;ProductStatus&lt;/i&gt; attribute was one of the following: &lt;/p&gt; &lt;p&gt; &lt;code&gt;Available | Backordered | Discontinued&lt;/code&gt; &lt;/p&gt; &lt;p&gt;You would first need to specify &lt;code&gt;ExpressionAttributeValues&lt;/code&gt; as follows:&lt;/p&gt; &lt;p&gt; &lt;code&gt;{ \&quot;:avail\&quot;:{\&quot;S\&quot;:\&quot;Available\&quot;}, \&quot;:back\&quot;:{\&quot;S\&quot;:\&quot;Backordered\&quot;}, \&quot;:disc\&quot;:{\&quot;S\&quot;:\&quot;Discontinued\&quot;} }&lt;/code&gt; &lt;/p&gt; &lt;p&gt;You could then use these values in an expression, such as this:&lt;/p&gt; &lt;p&gt; &lt;code&gt;ProductStatus IN (:avail, :back, :disc)&lt;/code&gt; &lt;/p&gt; &lt;p&gt;For more information on expression attribute values, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html\&quot;&gt;Condition Expressions&lt;/a&gt; in the &lt;i&gt;Amazon DynamoDB Developer Guide&lt;/i&gt;.&lt;/p&gt;
   * @return expressionAttributeValues
   */
  @javax.annotation.Nullable
  public Map<String, AttributeValue> getExpressionAttributeValues() {
    return expressionAttributeValues;
  }

  public void setExpressionAttributeValues(@javax.annotation.Nullable Map<String, AttributeValue> expressionAttributeValues) {
    this.expressionAttributeValues = expressionAttributeValues;
  }


  public DeleteItemInput returnValuesOnConditionCheckFailure(@javax.annotation.Nullable ReturnValuesOnConditionCheckFailure returnValuesOnConditionCheckFailure) {
    this.returnValuesOnConditionCheckFailure = returnValuesOnConditionCheckFailure;
    return this;
  }

  /**
   * &lt;p&gt;An optional parameter that returns the item attributes for a &lt;code&gt;DeleteItem&lt;/code&gt; operation that failed a condition check.&lt;/p&gt; &lt;p&gt;There is no additional cost associated with requesting a return value aside from the small network and processing overhead of receiving a larger response. No read capacity units are consumed.&lt;/p&gt;
   * @return returnValuesOnConditionCheckFailure
   */
  @javax.annotation.Nullable
  public ReturnValuesOnConditionCheckFailure getReturnValuesOnConditionCheckFailure() {
    return returnValuesOnConditionCheckFailure;
  }

  public void setReturnValuesOnConditionCheckFailure(@javax.annotation.Nullable ReturnValuesOnConditionCheckFailure returnValuesOnConditionCheckFailure) {
    this.returnValuesOnConditionCheckFailure = returnValuesOnConditionCheckFailure;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeleteItemInput deleteItemInput = (DeleteItemInput) o;
    return Objects.equals(this.tableName, deleteItemInput.tableName) &&
        Objects.equals(this.key, deleteItemInput.key) &&
        Objects.equals(this.expected, deleteItemInput.expected) &&
        Objects.equals(this.conditionalOperator, deleteItemInput.conditionalOperator) &&
        Objects.equals(this.returnValues, deleteItemInput.returnValues) &&
        Objects.equals(this.returnConsumedCapacity, deleteItemInput.returnConsumedCapacity) &&
        Objects.equals(this.returnItemCollectionMetrics, deleteItemInput.returnItemCollectionMetrics) &&
        Objects.equals(this.conditionExpression, deleteItemInput.conditionExpression) &&
        Objects.equals(this.expressionAttributeNames, deleteItemInput.expressionAttributeNames) &&
        Objects.equals(this.expressionAttributeValues, deleteItemInput.expressionAttributeValues) &&
        Objects.equals(this.returnValuesOnConditionCheckFailure, deleteItemInput.returnValuesOnConditionCheckFailure);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tableName, key, expected, conditionalOperator, returnValues, returnConsumedCapacity, returnItemCollectionMetrics, conditionExpression, expressionAttributeNames, expressionAttributeValues, returnValuesOnConditionCheckFailure);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeleteItemInput {\n");
    sb.append("    tableName: ").append(toIndentedString(tableName)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    expected: ").append(toIndentedString(expected)).append("\n");
    sb.append("    conditionalOperator: ").append(toIndentedString(conditionalOperator)).append("\n");
    sb.append("    returnValues: ").append(toIndentedString(returnValues)).append("\n");
    sb.append("    returnConsumedCapacity: ").append(toIndentedString(returnConsumedCapacity)).append("\n");
    sb.append("    returnItemCollectionMetrics: ").append(toIndentedString(returnItemCollectionMetrics)).append("\n");
    sb.append("    conditionExpression: ").append(toIndentedString(conditionExpression)).append("\n");
    sb.append("    expressionAttributeNames: ").append(toIndentedString(expressionAttributeNames)).append("\n");
    sb.append("    expressionAttributeValues: ").append(toIndentedString(expressionAttributeValues)).append("\n");
    sb.append("    returnValuesOnConditionCheckFailure: ").append(toIndentedString(returnValuesOnConditionCheckFailure)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("TableName", "Key", "Expected", "ConditionalOperator", "ReturnValues", "ReturnConsumedCapacity", "ReturnItemCollectionMetrics", "ConditionExpression", "ExpressionAttributeNames", "ExpressionAttributeValues", "ReturnValuesOnConditionCheckFailure"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("TableName", "Key"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeleteItemInput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeleteItemInput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeleteItemInput is not found in the empty JSON string", DeleteItemInput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeleteItemInput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeleteItemInput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DeleteItemInput.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("TableName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TableName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TableName").toString()));
      }
      // validate the optional field `ConditionalOperator`
      if (jsonObj.get("ConditionalOperator") != null && !jsonObj.get("ConditionalOperator").isJsonNull()) {
        ConditionalOperator.validateJsonElement(jsonObj.get("ConditionalOperator"));
      }
      // validate the optional field `ReturnValues`
      if (jsonObj.get("ReturnValues") != null && !jsonObj.get("ReturnValues").isJsonNull()) {
        ReturnValue.validateJsonElement(jsonObj.get("ReturnValues"));
      }
      // validate the optional field `ReturnConsumedCapacity`
      if (jsonObj.get("ReturnConsumedCapacity") != null && !jsonObj.get("ReturnConsumedCapacity").isJsonNull()) {
        ReturnConsumedCapacity.validateJsonElement(jsonObj.get("ReturnConsumedCapacity"));
      }
      // validate the optional field `ReturnItemCollectionMetrics`
      if (jsonObj.get("ReturnItemCollectionMetrics") != null && !jsonObj.get("ReturnItemCollectionMetrics").isJsonNull()) {
        ReturnItemCollectionMetrics.validateJsonElement(jsonObj.get("ReturnItemCollectionMetrics"));
      }
      if ((jsonObj.get("ConditionExpression") != null && !jsonObj.get("ConditionExpression").isJsonNull()) && !jsonObj.get("ConditionExpression").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ConditionExpression` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ConditionExpression").toString()));
      }
      // validate the optional field `ReturnValuesOnConditionCheckFailure`
      if (jsonObj.get("ReturnValuesOnConditionCheckFailure") != null && !jsonObj.get("ReturnValuesOnConditionCheckFailure").isJsonNull()) {
        ReturnValuesOnConditionCheckFailure.validateJsonElement(jsonObj.get("ReturnValuesOnConditionCheckFailure"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeleteItemInput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeleteItemInput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeleteItemInput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeleteItemInput.class));

       return (TypeAdapter<T>) new TypeAdapter<DeleteItemInput>() {
           @Override
           public void write(JsonWriter out, DeleteItemInput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeleteItemInput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeleteItemInput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeleteItemInput
   * @throws IOException if the JSON string is invalid with respect to DeleteItemInput
   */
  public static DeleteItemInput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeleteItemInput.class);
  }

  /**
   * Convert an instance of DeleteItemInput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

