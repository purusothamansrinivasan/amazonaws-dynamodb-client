/*
 * Amazon DynamoDB
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database, so that you don't have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.</p> <p>With DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic. You can scale up or scale down your tables' throughput capacity without downtime or performance degradation, and use the Amazon Web Services Management Console to monitor resource utilization and performance metrics.</p> <p>DynamoDB automatically spreads the data and traffic for your tables over a sufficient number of servers to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and automatically replicated across multiple Availability Zones in an Amazon Web Services Region, providing built-in high availability and data durability.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.ExportFormat;
import org.openapitools.client.model.S3SseAlgorithm;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ExportTableToPointInTimeInput
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T14:20:21.724079+05:30[Asia/Kolkata]", comments = "Generator version: 7.15.0")
public class ExportTableToPointInTimeInput {
  public static final String SERIALIZED_NAME_TABLE_ARN = "TableArn";
  @SerializedName(SERIALIZED_NAME_TABLE_ARN)
  @javax.annotation.Nonnull
  private String tableArn;

  public static final String SERIALIZED_NAME_EXPORT_TIME = "ExportTime";
  @SerializedName(SERIALIZED_NAME_EXPORT_TIME)
  @javax.annotation.Nullable
  private OffsetDateTime exportTime;

  public static final String SERIALIZED_NAME_CLIENT_TOKEN = "ClientToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_TOKEN)
  @javax.annotation.Nullable
  private String clientToken;

  public static final String SERIALIZED_NAME_S3_BUCKET = "S3Bucket";
  @SerializedName(SERIALIZED_NAME_S3_BUCKET)
  @javax.annotation.Nonnull
  private String s3Bucket;

  public static final String SERIALIZED_NAME_S3_BUCKET_OWNER = "S3BucketOwner";
  @SerializedName(SERIALIZED_NAME_S3_BUCKET_OWNER)
  @javax.annotation.Nullable
  private String s3BucketOwner;

  public static final String SERIALIZED_NAME_S3_PREFIX = "S3Prefix";
  @SerializedName(SERIALIZED_NAME_S3_PREFIX)
  @javax.annotation.Nullable
  private String s3Prefix;

  public static final String SERIALIZED_NAME_S3_SSE_ALGORITHM = "S3SseAlgorithm";
  @SerializedName(SERIALIZED_NAME_S3_SSE_ALGORITHM)
  @javax.annotation.Nullable
  private S3SseAlgorithm s3SseAlgorithm;

  public static final String SERIALIZED_NAME_S3_SSE_KMS_KEY_ID = "S3SseKmsKeyId";
  @SerializedName(SERIALIZED_NAME_S3_SSE_KMS_KEY_ID)
  @javax.annotation.Nullable
  private String s3SseKmsKeyId;

  public static final String SERIALIZED_NAME_EXPORT_FORMAT = "ExportFormat";
  @SerializedName(SERIALIZED_NAME_EXPORT_FORMAT)
  @javax.annotation.Nullable
  private ExportFormat exportFormat;

  public ExportTableToPointInTimeInput() {
  }

  public ExportTableToPointInTimeInput tableArn(@javax.annotation.Nonnull String tableArn) {
    this.tableArn = tableArn;
    return this;
  }

  /**
   * The Amazon Resource Name (ARN) associated with the table to export.
   * @return tableArn
   */
  @javax.annotation.Nonnull
  public String getTableArn() {
    return tableArn;
  }

  public void setTableArn(@javax.annotation.Nonnull String tableArn) {
    this.tableArn = tableArn;
  }


  public ExportTableToPointInTimeInput exportTime(@javax.annotation.Nullable OffsetDateTime exportTime) {
    this.exportTime = exportTime;
    return this;
  }

  /**
   * Time in the past from which to export table data, counted in seconds from the start of the Unix epoch. The table export will be a snapshot of the table&#39;s state at this point in time.
   * @return exportTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getExportTime() {
    return exportTime;
  }

  public void setExportTime(@javax.annotation.Nullable OffsetDateTime exportTime) {
    this.exportTime = exportTime;
  }


  public ExportTableToPointInTimeInput clientToken(@javax.annotation.Nullable String clientToken) {
    this.clientToken = clientToken;
    return this;
  }

  /**
   * &lt;p&gt;Providing a &lt;code&gt;ClientToken&lt;/code&gt; makes the call to &lt;code&gt;ExportTableToPointInTimeInput&lt;/code&gt; idempotent, meaning that multiple identical calls have the same effect as one single call.&lt;/p&gt; &lt;p&gt;A client token is valid for 8 hours after the first request that uses it is completed. After 8 hours, any request with the same client token is treated as a new request. Do not resubmit the same request with the same client token for more than 8 hours, or the result might not be idempotent.&lt;/p&gt; &lt;p&gt;If you submit a request with the same client token but a change in other parameters within the 8-hour idempotency window, DynamoDB returns an &lt;code&gt;ImportConflictException&lt;/code&gt;.&lt;/p&gt;
   * @return clientToken
   */
  @javax.annotation.Nullable
  public String getClientToken() {
    return clientToken;
  }

  public void setClientToken(@javax.annotation.Nullable String clientToken) {
    this.clientToken = clientToken;
  }


  public ExportTableToPointInTimeInput s3Bucket(@javax.annotation.Nonnull String s3Bucket) {
    this.s3Bucket = s3Bucket;
    return this;
  }

  /**
   * The name of the Amazon S3 bucket to export the snapshot to.
   * @return s3Bucket
   */
  @javax.annotation.Nonnull
  public String getS3Bucket() {
    return s3Bucket;
  }

  public void setS3Bucket(@javax.annotation.Nonnull String s3Bucket) {
    this.s3Bucket = s3Bucket;
  }


  public ExportTableToPointInTimeInput s3BucketOwner(@javax.annotation.Nullable String s3BucketOwner) {
    this.s3BucketOwner = s3BucketOwner;
    return this;
  }

  /**
   * The ID of the Amazon Web Services account that owns the bucket the export will be stored in.
   * @return s3BucketOwner
   */
  @javax.annotation.Nullable
  public String getS3BucketOwner() {
    return s3BucketOwner;
  }

  public void setS3BucketOwner(@javax.annotation.Nullable String s3BucketOwner) {
    this.s3BucketOwner = s3BucketOwner;
  }


  public ExportTableToPointInTimeInput s3Prefix(@javax.annotation.Nullable String s3Prefix) {
    this.s3Prefix = s3Prefix;
    return this;
  }

  /**
   * The Amazon S3 bucket prefix to use as the file name and path of the exported snapshot.
   * @return s3Prefix
   */
  @javax.annotation.Nullable
  public String getS3Prefix() {
    return s3Prefix;
  }

  public void setS3Prefix(@javax.annotation.Nullable String s3Prefix) {
    this.s3Prefix = s3Prefix;
  }


  public ExportTableToPointInTimeInput s3SseAlgorithm(@javax.annotation.Nullable S3SseAlgorithm s3SseAlgorithm) {
    this.s3SseAlgorithm = s3SseAlgorithm;
    return this;
  }

  /**
   * &lt;p&gt;Type of encryption used on the bucket where export data will be stored. Valid values for &lt;code&gt;S3SseAlgorithm&lt;/code&gt; are:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;AES256&lt;/code&gt; - server-side encryption with Amazon S3 managed keys&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;KMS&lt;/code&gt; - server-side encryption with KMS managed keys&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
   * @return s3SseAlgorithm
   */
  @javax.annotation.Nullable
  public S3SseAlgorithm getS3SseAlgorithm() {
    return s3SseAlgorithm;
  }

  public void setS3SseAlgorithm(@javax.annotation.Nullable S3SseAlgorithm s3SseAlgorithm) {
    this.s3SseAlgorithm = s3SseAlgorithm;
  }


  public ExportTableToPointInTimeInput s3SseKmsKeyId(@javax.annotation.Nullable String s3SseKmsKeyId) {
    this.s3SseKmsKeyId = s3SseKmsKeyId;
    return this;
  }

  /**
   * The ID of the KMS managed key used to encrypt the S3 bucket where export data will be stored (if applicable).
   * @return s3SseKmsKeyId
   */
  @javax.annotation.Nullable
  public String getS3SseKmsKeyId() {
    return s3SseKmsKeyId;
  }

  public void setS3SseKmsKeyId(@javax.annotation.Nullable String s3SseKmsKeyId) {
    this.s3SseKmsKeyId = s3SseKmsKeyId;
  }


  public ExportTableToPointInTimeInput exportFormat(@javax.annotation.Nullable ExportFormat exportFormat) {
    this.exportFormat = exportFormat;
    return this;
  }

  /**
   * The format for the exported data. Valid values for &lt;code&gt;ExportFormat&lt;/code&gt; are &lt;code&gt;DYNAMODB_JSON&lt;/code&gt; or &lt;code&gt;ION&lt;/code&gt;.
   * @return exportFormat
   */
  @javax.annotation.Nullable
  public ExportFormat getExportFormat() {
    return exportFormat;
  }

  public void setExportFormat(@javax.annotation.Nullable ExportFormat exportFormat) {
    this.exportFormat = exportFormat;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExportTableToPointInTimeInput exportTableToPointInTimeInput = (ExportTableToPointInTimeInput) o;
    return Objects.equals(this.tableArn, exportTableToPointInTimeInput.tableArn) &&
        Objects.equals(this.exportTime, exportTableToPointInTimeInput.exportTime) &&
        Objects.equals(this.clientToken, exportTableToPointInTimeInput.clientToken) &&
        Objects.equals(this.s3Bucket, exportTableToPointInTimeInput.s3Bucket) &&
        Objects.equals(this.s3BucketOwner, exportTableToPointInTimeInput.s3BucketOwner) &&
        Objects.equals(this.s3Prefix, exportTableToPointInTimeInput.s3Prefix) &&
        Objects.equals(this.s3SseAlgorithm, exportTableToPointInTimeInput.s3SseAlgorithm) &&
        Objects.equals(this.s3SseKmsKeyId, exportTableToPointInTimeInput.s3SseKmsKeyId) &&
        Objects.equals(this.exportFormat, exportTableToPointInTimeInput.exportFormat);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tableArn, exportTime, clientToken, s3Bucket, s3BucketOwner, s3Prefix, s3SseAlgorithm, s3SseKmsKeyId, exportFormat);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExportTableToPointInTimeInput {\n");
    sb.append("    tableArn: ").append(toIndentedString(tableArn)).append("\n");
    sb.append("    exportTime: ").append(toIndentedString(exportTime)).append("\n");
    sb.append("    clientToken: ").append(toIndentedString(clientToken)).append("\n");
    sb.append("    s3Bucket: ").append(toIndentedString(s3Bucket)).append("\n");
    sb.append("    s3BucketOwner: ").append(toIndentedString(s3BucketOwner)).append("\n");
    sb.append("    s3Prefix: ").append(toIndentedString(s3Prefix)).append("\n");
    sb.append("    s3SseAlgorithm: ").append(toIndentedString(s3SseAlgorithm)).append("\n");
    sb.append("    s3SseKmsKeyId: ").append(toIndentedString(s3SseKmsKeyId)).append("\n");
    sb.append("    exportFormat: ").append(toIndentedString(exportFormat)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("TableArn", "ExportTime", "ClientToken", "S3Bucket", "S3BucketOwner", "S3Prefix", "S3SseAlgorithm", "S3SseKmsKeyId", "ExportFormat"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("TableArn", "S3Bucket"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExportTableToPointInTimeInput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExportTableToPointInTimeInput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExportTableToPointInTimeInput is not found in the empty JSON string", ExportTableToPointInTimeInput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExportTableToPointInTimeInput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExportTableToPointInTimeInput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ExportTableToPointInTimeInput.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("TableArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TableArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TableArn").toString()));
      }
      if ((jsonObj.get("ClientToken") != null && !jsonObj.get("ClientToken").isJsonNull()) && !jsonObj.get("ClientToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ClientToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ClientToken").toString()));
      }
      if (!jsonObj.get("S3Bucket").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `S3Bucket` to be a primitive type in the JSON string but got `%s`", jsonObj.get("S3Bucket").toString()));
      }
      if ((jsonObj.get("S3BucketOwner") != null && !jsonObj.get("S3BucketOwner").isJsonNull()) && !jsonObj.get("S3BucketOwner").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `S3BucketOwner` to be a primitive type in the JSON string but got `%s`", jsonObj.get("S3BucketOwner").toString()));
      }
      if ((jsonObj.get("S3Prefix") != null && !jsonObj.get("S3Prefix").isJsonNull()) && !jsonObj.get("S3Prefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `S3Prefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("S3Prefix").toString()));
      }
      // validate the optional field `S3SseAlgorithm`
      if (jsonObj.get("S3SseAlgorithm") != null && !jsonObj.get("S3SseAlgorithm").isJsonNull()) {
        S3SseAlgorithm.validateJsonElement(jsonObj.get("S3SseAlgorithm"));
      }
      if ((jsonObj.get("S3SseKmsKeyId") != null && !jsonObj.get("S3SseKmsKeyId").isJsonNull()) && !jsonObj.get("S3SseKmsKeyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `S3SseKmsKeyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("S3SseKmsKeyId").toString()));
      }
      // validate the optional field `ExportFormat`
      if (jsonObj.get("ExportFormat") != null && !jsonObj.get("ExportFormat").isJsonNull()) {
        ExportFormat.validateJsonElement(jsonObj.get("ExportFormat"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExportTableToPointInTimeInput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExportTableToPointInTimeInput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExportTableToPointInTimeInput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExportTableToPointInTimeInput.class));

       return (TypeAdapter<T>) new TypeAdapter<ExportTableToPointInTimeInput>() {
           @Override
           public void write(JsonWriter out, ExportTableToPointInTimeInput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExportTableToPointInTimeInput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExportTableToPointInTimeInput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExportTableToPointInTimeInput
   * @throws IOException if the JSON string is invalid with respect to ExportTableToPointInTimeInput
   */
  public static ExportTableToPointInTimeInput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExportTableToPointInTimeInput.class);
  }

  /**
   * Convert an instance of ExportTableToPointInTimeInput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

