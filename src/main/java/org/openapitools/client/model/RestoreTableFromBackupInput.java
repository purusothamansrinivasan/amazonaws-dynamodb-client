/*
 * Amazon DynamoDB
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database, so that you don't have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.</p> <p>With DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic. You can scale up or scale down your tables' throughput capacity without downtime or performance degradation, and use the Amazon Web Services Management Console to monitor resource utilization and performance metrics.</p> <p>DynamoDB automatically spreads the data and traffic for your tables over a sufficient number of servers to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and automatically replicated across multiple Availability Zones in an Amazon Web Services Region, providing built-in high availability and data durability.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BillingMode;
import org.openapitools.client.model.GlobalSecondaryIndex;
import org.openapitools.client.model.LocalSecondaryIndex;
import org.openapitools.client.model.ProvisionedThroughput;
import org.openapitools.client.model.SSESpecification;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RestoreTableFromBackupInput
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T14:20:21.724079+05:30[Asia/Kolkata]", comments = "Generator version: 7.15.0")
public class RestoreTableFromBackupInput {
  public static final String SERIALIZED_NAME_TARGET_TABLE_NAME = "TargetTableName";
  @SerializedName(SERIALIZED_NAME_TARGET_TABLE_NAME)
  @javax.annotation.Nonnull
  private String targetTableName;

  public static final String SERIALIZED_NAME_BACKUP_ARN = "BackupArn";
  @SerializedName(SERIALIZED_NAME_BACKUP_ARN)
  @javax.annotation.Nonnull
  private String backupArn;

  public static final String SERIALIZED_NAME_BILLING_MODE_OVERRIDE = "BillingModeOverride";
  @SerializedName(SERIALIZED_NAME_BILLING_MODE_OVERRIDE)
  @javax.annotation.Nullable
  private BillingMode billingModeOverride;

  public static final String SERIALIZED_NAME_GLOBAL_SECONDARY_INDEX_OVERRIDE = "GlobalSecondaryIndexOverride";
  @SerializedName(SERIALIZED_NAME_GLOBAL_SECONDARY_INDEX_OVERRIDE)
  @javax.annotation.Nullable
  private List<GlobalSecondaryIndex> globalSecondaryIndexOverride;

  public static final String SERIALIZED_NAME_LOCAL_SECONDARY_INDEX_OVERRIDE = "LocalSecondaryIndexOverride";
  @SerializedName(SERIALIZED_NAME_LOCAL_SECONDARY_INDEX_OVERRIDE)
  @javax.annotation.Nullable
  private List<LocalSecondaryIndex> localSecondaryIndexOverride;

  public static final String SERIALIZED_NAME_PROVISIONED_THROUGHPUT_OVERRIDE = "ProvisionedThroughputOverride";
  @SerializedName(SERIALIZED_NAME_PROVISIONED_THROUGHPUT_OVERRIDE)
  @javax.annotation.Nullable
  private ProvisionedThroughput provisionedThroughputOverride;

  public static final String SERIALIZED_NAME_SS_E_SPECIFICATION_OVERRIDE = "SSESpecificationOverride";
  @SerializedName(SERIALIZED_NAME_SS_E_SPECIFICATION_OVERRIDE)
  @javax.annotation.Nullable
  private SSESpecification ssESpecificationOverride;

  public RestoreTableFromBackupInput() {
  }

  public RestoreTableFromBackupInput targetTableName(@javax.annotation.Nonnull String targetTableName) {
    this.targetTableName = targetTableName;
    return this;
  }

  /**
   * The name of the new table to which the backup must be restored.
   * @return targetTableName
   */
  @javax.annotation.Nonnull
  public String getTargetTableName() {
    return targetTableName;
  }

  public void setTargetTableName(@javax.annotation.Nonnull String targetTableName) {
    this.targetTableName = targetTableName;
  }


  public RestoreTableFromBackupInput backupArn(@javax.annotation.Nonnull String backupArn) {
    this.backupArn = backupArn;
    return this;
  }

  /**
   * The Amazon Resource Name (ARN) associated with the backup.
   * @return backupArn
   */
  @javax.annotation.Nonnull
  public String getBackupArn() {
    return backupArn;
  }

  public void setBackupArn(@javax.annotation.Nonnull String backupArn) {
    this.backupArn = backupArn;
  }


  public RestoreTableFromBackupInput billingModeOverride(@javax.annotation.Nullable BillingMode billingModeOverride) {
    this.billingModeOverride = billingModeOverride;
    return this;
  }

  /**
   * The billing mode of the restored table.
   * @return billingModeOverride
   */
  @javax.annotation.Nullable
  public BillingMode getBillingModeOverride() {
    return billingModeOverride;
  }

  public void setBillingModeOverride(@javax.annotation.Nullable BillingMode billingModeOverride) {
    this.billingModeOverride = billingModeOverride;
  }


  public RestoreTableFromBackupInput globalSecondaryIndexOverride(@javax.annotation.Nullable List<GlobalSecondaryIndex> globalSecondaryIndexOverride) {
    this.globalSecondaryIndexOverride = globalSecondaryIndexOverride;
    return this;
  }

  public RestoreTableFromBackupInput addGlobalSecondaryIndexOverrideItem(GlobalSecondaryIndex globalSecondaryIndexOverrideItem) {
    if (this.globalSecondaryIndexOverride == null) {
      this.globalSecondaryIndexOverride = new ArrayList<>();
    }
    this.globalSecondaryIndexOverride.add(globalSecondaryIndexOverrideItem);
    return this;
  }

  /**
   * List of global secondary indexes for the restored table. The indexes provided should match existing secondary indexes. You can choose to exclude some or all of the indexes at the time of restore.
   * @return globalSecondaryIndexOverride
   */
  @javax.annotation.Nullable
  public List<GlobalSecondaryIndex> getGlobalSecondaryIndexOverride() {
    return globalSecondaryIndexOverride;
  }

  public void setGlobalSecondaryIndexOverride(@javax.annotation.Nullable List<GlobalSecondaryIndex> globalSecondaryIndexOverride) {
    this.globalSecondaryIndexOverride = globalSecondaryIndexOverride;
  }


  public RestoreTableFromBackupInput localSecondaryIndexOverride(@javax.annotation.Nullable List<LocalSecondaryIndex> localSecondaryIndexOverride) {
    this.localSecondaryIndexOverride = localSecondaryIndexOverride;
    return this;
  }

  public RestoreTableFromBackupInput addLocalSecondaryIndexOverrideItem(LocalSecondaryIndex localSecondaryIndexOverrideItem) {
    if (this.localSecondaryIndexOverride == null) {
      this.localSecondaryIndexOverride = new ArrayList<>();
    }
    this.localSecondaryIndexOverride.add(localSecondaryIndexOverrideItem);
    return this;
  }

  /**
   * List of local secondary indexes for the restored table. The indexes provided should match existing secondary indexes. You can choose to exclude some or all of the indexes at the time of restore.
   * @return localSecondaryIndexOverride
   */
  @javax.annotation.Nullable
  public List<LocalSecondaryIndex> getLocalSecondaryIndexOverride() {
    return localSecondaryIndexOverride;
  }

  public void setLocalSecondaryIndexOverride(@javax.annotation.Nullable List<LocalSecondaryIndex> localSecondaryIndexOverride) {
    this.localSecondaryIndexOverride = localSecondaryIndexOverride;
  }


  public RestoreTableFromBackupInput provisionedThroughputOverride(@javax.annotation.Nullable ProvisionedThroughput provisionedThroughputOverride) {
    this.provisionedThroughputOverride = provisionedThroughputOverride;
    return this;
  }

  /**
   * Provisioned throughput settings for the restored table.
   * @return provisionedThroughputOverride
   */
  @javax.annotation.Nullable
  public ProvisionedThroughput getProvisionedThroughputOverride() {
    return provisionedThroughputOverride;
  }

  public void setProvisionedThroughputOverride(@javax.annotation.Nullable ProvisionedThroughput provisionedThroughputOverride) {
    this.provisionedThroughputOverride = provisionedThroughputOverride;
  }


  public RestoreTableFromBackupInput ssESpecificationOverride(@javax.annotation.Nullable SSESpecification ssESpecificationOverride) {
    this.ssESpecificationOverride = ssESpecificationOverride;
    return this;
  }

  /**
   * The new server-side encryption settings for the restored table.
   * @return ssESpecificationOverride
   */
  @javax.annotation.Nullable
  public SSESpecification getSsESpecificationOverride() {
    return ssESpecificationOverride;
  }

  public void setSsESpecificationOverride(@javax.annotation.Nullable SSESpecification ssESpecificationOverride) {
    this.ssESpecificationOverride = ssESpecificationOverride;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RestoreTableFromBackupInput restoreTableFromBackupInput = (RestoreTableFromBackupInput) o;
    return Objects.equals(this.targetTableName, restoreTableFromBackupInput.targetTableName) &&
        Objects.equals(this.backupArn, restoreTableFromBackupInput.backupArn) &&
        Objects.equals(this.billingModeOverride, restoreTableFromBackupInput.billingModeOverride) &&
        Objects.equals(this.globalSecondaryIndexOverride, restoreTableFromBackupInput.globalSecondaryIndexOverride) &&
        Objects.equals(this.localSecondaryIndexOverride, restoreTableFromBackupInput.localSecondaryIndexOverride) &&
        Objects.equals(this.provisionedThroughputOverride, restoreTableFromBackupInput.provisionedThroughputOverride) &&
        Objects.equals(this.ssESpecificationOverride, restoreTableFromBackupInput.ssESpecificationOverride);
  }

  @Override
  public int hashCode() {
    return Objects.hash(targetTableName, backupArn, billingModeOverride, globalSecondaryIndexOverride, localSecondaryIndexOverride, provisionedThroughputOverride, ssESpecificationOverride);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RestoreTableFromBackupInput {\n");
    sb.append("    targetTableName: ").append(toIndentedString(targetTableName)).append("\n");
    sb.append("    backupArn: ").append(toIndentedString(backupArn)).append("\n");
    sb.append("    billingModeOverride: ").append(toIndentedString(billingModeOverride)).append("\n");
    sb.append("    globalSecondaryIndexOverride: ").append(toIndentedString(globalSecondaryIndexOverride)).append("\n");
    sb.append("    localSecondaryIndexOverride: ").append(toIndentedString(localSecondaryIndexOverride)).append("\n");
    sb.append("    provisionedThroughputOverride: ").append(toIndentedString(provisionedThroughputOverride)).append("\n");
    sb.append("    ssESpecificationOverride: ").append(toIndentedString(ssESpecificationOverride)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("TargetTableName", "BackupArn", "BillingModeOverride", "GlobalSecondaryIndexOverride", "LocalSecondaryIndexOverride", "ProvisionedThroughputOverride", "SSESpecificationOverride"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("TargetTableName", "BackupArn"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RestoreTableFromBackupInput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RestoreTableFromBackupInput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RestoreTableFromBackupInput is not found in the empty JSON string", RestoreTableFromBackupInput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RestoreTableFromBackupInput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RestoreTableFromBackupInput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RestoreTableFromBackupInput.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("TargetTableName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TargetTableName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TargetTableName").toString()));
      }
      if (!jsonObj.get("BackupArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BackupArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BackupArn").toString()));
      }
      // validate the optional field `BillingModeOverride`
      if (jsonObj.get("BillingModeOverride") != null && !jsonObj.get("BillingModeOverride").isJsonNull()) {
        BillingMode.validateJsonElement(jsonObj.get("BillingModeOverride"));
      }
      if (jsonObj.get("GlobalSecondaryIndexOverride") != null && !jsonObj.get("GlobalSecondaryIndexOverride").isJsonNull()) {
        JsonArray jsonArrayglobalSecondaryIndexOverride = jsonObj.getAsJsonArray("GlobalSecondaryIndexOverride");
        if (jsonArrayglobalSecondaryIndexOverride != null) {
          // ensure the json data is an array
          if (!jsonObj.get("GlobalSecondaryIndexOverride").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `GlobalSecondaryIndexOverride` to be an array in the JSON string but got `%s`", jsonObj.get("GlobalSecondaryIndexOverride").toString()));
          }

          // validate the optional field `GlobalSecondaryIndexOverride` (array)
          for (int i = 0; i < jsonArrayglobalSecondaryIndexOverride.size(); i++) {
            GlobalSecondaryIndex.validateJsonElement(jsonArrayglobalSecondaryIndexOverride.get(i));
          };
        }
      }
      if (jsonObj.get("LocalSecondaryIndexOverride") != null && !jsonObj.get("LocalSecondaryIndexOverride").isJsonNull()) {
        JsonArray jsonArraylocalSecondaryIndexOverride = jsonObj.getAsJsonArray("LocalSecondaryIndexOverride");
        if (jsonArraylocalSecondaryIndexOverride != null) {
          // ensure the json data is an array
          if (!jsonObj.get("LocalSecondaryIndexOverride").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `LocalSecondaryIndexOverride` to be an array in the JSON string but got `%s`", jsonObj.get("LocalSecondaryIndexOverride").toString()));
          }

          // validate the optional field `LocalSecondaryIndexOverride` (array)
          for (int i = 0; i < jsonArraylocalSecondaryIndexOverride.size(); i++) {
            LocalSecondaryIndex.validateJsonElement(jsonArraylocalSecondaryIndexOverride.get(i));
          };
        }
      }
      // validate the optional field `ProvisionedThroughputOverride`
      if (jsonObj.get("ProvisionedThroughputOverride") != null && !jsonObj.get("ProvisionedThroughputOverride").isJsonNull()) {
        ProvisionedThroughput.validateJsonElement(jsonObj.get("ProvisionedThroughputOverride"));
      }
      // validate the optional field `SSESpecificationOverride`
      if (jsonObj.get("SSESpecificationOverride") != null && !jsonObj.get("SSESpecificationOverride").isJsonNull()) {
        SSESpecification.validateJsonElement(jsonObj.get("SSESpecificationOverride"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RestoreTableFromBackupInput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RestoreTableFromBackupInput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RestoreTableFromBackupInput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RestoreTableFromBackupInput.class));

       return (TypeAdapter<T>) new TypeAdapter<RestoreTableFromBackupInput>() {
           @Override
           public void write(JsonWriter out, RestoreTableFromBackupInput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RestoreTableFromBackupInput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RestoreTableFromBackupInput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RestoreTableFromBackupInput
   * @throws IOException if the JSON string is invalid with respect to RestoreTableFromBackupInput
   */
  public static RestoreTableFromBackupInput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RestoreTableFromBackupInput.class);
  }

  /**
   * Convert an instance of RestoreTableFromBackupInput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

