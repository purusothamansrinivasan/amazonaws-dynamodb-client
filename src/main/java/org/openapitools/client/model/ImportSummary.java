/*
 * Amazon DynamoDB
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database, so that you don't have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.</p> <p>With DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic. You can scale up or scale down your tables' throughput capacity without downtime or performance degradation, and use the Amazon Web Services Management Console to monitor resource utilization and performance metrics.</p> <p>DynamoDB automatically spreads the data and traffic for your tables over a sufficient number of servers to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and automatically replicated across multiple Availability Zones in an Amazon Web Services Region, providing built-in high availability and data durability.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.ImportStatus;
import org.openapitools.client.model.InputFormat;
import org.openapitools.client.model.S3BucketSource;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 *  Summary information about the source file for the import. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T14:20:21.724079+05:30[Asia/Kolkata]", comments = "Generator version: 7.15.0")
public class ImportSummary {
  public static final String SERIALIZED_NAME_IMPORT_ARN = "ImportArn";
  @SerializedName(SERIALIZED_NAME_IMPORT_ARN)
  @javax.annotation.Nullable
  private String importArn;

  public static final String SERIALIZED_NAME_IMPORT_STATUS = "ImportStatus";
  @SerializedName(SERIALIZED_NAME_IMPORT_STATUS)
  @javax.annotation.Nullable
  private ImportStatus importStatus;

  public static final String SERIALIZED_NAME_TABLE_ARN = "TableArn";
  @SerializedName(SERIALIZED_NAME_TABLE_ARN)
  @javax.annotation.Nullable
  private String tableArn;

  public static final String SERIALIZED_NAME_S3_BUCKET_SOURCE = "S3BucketSource";
  @SerializedName(SERIALIZED_NAME_S3_BUCKET_SOURCE)
  @javax.annotation.Nullable
  private S3BucketSource s3BucketSource;

  public static final String SERIALIZED_NAME_CLOUD_WATCH_LOG_GROUP_ARN = "CloudWatchLogGroupArn";
  @SerializedName(SERIALIZED_NAME_CLOUD_WATCH_LOG_GROUP_ARN)
  @javax.annotation.Nullable
  private String cloudWatchLogGroupArn;

  public static final String SERIALIZED_NAME_INPUT_FORMAT = "InputFormat";
  @SerializedName(SERIALIZED_NAME_INPUT_FORMAT)
  @javax.annotation.Nullable
  private InputFormat inputFormat;

  public static final String SERIALIZED_NAME_START_TIME = "StartTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  @javax.annotation.Nullable
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_END_TIME = "EndTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  @javax.annotation.Nullable
  private OffsetDateTime endTime;

  public ImportSummary() {
  }

  public ImportSummary importArn(@javax.annotation.Nullable String importArn) {
    this.importArn = importArn;
    return this;
  }

  /**
   *  The Amazon Resource Number (ARN) corresponding to the import request. 
   * @return importArn
   */
  @javax.annotation.Nullable
  public String getImportArn() {
    return importArn;
  }

  public void setImportArn(@javax.annotation.Nullable String importArn) {
    this.importArn = importArn;
  }


  public ImportSummary importStatus(@javax.annotation.Nullable ImportStatus importStatus) {
    this.importStatus = importStatus;
    return this;
  }

  /**
   *  The status of the import operation. 
   * @return importStatus
   */
  @javax.annotation.Nullable
  public ImportStatus getImportStatus() {
    return importStatus;
  }

  public void setImportStatus(@javax.annotation.Nullable ImportStatus importStatus) {
    this.importStatus = importStatus;
  }


  public ImportSummary tableArn(@javax.annotation.Nullable String tableArn) {
    this.tableArn = tableArn;
    return this;
  }

  /**
   *  The Amazon Resource Number (ARN) of the table being imported into. 
   * @return tableArn
   */
  @javax.annotation.Nullable
  public String getTableArn() {
    return tableArn;
  }

  public void setTableArn(@javax.annotation.Nullable String tableArn) {
    this.tableArn = tableArn;
  }


  public ImportSummary s3BucketSource(@javax.annotation.Nullable S3BucketSource s3BucketSource) {
    this.s3BucketSource = s3BucketSource;
    return this;
  }

  /**
   *  The path and S3 bucket of the source file that is being imported. This includes the S3Bucket (required), S3KeyPrefix (optional) and S3BucketOwner (optional if the bucket is owned by the requester). 
   * @return s3BucketSource
   */
  @javax.annotation.Nullable
  public S3BucketSource getS3BucketSource() {
    return s3BucketSource;
  }

  public void setS3BucketSource(@javax.annotation.Nullable S3BucketSource s3BucketSource) {
    this.s3BucketSource = s3BucketSource;
  }


  public ImportSummary cloudWatchLogGroupArn(@javax.annotation.Nullable String cloudWatchLogGroupArn) {
    this.cloudWatchLogGroupArn = cloudWatchLogGroupArn;
    return this;
  }

  /**
   *  The Amazon Resource Number (ARN) of the Cloudwatch Log Group associated with this import task. 
   * @return cloudWatchLogGroupArn
   */
  @javax.annotation.Nullable
  public String getCloudWatchLogGroupArn() {
    return cloudWatchLogGroupArn;
  }

  public void setCloudWatchLogGroupArn(@javax.annotation.Nullable String cloudWatchLogGroupArn) {
    this.cloudWatchLogGroupArn = cloudWatchLogGroupArn;
  }


  public ImportSummary inputFormat(@javax.annotation.Nullable InputFormat inputFormat) {
    this.inputFormat = inputFormat;
    return this;
  }

  /**
   *  The format of the source data. Valid values are &lt;code&gt;CSV&lt;/code&gt;, &lt;code&gt;DYNAMODB_JSON&lt;/code&gt; or &lt;code&gt;ION&lt;/code&gt;.
   * @return inputFormat
   */
  @javax.annotation.Nullable
  public InputFormat getInputFormat() {
    return inputFormat;
  }

  public void setInputFormat(@javax.annotation.Nullable InputFormat inputFormat) {
    this.inputFormat = inputFormat;
  }


  public ImportSummary startTime(@javax.annotation.Nullable OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   *  The time at which this import task began. 
   * @return startTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(@javax.annotation.Nullable OffsetDateTime startTime) {
    this.startTime = startTime;
  }


  public ImportSummary endTime(@javax.annotation.Nullable OffsetDateTime endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   *  The time at which this import task ended. (Does this include the successful complete creation of the table it was imported to?) 
   * @return endTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndTime() {
    return endTime;
  }

  public void setEndTime(@javax.annotation.Nullable OffsetDateTime endTime) {
    this.endTime = endTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImportSummary importSummary = (ImportSummary) o;
    return Objects.equals(this.importArn, importSummary.importArn) &&
        Objects.equals(this.importStatus, importSummary.importStatus) &&
        Objects.equals(this.tableArn, importSummary.tableArn) &&
        Objects.equals(this.s3BucketSource, importSummary.s3BucketSource) &&
        Objects.equals(this.cloudWatchLogGroupArn, importSummary.cloudWatchLogGroupArn) &&
        Objects.equals(this.inputFormat, importSummary.inputFormat) &&
        Objects.equals(this.startTime, importSummary.startTime) &&
        Objects.equals(this.endTime, importSummary.endTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(importArn, importStatus, tableArn, s3BucketSource, cloudWatchLogGroupArn, inputFormat, startTime, endTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImportSummary {\n");
    sb.append("    importArn: ").append(toIndentedString(importArn)).append("\n");
    sb.append("    importStatus: ").append(toIndentedString(importStatus)).append("\n");
    sb.append("    tableArn: ").append(toIndentedString(tableArn)).append("\n");
    sb.append("    s3BucketSource: ").append(toIndentedString(s3BucketSource)).append("\n");
    sb.append("    cloudWatchLogGroupArn: ").append(toIndentedString(cloudWatchLogGroupArn)).append("\n");
    sb.append("    inputFormat: ").append(toIndentedString(inputFormat)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("ImportArn", "ImportStatus", "TableArn", "S3BucketSource", "CloudWatchLogGroupArn", "InputFormat", "StartTime", "EndTime"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ImportSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ImportSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ImportSummary is not found in the empty JSON string", ImportSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ImportSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ImportSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ImportArn") != null && !jsonObj.get("ImportArn").isJsonNull()) && !jsonObj.get("ImportArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ImportArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ImportArn").toString()));
      }
      // validate the optional field `ImportStatus`
      if (jsonObj.get("ImportStatus") != null && !jsonObj.get("ImportStatus").isJsonNull()) {
        ImportStatus.validateJsonElement(jsonObj.get("ImportStatus"));
      }
      if ((jsonObj.get("TableArn") != null && !jsonObj.get("TableArn").isJsonNull()) && !jsonObj.get("TableArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TableArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TableArn").toString()));
      }
      // validate the optional field `S3BucketSource`
      if (jsonObj.get("S3BucketSource") != null && !jsonObj.get("S3BucketSource").isJsonNull()) {
        S3BucketSource.validateJsonElement(jsonObj.get("S3BucketSource"));
      }
      if ((jsonObj.get("CloudWatchLogGroupArn") != null && !jsonObj.get("CloudWatchLogGroupArn").isJsonNull()) && !jsonObj.get("CloudWatchLogGroupArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CloudWatchLogGroupArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CloudWatchLogGroupArn").toString()));
      }
      // validate the optional field `InputFormat`
      if (jsonObj.get("InputFormat") != null && !jsonObj.get("InputFormat").isJsonNull()) {
        InputFormat.validateJsonElement(jsonObj.get("InputFormat"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ImportSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ImportSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ImportSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ImportSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<ImportSummary>() {
           @Override
           public void write(JsonWriter out, ImportSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ImportSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ImportSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ImportSummary
   * @throws IOException if the JSON string is invalid with respect to ImportSummary
   */
  public static ImportSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ImportSummary.class);
  }

  /**
   * Convert an instance of ImportSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

