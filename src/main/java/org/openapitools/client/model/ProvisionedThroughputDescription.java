/*
 * Amazon DynamoDB
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database, so that you don't have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.</p> <p>With DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic. You can scale up or scale down your tables' throughput capacity without downtime or performance degradation, and use the Amazon Web Services Management Console to monitor resource utilization and performance metrics.</p> <p>DynamoDB automatically spreads the data and traffic for your tables over a sufficient number of servers to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and automatically replicated across multiple Availability Zones in an Amazon Web Services Region, providing built-in high availability and data durability.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents the provisioned throughput settings for the table, consisting of read and write capacity units, along with data about increases and decreases.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T14:20:21.724079+05:30[Asia/Kolkata]", comments = "Generator version: 7.15.0")
public class ProvisionedThroughputDescription {
  public static final String SERIALIZED_NAME_LAST_INCREASE_DATE_TIME = "LastIncreaseDateTime";
  @SerializedName(SERIALIZED_NAME_LAST_INCREASE_DATE_TIME)
  @javax.annotation.Nullable
  private OffsetDateTime lastIncreaseDateTime;

  public static final String SERIALIZED_NAME_LAST_DECREASE_DATE_TIME = "LastDecreaseDateTime";
  @SerializedName(SERIALIZED_NAME_LAST_DECREASE_DATE_TIME)
  @javax.annotation.Nullable
  private OffsetDateTime lastDecreaseDateTime;

  public static final String SERIALIZED_NAME_NUMBER_OF_DECREASES_TODAY = "NumberOfDecreasesToday";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_DECREASES_TODAY)
  @javax.annotation.Nullable
  private Integer numberOfDecreasesToday;

  public static final String SERIALIZED_NAME_READ_CAPACITY_UNITS = "ReadCapacityUnits";
  @SerializedName(SERIALIZED_NAME_READ_CAPACITY_UNITS)
  @javax.annotation.Nullable
  private Integer readCapacityUnits;

  public static final String SERIALIZED_NAME_WRITE_CAPACITY_UNITS = "WriteCapacityUnits";
  @SerializedName(SERIALIZED_NAME_WRITE_CAPACITY_UNITS)
  @javax.annotation.Nullable
  private Integer writeCapacityUnits;

  public ProvisionedThroughputDescription() {
  }

  public ProvisionedThroughputDescription lastIncreaseDateTime(@javax.annotation.Nullable OffsetDateTime lastIncreaseDateTime) {
    this.lastIncreaseDateTime = lastIncreaseDateTime;
    return this;
  }

  /**
   * The date and time of the last provisioned throughput increase for this table.
   * @return lastIncreaseDateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastIncreaseDateTime() {
    return lastIncreaseDateTime;
  }

  public void setLastIncreaseDateTime(@javax.annotation.Nullable OffsetDateTime lastIncreaseDateTime) {
    this.lastIncreaseDateTime = lastIncreaseDateTime;
  }


  public ProvisionedThroughputDescription lastDecreaseDateTime(@javax.annotation.Nullable OffsetDateTime lastDecreaseDateTime) {
    this.lastDecreaseDateTime = lastDecreaseDateTime;
    return this;
  }

  /**
   * The date and time of the last provisioned throughput decrease for this table.
   * @return lastDecreaseDateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastDecreaseDateTime() {
    return lastDecreaseDateTime;
  }

  public void setLastDecreaseDateTime(@javax.annotation.Nullable OffsetDateTime lastDecreaseDateTime) {
    this.lastDecreaseDateTime = lastDecreaseDateTime;
  }


  public ProvisionedThroughputDescription numberOfDecreasesToday(@javax.annotation.Nullable Integer numberOfDecreasesToday) {
    this.numberOfDecreasesToday = numberOfDecreasesToday;
    return this;
  }

  /**
   * The number of provisioned throughput decreases for this table during this UTC calendar day. For current maximums on provisioned throughput decreases, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html\&quot;&gt;Service, Account, and Table Quotas&lt;/a&gt; in the &lt;i&gt;Amazon DynamoDB Developer Guide&lt;/i&gt;.
   * minimum: 1
   * @return numberOfDecreasesToday
   */
  @javax.annotation.Nullable
  public Integer getNumberOfDecreasesToday() {
    return numberOfDecreasesToday;
  }

  public void setNumberOfDecreasesToday(@javax.annotation.Nullable Integer numberOfDecreasesToday) {
    this.numberOfDecreasesToday = numberOfDecreasesToday;
  }


  public ProvisionedThroughputDescription readCapacityUnits(@javax.annotation.Nullable Integer readCapacityUnits) {
    this.readCapacityUnits = readCapacityUnits;
    return this;
  }

  /**
   * The maximum number of strongly consistent reads consumed per second before DynamoDB returns a &lt;code&gt;ThrottlingException&lt;/code&gt;. Eventually consistent reads require less effort than strongly consistent reads, so a setting of 50 &lt;code&gt;ReadCapacityUnits&lt;/code&gt; per second provides 100 eventually consistent &lt;code&gt;ReadCapacityUnits&lt;/code&gt; per second.
   * minimum: 0
   * @return readCapacityUnits
   */
  @javax.annotation.Nullable
  public Integer getReadCapacityUnits() {
    return readCapacityUnits;
  }

  public void setReadCapacityUnits(@javax.annotation.Nullable Integer readCapacityUnits) {
    this.readCapacityUnits = readCapacityUnits;
  }


  public ProvisionedThroughputDescription writeCapacityUnits(@javax.annotation.Nullable Integer writeCapacityUnits) {
    this.writeCapacityUnits = writeCapacityUnits;
    return this;
  }

  /**
   * The maximum number of writes consumed per second before DynamoDB returns a &lt;code&gt;ThrottlingException&lt;/code&gt;.
   * minimum: 0
   * @return writeCapacityUnits
   */
  @javax.annotation.Nullable
  public Integer getWriteCapacityUnits() {
    return writeCapacityUnits;
  }

  public void setWriteCapacityUnits(@javax.annotation.Nullable Integer writeCapacityUnits) {
    this.writeCapacityUnits = writeCapacityUnits;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProvisionedThroughputDescription provisionedThroughputDescription = (ProvisionedThroughputDescription) o;
    return Objects.equals(this.lastIncreaseDateTime, provisionedThroughputDescription.lastIncreaseDateTime) &&
        Objects.equals(this.lastDecreaseDateTime, provisionedThroughputDescription.lastDecreaseDateTime) &&
        Objects.equals(this.numberOfDecreasesToday, provisionedThroughputDescription.numberOfDecreasesToday) &&
        Objects.equals(this.readCapacityUnits, provisionedThroughputDescription.readCapacityUnits) &&
        Objects.equals(this.writeCapacityUnits, provisionedThroughputDescription.writeCapacityUnits);
  }

  @Override
  public int hashCode() {
    return Objects.hash(lastIncreaseDateTime, lastDecreaseDateTime, numberOfDecreasesToday, readCapacityUnits, writeCapacityUnits);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProvisionedThroughputDescription {\n");
    sb.append("    lastIncreaseDateTime: ").append(toIndentedString(lastIncreaseDateTime)).append("\n");
    sb.append("    lastDecreaseDateTime: ").append(toIndentedString(lastDecreaseDateTime)).append("\n");
    sb.append("    numberOfDecreasesToday: ").append(toIndentedString(numberOfDecreasesToday)).append("\n");
    sb.append("    readCapacityUnits: ").append(toIndentedString(readCapacityUnits)).append("\n");
    sb.append("    writeCapacityUnits: ").append(toIndentedString(writeCapacityUnits)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("LastIncreaseDateTime", "LastDecreaseDateTime", "NumberOfDecreasesToday", "ReadCapacityUnits", "WriteCapacityUnits"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProvisionedThroughputDescription
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProvisionedThroughputDescription.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProvisionedThroughputDescription is not found in the empty JSON string", ProvisionedThroughputDescription.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProvisionedThroughputDescription.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProvisionedThroughputDescription` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProvisionedThroughputDescription.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProvisionedThroughputDescription' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProvisionedThroughputDescription> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProvisionedThroughputDescription.class));

       return (TypeAdapter<T>) new TypeAdapter<ProvisionedThroughputDescription>() {
           @Override
           public void write(JsonWriter out, ProvisionedThroughputDescription value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProvisionedThroughputDescription read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProvisionedThroughputDescription given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProvisionedThroughputDescription
   * @throws IOException if the JSON string is invalid with respect to ProvisionedThroughputDescription
   */
  public static ProvisionedThroughputDescription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProvisionedThroughputDescription.class);
  }

  /**
   * Convert an instance of ProvisionedThroughputDescription to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

