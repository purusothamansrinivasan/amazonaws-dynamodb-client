/*
 * Amazon DynamoDB
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database, so that you don't have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.</p> <p>With DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic. You can scale up or scale down your tables' throughput capacity without downtime or performance degradation, and use the Amazon Web Services Management Console to monitor resource utilization and performance metrics.</p> <p>DynamoDB automatically spreads the data and traffic for your tables over a sufficient number of servers to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and automatically replicated across multiple Availability Zones in an Amazon Web Services Region, providing built-in high availability and data durability.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.ConsumedCapacity;
import org.openapitools.client.model.ItemCollectionMetrics;
import org.openapitools.client.model.WriteRequest;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents the output of a &lt;code&gt;BatchWriteItem&lt;/code&gt; operation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T14:20:21.724079+05:30[Asia/Kolkata]", comments = "Generator version: 7.15.0")
public class BatchWriteItemOutput {
  public static final String SERIALIZED_NAME_UNPROCESSED_ITEMS = "UnprocessedItems";
  @SerializedName(SERIALIZED_NAME_UNPROCESSED_ITEMS)
  @javax.annotation.Nullable
  private Map<String, List<WriteRequest>> unprocessedItems;

  public static final String SERIALIZED_NAME_ITEM_COLLECTION_METRICS = "ItemCollectionMetrics";
  @SerializedName(SERIALIZED_NAME_ITEM_COLLECTION_METRICS)
  @javax.annotation.Nullable
  private Map<String, List<ItemCollectionMetrics>> itemCollectionMetrics;

  public static final String SERIALIZED_NAME_CONSUMED_CAPACITY = "ConsumedCapacity";
  @SerializedName(SERIALIZED_NAME_CONSUMED_CAPACITY)
  @javax.annotation.Nullable
  private List<ConsumedCapacity> consumedCapacity;

  public BatchWriteItemOutput() {
  }

  public BatchWriteItemOutput unprocessedItems(@javax.annotation.Nullable Map<String, List<WriteRequest>> unprocessedItems) {
    this.unprocessedItems = unprocessedItems;
    return this;
  }

  public BatchWriteItemOutput putUnprocessedItemsItem(String key, List<WriteRequest> unprocessedItemsItem) {
    if (this.unprocessedItems == null) {
      this.unprocessedItems = new HashMap<>();
    }
    this.unprocessedItems.put(key, unprocessedItemsItem);
    return this;
  }

  /**
   * &lt;p&gt;A map of tables and requests against those tables that were not processed. The &lt;code&gt;UnprocessedItems&lt;/code&gt; value is in the same form as &lt;code&gt;RequestItems&lt;/code&gt;, so you can provide this value directly to a subsequent &lt;code&gt;BatchWriteItem&lt;/code&gt; operation. For more information, see &lt;code&gt;RequestItems&lt;/code&gt; in the Request Parameters section.&lt;/p&gt; &lt;p&gt;Each &lt;code&gt;UnprocessedItems&lt;/code&gt; entry consists of a table name and, for that table, a list of operations to perform (&lt;code&gt;DeleteRequest&lt;/code&gt; or &lt;code&gt;PutRequest&lt;/code&gt;).&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DeleteRequest&lt;/code&gt; - Perform a &lt;code&gt;DeleteItem&lt;/code&gt; operation on the specified item. The item to be deleted is identified by a &lt;code&gt;Key&lt;/code&gt; subelement:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Key&lt;/code&gt; - A map of primary key attribute values that uniquely identify the item. Each entry in this map consists of an attribute name and an attribute value.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;PutRequest&lt;/code&gt; - Perform a &lt;code&gt;PutItem&lt;/code&gt; operation on the specified item. The item to be put is identified by an &lt;code&gt;Item&lt;/code&gt; subelement:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Item&lt;/code&gt; - A map of attributes and their values. Each entry in this map consists of an attribute name and an attribute value. Attribute values must not be null; string and binary type attributes must have lengths greater than zero; and set type attributes must not be empty. Requests that contain empty values will be rejected with a &lt;code&gt;ValidationException&lt;/code&gt; exception.&lt;/p&gt; &lt;p&gt;If you specify any attributes that are part of an index key, then the data types for those attributes must match those of the schema in the table&#39;s attribute definition.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If there are no unprocessed items remaining, the response contains an empty &lt;code&gt;UnprocessedItems&lt;/code&gt; map.&lt;/p&gt;
   * @return unprocessedItems
   */
  @javax.annotation.Nullable
  public Map<String, List<WriteRequest>> getUnprocessedItems() {
    return unprocessedItems;
  }

  public void setUnprocessedItems(@javax.annotation.Nullable Map<String, List<WriteRequest>> unprocessedItems) {
    this.unprocessedItems = unprocessedItems;
  }


  public BatchWriteItemOutput itemCollectionMetrics(@javax.annotation.Nullable Map<String, List<ItemCollectionMetrics>> itemCollectionMetrics) {
    this.itemCollectionMetrics = itemCollectionMetrics;
    return this;
  }

  public BatchWriteItemOutput putItemCollectionMetricsItem(String key, List<ItemCollectionMetrics> itemCollectionMetricsItem) {
    if (this.itemCollectionMetrics == null) {
      this.itemCollectionMetrics = new HashMap<>();
    }
    this.itemCollectionMetrics.put(key, itemCollectionMetricsItem);
    return this;
  }

  /**
   * &lt;p&gt;A list of tables that were processed by &lt;code&gt;BatchWriteItem&lt;/code&gt; and, for each table, information about any item collections that were affected by individual &lt;code&gt;DeleteItem&lt;/code&gt; or &lt;code&gt;PutItem&lt;/code&gt; operations.&lt;/p&gt; &lt;p&gt;Each entry consists of the following subelements:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ItemCollectionKey&lt;/code&gt; - The partition key value of the item collection. This is the same as the partition key value of the item.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SizeEstimateRangeGB&lt;/code&gt; - An estimate of item collection size, expressed in GB. This is a two-element array containing a lower bound and an upper bound for the estimate. The estimate includes the size of all the items in the table, plus the size of all attributes projected into all of the local secondary indexes on the table. Use this estimate to measure whether a local secondary index is approaching its size limit.&lt;/p&gt; &lt;p&gt;The estimate is subject to change over time; therefore, do not rely on the precision or accuracy of the estimate.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
   * @return itemCollectionMetrics
   */
  @javax.annotation.Nullable
  public Map<String, List<ItemCollectionMetrics>> getItemCollectionMetrics() {
    return itemCollectionMetrics;
  }

  public void setItemCollectionMetrics(@javax.annotation.Nullable Map<String, List<ItemCollectionMetrics>> itemCollectionMetrics) {
    this.itemCollectionMetrics = itemCollectionMetrics;
  }


  public BatchWriteItemOutput consumedCapacity(@javax.annotation.Nullable List<ConsumedCapacity> consumedCapacity) {
    this.consumedCapacity = consumedCapacity;
    return this;
  }

  public BatchWriteItemOutput addConsumedCapacityItem(ConsumedCapacity consumedCapacityItem) {
    if (this.consumedCapacity == null) {
      this.consumedCapacity = new ArrayList<>();
    }
    this.consumedCapacity.add(consumedCapacityItem);
    return this;
  }

  /**
   * &lt;p&gt;The capacity units consumed by the entire &lt;code&gt;BatchWriteItem&lt;/code&gt; operation.&lt;/p&gt; &lt;p&gt;Each element consists of:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;TableName&lt;/code&gt; - The table that consumed the provisioned throughput.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;CapacityUnits&lt;/code&gt; - The total number of capacity units consumed.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
   * @return consumedCapacity
   */
  @javax.annotation.Nullable
  public List<ConsumedCapacity> getConsumedCapacity() {
    return consumedCapacity;
  }

  public void setConsumedCapacity(@javax.annotation.Nullable List<ConsumedCapacity> consumedCapacity) {
    this.consumedCapacity = consumedCapacity;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BatchWriteItemOutput batchWriteItemOutput = (BatchWriteItemOutput) o;
    return Objects.equals(this.unprocessedItems, batchWriteItemOutput.unprocessedItems) &&
        Objects.equals(this.itemCollectionMetrics, batchWriteItemOutput.itemCollectionMetrics) &&
        Objects.equals(this.consumedCapacity, batchWriteItemOutput.consumedCapacity);
  }

  @Override
  public int hashCode() {
    return Objects.hash(unprocessedItems, itemCollectionMetrics, consumedCapacity);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BatchWriteItemOutput {\n");
    sb.append("    unprocessedItems: ").append(toIndentedString(unprocessedItems)).append("\n");
    sb.append("    itemCollectionMetrics: ").append(toIndentedString(itemCollectionMetrics)).append("\n");
    sb.append("    consumedCapacity: ").append(toIndentedString(consumedCapacity)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("UnprocessedItems", "ItemCollectionMetrics", "ConsumedCapacity"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BatchWriteItemOutput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BatchWriteItemOutput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BatchWriteItemOutput is not found in the empty JSON string", BatchWriteItemOutput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BatchWriteItemOutput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BatchWriteItemOutput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("ConsumedCapacity") != null && !jsonObj.get("ConsumedCapacity").isJsonNull()) {
        JsonArray jsonArrayconsumedCapacity = jsonObj.getAsJsonArray("ConsumedCapacity");
        if (jsonArrayconsumedCapacity != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ConsumedCapacity").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ConsumedCapacity` to be an array in the JSON string but got `%s`", jsonObj.get("ConsumedCapacity").toString()));
          }

          // validate the optional field `ConsumedCapacity` (array)
          for (int i = 0; i < jsonArrayconsumedCapacity.size(); i++) {
            ConsumedCapacity.validateJsonElement(jsonArrayconsumedCapacity.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BatchWriteItemOutput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BatchWriteItemOutput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BatchWriteItemOutput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BatchWriteItemOutput.class));

       return (TypeAdapter<T>) new TypeAdapter<BatchWriteItemOutput>() {
           @Override
           public void write(JsonWriter out, BatchWriteItemOutput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BatchWriteItemOutput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BatchWriteItemOutput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BatchWriteItemOutput
   * @throws IOException if the JSON string is invalid with respect to BatchWriteItemOutput
   */
  public static BatchWriteItemOutput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BatchWriteItemOutput.class);
  }

  /**
   * Convert an instance of BatchWriteItemOutput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

