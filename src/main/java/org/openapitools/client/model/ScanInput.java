/*
 * Amazon DynamoDB
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database, so that you don't have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.</p> <p>With DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic. You can scale up or scale down your tables' throughput capacity without downtime or performance degradation, and use the Amazon Web Services Management Console to monitor resource utilization and performance metrics.</p> <p>DynamoDB automatically spreads the data and traffic for your tables over a sufficient number of servers to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and automatically replicated across multiple Availability Zones in an Amazon Web Services Region, providing built-in high availability and data durability.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.AttributeValue;
import org.openapitools.client.model.Condition;
import org.openapitools.client.model.ConditionalOperator;
import org.openapitools.client.model.ReturnConsumedCapacity;
import org.openapitools.client.model.Select;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents the input of a &lt;code&gt;Scan&lt;/code&gt; operation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T14:20:21.724079+05:30[Asia/Kolkata]", comments = "Generator version: 7.15.0")
public class ScanInput {
  public static final String SERIALIZED_NAME_TABLE_NAME = "TableName";
  @SerializedName(SERIALIZED_NAME_TABLE_NAME)
  @javax.annotation.Nonnull
  private String tableName;

  public static final String SERIALIZED_NAME_INDEX_NAME = "IndexName";
  @SerializedName(SERIALIZED_NAME_INDEX_NAME)
  @javax.annotation.Nullable
  private String indexName;

  public static final String SERIALIZED_NAME_ATTRIBUTES_TO_GET = "AttributesToGet";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES_TO_GET)
  @javax.annotation.Nullable
  private List<String> attributesToGet;

  public static final String SERIALIZED_NAME_LIMIT = "Limit";
  @SerializedName(SERIALIZED_NAME_LIMIT)
  @javax.annotation.Nullable
  private Integer limit;

  public static final String SERIALIZED_NAME_SELECT = "Select";
  @SerializedName(SERIALIZED_NAME_SELECT)
  @javax.annotation.Nullable
  private Select select;

  public static final String SERIALIZED_NAME_SCAN_FILTER = "ScanFilter";
  @SerializedName(SERIALIZED_NAME_SCAN_FILTER)
  @javax.annotation.Nullable
  private Map<String, Condition> scanFilter;

  public static final String SERIALIZED_NAME_CONDITIONAL_OPERATOR = "ConditionalOperator";
  @SerializedName(SERIALIZED_NAME_CONDITIONAL_OPERATOR)
  @javax.annotation.Nullable
  private ConditionalOperator conditionalOperator;

  public static final String SERIALIZED_NAME_EXCLUSIVE_START_KEY = "ExclusiveStartKey";
  @SerializedName(SERIALIZED_NAME_EXCLUSIVE_START_KEY)
  @javax.annotation.Nullable
  private Map<String, AttributeValue> exclusiveStartKey;

  public static final String SERIALIZED_NAME_RETURN_CONSUMED_CAPACITY = "ReturnConsumedCapacity";
  @SerializedName(SERIALIZED_NAME_RETURN_CONSUMED_CAPACITY)
  @javax.annotation.Nullable
  private ReturnConsumedCapacity returnConsumedCapacity;

  public static final String SERIALIZED_NAME_TOTAL_SEGMENTS = "TotalSegments";
  @SerializedName(SERIALIZED_NAME_TOTAL_SEGMENTS)
  @javax.annotation.Nullable
  private Integer totalSegments;

  public static final String SERIALIZED_NAME_SEGMENT = "Segment";
  @SerializedName(SERIALIZED_NAME_SEGMENT)
  @javax.annotation.Nullable
  private Integer segment;

  public static final String SERIALIZED_NAME_PROJECTION_EXPRESSION = "ProjectionExpression";
  @SerializedName(SERIALIZED_NAME_PROJECTION_EXPRESSION)
  @javax.annotation.Nullable
  private String projectionExpression;

  public static final String SERIALIZED_NAME_FILTER_EXPRESSION = "FilterExpression";
  @SerializedName(SERIALIZED_NAME_FILTER_EXPRESSION)
  @javax.annotation.Nullable
  private String filterExpression;

  public static final String SERIALIZED_NAME_EXPRESSION_ATTRIBUTE_NAMES = "ExpressionAttributeNames";
  @SerializedName(SERIALIZED_NAME_EXPRESSION_ATTRIBUTE_NAMES)
  @javax.annotation.Nullable
  private Map<String, String> expressionAttributeNames;

  public static final String SERIALIZED_NAME_EXPRESSION_ATTRIBUTE_VALUES = "ExpressionAttributeValues";
  @SerializedName(SERIALIZED_NAME_EXPRESSION_ATTRIBUTE_VALUES)
  @javax.annotation.Nullable
  private Map<String, AttributeValue> expressionAttributeValues;

  public static final String SERIALIZED_NAME_CONSISTENT_READ = "ConsistentRead";
  @SerializedName(SERIALIZED_NAME_CONSISTENT_READ)
  @javax.annotation.Nullable
  private Boolean consistentRead;

  public ScanInput() {
  }

  public ScanInput tableName(@javax.annotation.Nonnull String tableName) {
    this.tableName = tableName;
    return this;
  }

  /**
   * The name of the table containing the requested items; or, if you provide &lt;code&gt;IndexName&lt;/code&gt;, the name of the table to which that index belongs.
   * @return tableName
   */
  @javax.annotation.Nonnull
  public String getTableName() {
    return tableName;
  }

  public void setTableName(@javax.annotation.Nonnull String tableName) {
    this.tableName = tableName;
  }


  public ScanInput indexName(@javax.annotation.Nullable String indexName) {
    this.indexName = indexName;
    return this;
  }

  /**
   * The name of a secondary index to scan. This index can be any local secondary index or global secondary index. Note that if you use the &lt;code&gt;IndexName&lt;/code&gt; parameter, you must also provide &lt;code&gt;TableName&lt;/code&gt;.
   * @return indexName
   */
  @javax.annotation.Nullable
  public String getIndexName() {
    return indexName;
  }

  public void setIndexName(@javax.annotation.Nullable String indexName) {
    this.indexName = indexName;
  }


  public ScanInput attributesToGet(@javax.annotation.Nullable List<String> attributesToGet) {
    this.attributesToGet = attributesToGet;
    return this;
  }

  public ScanInput addAttributesToGetItem(String attributesToGetItem) {
    if (this.attributesToGet == null) {
      this.attributesToGet = new ArrayList<>();
    }
    this.attributesToGet.add(attributesToGetItem);
    return this;
  }

  /**
   * This is a legacy parameter. Use &lt;code&gt;ProjectionExpression&lt;/code&gt; instead. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.AttributesToGet.html\&quot;&gt;AttributesToGet&lt;/a&gt; in the &lt;i&gt;Amazon DynamoDB Developer Guide&lt;/i&gt;.
   * @return attributesToGet
   */
  @javax.annotation.Nullable
  public List<String> getAttributesToGet() {
    return attributesToGet;
  }

  public void setAttributesToGet(@javax.annotation.Nullable List<String> attributesToGet) {
    this.attributesToGet = attributesToGet;
  }


  public ScanInput limit(@javax.annotation.Nullable Integer limit) {
    this.limit = limit;
    return this;
  }

  /**
   * The maximum number of items to evaluate (not necessarily the number of matching items). If DynamoDB processes the number of items up to the limit while processing the results, it stops the operation and returns the matching values up to that point, and a key in &lt;code&gt;LastEvaluatedKey&lt;/code&gt; to apply in a subsequent operation, so that you can pick up where you left off. Also, if the processed dataset size exceeds 1 MB before DynamoDB reaches this limit, it stops the operation and returns the matching values up to the limit, and a key in &lt;code&gt;LastEvaluatedKey&lt;/code&gt; to apply in a subsequent operation to continue the operation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html\&quot;&gt;Working with Queries&lt;/a&gt; in the &lt;i&gt;Amazon DynamoDB Developer Guide&lt;/i&gt;.
   * minimum: 1
   * @return limit
   */
  @javax.annotation.Nullable
  public Integer getLimit() {
    return limit;
  }

  public void setLimit(@javax.annotation.Nullable Integer limit) {
    this.limit = limit;
  }


  public ScanInput select(@javax.annotation.Nullable Select select) {
    this.select = select;
    return this;
  }

  /**
   * &lt;p&gt;The attributes to be returned in the result. You can retrieve all item attributes, specific item attributes, the count of matching items, or in the case of an index, some or all of the attributes projected into the index.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ALL_ATTRIBUTES&lt;/code&gt; - Returns all of the item attributes from the specified table or index. If you query a local secondary index, then for each matching item in the index, DynamoDB fetches the entire item from the parent table. If the index is configured to project all item attributes, then all of the data can be obtained from the local secondary index, and no fetching is required.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ALL_PROJECTED_ATTRIBUTES&lt;/code&gt; - Allowed only when querying an index. Retrieves all attributes that have been projected into the index. If the index is configured to project all attributes, this return value is equivalent to specifying &lt;code&gt;ALL_ATTRIBUTES&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;COUNT&lt;/code&gt; - Returns the number of matching items, rather than the matching items themselves. Note that this uses the same quantity of read capacity units as getting the items, and is subject to the same item size calculations.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SPECIFIC_ATTRIBUTES&lt;/code&gt; - Returns only the attributes listed in &lt;code&gt;ProjectionExpression&lt;/code&gt;. This return value is equivalent to specifying &lt;code&gt;ProjectionExpression&lt;/code&gt; without specifying any value for &lt;code&gt;Select&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;If you query or scan a local secondary index and request only attributes that are projected into that index, the operation reads only the index and not the table. If any of the requested attributes are not projected into the local secondary index, DynamoDB fetches each of these attributes from the parent table. This extra fetching incurs additional throughput cost and latency.&lt;/p&gt; &lt;p&gt;If you query or scan a global secondary index, you can only request attributes that are projected into the index. Global secondary index queries cannot fetch attributes from the parent table.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If neither &lt;code&gt;Select&lt;/code&gt; nor &lt;code&gt;ProjectionExpression&lt;/code&gt; are specified, DynamoDB defaults to &lt;code&gt;ALL_ATTRIBUTES&lt;/code&gt; when accessing a table, and &lt;code&gt;ALL_PROJECTED_ATTRIBUTES&lt;/code&gt; when accessing an index. You cannot use both &lt;code&gt;Select&lt;/code&gt; and &lt;code&gt;ProjectionExpression&lt;/code&gt; together in a single request, unless the value for &lt;code&gt;Select&lt;/code&gt; is &lt;code&gt;SPECIFIC_ATTRIBUTES&lt;/code&gt;. (This usage is equivalent to specifying &lt;code&gt;ProjectionExpression&lt;/code&gt; without any value for &lt;code&gt;Select&lt;/code&gt;.)&lt;/p&gt; &lt;note&gt; &lt;p&gt;If you use the &lt;code&gt;ProjectionExpression&lt;/code&gt; parameter, then the value for &lt;code&gt;Select&lt;/code&gt; can only be &lt;code&gt;SPECIFIC_ATTRIBUTES&lt;/code&gt;. Any other value for &lt;code&gt;Select&lt;/code&gt; will return an error.&lt;/p&gt; &lt;/note&gt;
   * @return select
   */
  @javax.annotation.Nullable
  public Select getSelect() {
    return select;
  }

  public void setSelect(@javax.annotation.Nullable Select select) {
    this.select = select;
  }


  public ScanInput scanFilter(@javax.annotation.Nullable Map<String, Condition> scanFilter) {
    this.scanFilter = scanFilter;
    return this;
  }

  public ScanInput putScanFilterItem(String key, Condition scanFilterItem) {
    if (this.scanFilter == null) {
      this.scanFilter = new HashMap<>();
    }
    this.scanFilter.put(key, scanFilterItem);
    return this;
  }

  /**
   * This is a legacy parameter. Use &lt;code&gt;FilterExpression&lt;/code&gt; instead. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.ScanFilter.html\&quot;&gt;ScanFilter&lt;/a&gt; in the &lt;i&gt;Amazon DynamoDB Developer Guide&lt;/i&gt;.
   * @return scanFilter
   */
  @javax.annotation.Nullable
  public Map<String, Condition> getScanFilter() {
    return scanFilter;
  }

  public void setScanFilter(@javax.annotation.Nullable Map<String, Condition> scanFilter) {
    this.scanFilter = scanFilter;
  }


  public ScanInput conditionalOperator(@javax.annotation.Nullable ConditionalOperator conditionalOperator) {
    this.conditionalOperator = conditionalOperator;
    return this;
  }

  /**
   * This is a legacy parameter. Use &lt;code&gt;FilterExpression&lt;/code&gt; instead. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.ConditionalOperator.html\&quot;&gt;ConditionalOperator&lt;/a&gt; in the &lt;i&gt;Amazon DynamoDB Developer Guide&lt;/i&gt;.
   * @return conditionalOperator
   */
  @javax.annotation.Nullable
  public ConditionalOperator getConditionalOperator() {
    return conditionalOperator;
  }

  public void setConditionalOperator(@javax.annotation.Nullable ConditionalOperator conditionalOperator) {
    this.conditionalOperator = conditionalOperator;
  }


  public ScanInput exclusiveStartKey(@javax.annotation.Nullable Map<String, AttributeValue> exclusiveStartKey) {
    this.exclusiveStartKey = exclusiveStartKey;
    return this;
  }

  public ScanInput putExclusiveStartKeyItem(String key, AttributeValue exclusiveStartKeyItem) {
    if (this.exclusiveStartKey == null) {
      this.exclusiveStartKey = new HashMap<>();
    }
    this.exclusiveStartKey.put(key, exclusiveStartKeyItem);
    return this;
  }

  /**
   * &lt;p&gt;The primary key of the first item that this operation will evaluate. Use the value that was returned for &lt;code&gt;LastEvaluatedKey&lt;/code&gt; in the previous operation.&lt;/p&gt; &lt;p&gt;The data type for &lt;code&gt;ExclusiveStartKey&lt;/code&gt; must be String, Number or Binary. No set data types are allowed.&lt;/p&gt; &lt;p&gt;In a parallel scan, a &lt;code&gt;Scan&lt;/code&gt; request that includes &lt;code&gt;ExclusiveStartKey&lt;/code&gt; must specify the same segment whose previous &lt;code&gt;Scan&lt;/code&gt; returned the corresponding value of &lt;code&gt;LastEvaluatedKey&lt;/code&gt;.&lt;/p&gt;
   * @return exclusiveStartKey
   */
  @javax.annotation.Nullable
  public Map<String, AttributeValue> getExclusiveStartKey() {
    return exclusiveStartKey;
  }

  public void setExclusiveStartKey(@javax.annotation.Nullable Map<String, AttributeValue> exclusiveStartKey) {
    this.exclusiveStartKey = exclusiveStartKey;
  }


  public ScanInput returnConsumedCapacity(@javax.annotation.Nullable ReturnConsumedCapacity returnConsumedCapacity) {
    this.returnConsumedCapacity = returnConsumedCapacity;
    return this;
  }

  /**
   * Get returnConsumedCapacity
   * @return returnConsumedCapacity
   */
  @javax.annotation.Nullable
  public ReturnConsumedCapacity getReturnConsumedCapacity() {
    return returnConsumedCapacity;
  }

  public void setReturnConsumedCapacity(@javax.annotation.Nullable ReturnConsumedCapacity returnConsumedCapacity) {
    this.returnConsumedCapacity = returnConsumedCapacity;
  }


  public ScanInput totalSegments(@javax.annotation.Nullable Integer totalSegments) {
    this.totalSegments = totalSegments;
    return this;
  }

  /**
   * &lt;p&gt;For a parallel &lt;code&gt;Scan&lt;/code&gt; request, &lt;code&gt;TotalSegments&lt;/code&gt; represents the total number of segments into which the &lt;code&gt;Scan&lt;/code&gt; operation will be divided. The value of &lt;code&gt;TotalSegments&lt;/code&gt; corresponds to the number of application workers that will perform the parallel scan. For example, if you want to use four application threads to scan a table or an index, specify a &lt;code&gt;TotalSegments&lt;/code&gt; value of 4.&lt;/p&gt; &lt;p&gt;The value for &lt;code&gt;TotalSegments&lt;/code&gt; must be greater than or equal to 1, and less than or equal to 1000000. If you specify a &lt;code&gt;TotalSegments&lt;/code&gt; value of 1, the &lt;code&gt;Scan&lt;/code&gt; operation will be sequential rather than parallel.&lt;/p&gt; &lt;p&gt;If you specify &lt;code&gt;TotalSegments&lt;/code&gt;, you must also specify &lt;code&gt;Segment&lt;/code&gt;.&lt;/p&gt;
   * minimum: 1
   * maximum: 1000000
   * @return totalSegments
   */
  @javax.annotation.Nullable
  public Integer getTotalSegments() {
    return totalSegments;
  }

  public void setTotalSegments(@javax.annotation.Nullable Integer totalSegments) {
    this.totalSegments = totalSegments;
  }


  public ScanInput segment(@javax.annotation.Nullable Integer segment) {
    this.segment = segment;
    return this;
  }

  /**
   * &lt;p&gt;For a parallel &lt;code&gt;Scan&lt;/code&gt; request, &lt;code&gt;Segment&lt;/code&gt; identifies an individual segment to be scanned by an application worker.&lt;/p&gt; &lt;p&gt;Segment IDs are zero-based, so the first segment is always 0. For example, if you want to use four application threads to scan a table or an index, then the first thread specifies a &lt;code&gt;Segment&lt;/code&gt; value of 0, the second thread specifies 1, and so on.&lt;/p&gt; &lt;p&gt;The value of &lt;code&gt;LastEvaluatedKey&lt;/code&gt; returned from a parallel &lt;code&gt;Scan&lt;/code&gt; request must be used as &lt;code&gt;ExclusiveStartKey&lt;/code&gt; with the same segment ID in a subsequent &lt;code&gt;Scan&lt;/code&gt; operation.&lt;/p&gt; &lt;p&gt;The value for &lt;code&gt;Segment&lt;/code&gt; must be greater than or equal to 0, and less than the value provided for &lt;code&gt;TotalSegments&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;If you provide &lt;code&gt;Segment&lt;/code&gt;, you must also provide &lt;code&gt;TotalSegments&lt;/code&gt;.&lt;/p&gt;
   * minimum: 0
   * maximum: 999999
   * @return segment
   */
  @javax.annotation.Nullable
  public Integer getSegment() {
    return segment;
  }

  public void setSegment(@javax.annotation.Nullable Integer segment) {
    this.segment = segment;
  }


  public ScanInput projectionExpression(@javax.annotation.Nullable String projectionExpression) {
    this.projectionExpression = projectionExpression;
    return this;
  }

  /**
   * &lt;p&gt;A string that identifies one or more attributes to retrieve from the specified table or index. These attributes can include scalars, sets, or elements of a JSON document. The attributes in the expression must be separated by commas.&lt;/p&gt; &lt;p&gt;If no attribute names are specified, then all attributes will be returned. If any of the requested attributes are not found, they will not appear in the result.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html\&quot;&gt;Specifying Item Attributes&lt;/a&gt; in the &lt;i&gt;Amazon DynamoDB Developer Guide&lt;/i&gt;.&lt;/p&gt;
   * @return projectionExpression
   */
  @javax.annotation.Nullable
  public String getProjectionExpression() {
    return projectionExpression;
  }

  public void setProjectionExpression(@javax.annotation.Nullable String projectionExpression) {
    this.projectionExpression = projectionExpression;
  }


  public ScanInput filterExpression(@javax.annotation.Nullable String filterExpression) {
    this.filterExpression = filterExpression;
    return this;
  }

  /**
   * &lt;p&gt;A string that contains conditions that DynamoDB applies after the &lt;code&gt;Scan&lt;/code&gt; operation, but before the data is returned to you. Items that do not satisfy the &lt;code&gt;FilterExpression&lt;/code&gt; criteria are not returned.&lt;/p&gt; &lt;note&gt; &lt;p&gt;A &lt;code&gt;FilterExpression&lt;/code&gt; is applied after the items have already been read; the process of filtering does not consume any additional read capacity units.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html#Query.FilterExpression\&quot;&gt;Filter Expressions&lt;/a&gt; in the &lt;i&gt;Amazon DynamoDB Developer Guide&lt;/i&gt;.&lt;/p&gt;
   * @return filterExpression
   */
  @javax.annotation.Nullable
  public String getFilterExpression() {
    return filterExpression;
  }

  public void setFilterExpression(@javax.annotation.Nullable String filterExpression) {
    this.filterExpression = filterExpression;
  }


  public ScanInput expressionAttributeNames(@javax.annotation.Nullable Map<String, String> expressionAttributeNames) {
    this.expressionAttributeNames = expressionAttributeNames;
    return this;
  }

  public ScanInput putExpressionAttributeNamesItem(String key, String expressionAttributeNamesItem) {
    if (this.expressionAttributeNames == null) {
      this.expressionAttributeNames = new HashMap<>();
    }
    this.expressionAttributeNames.put(key, expressionAttributeNamesItem);
    return this;
  }

  /**
   * &lt;p&gt;One or more substitution tokens for attribute names in an expression. The following are some use cases for using &lt;code&gt;ExpressionAttributeNames&lt;/code&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;To access an attribute whose name conflicts with a DynamoDB reserved word.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;To create a placeholder for repeating occurrences of an attribute name in an expression.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;To prevent special characters in an attribute name from being misinterpreted in an expression.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Use the &lt;b&gt;#&lt;/b&gt; character in an expression to dereference an attribute name. For example, consider the following attribute name:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Percentile&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html\&quot;&gt;Reserved Words&lt;/a&gt; in the &lt;i&gt;Amazon DynamoDB Developer Guide&lt;/i&gt;). To work around this, you could specify the following for &lt;code&gt;ExpressionAttributeNames&lt;/code&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;{\&quot;#P\&quot;:\&quot;Percentile\&quot;}&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;You could then use this substitution in an expression, as in this example:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;#P &#x3D; :val&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;Tokens that begin with the &lt;b&gt;:&lt;/b&gt; character are &lt;i&gt;expression attribute values&lt;/i&gt;, which are placeholders for the actual value at runtime.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;For more information on expression attribute names, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html\&quot;&gt;Specifying Item Attributes&lt;/a&gt; in the &lt;i&gt;Amazon DynamoDB Developer Guide&lt;/i&gt;.&lt;/p&gt;
   * @return expressionAttributeNames
   */
  @javax.annotation.Nullable
  public Map<String, String> getExpressionAttributeNames() {
    return expressionAttributeNames;
  }

  public void setExpressionAttributeNames(@javax.annotation.Nullable Map<String, String> expressionAttributeNames) {
    this.expressionAttributeNames = expressionAttributeNames;
  }


  public ScanInput expressionAttributeValues(@javax.annotation.Nullable Map<String, AttributeValue> expressionAttributeValues) {
    this.expressionAttributeValues = expressionAttributeValues;
    return this;
  }

  public ScanInput putExpressionAttributeValuesItem(String key, AttributeValue expressionAttributeValuesItem) {
    if (this.expressionAttributeValues == null) {
      this.expressionAttributeValues = new HashMap<>();
    }
    this.expressionAttributeValues.put(key, expressionAttributeValuesItem);
    return this;
  }

  /**
   * &lt;p&gt;One or more values that can be substituted in an expression.&lt;/p&gt; &lt;p&gt;Use the &lt;b&gt;:&lt;/b&gt; (colon) character in an expression to dereference an attribute value. For example, suppose that you wanted to check whether the value of the &lt;code&gt;ProductStatus&lt;/code&gt; attribute was one of the following: &lt;/p&gt; &lt;p&gt; &lt;code&gt;Available | Backordered | Discontinued&lt;/code&gt; &lt;/p&gt; &lt;p&gt;You would first need to specify &lt;code&gt;ExpressionAttributeValues&lt;/code&gt; as follows:&lt;/p&gt; &lt;p&gt; &lt;code&gt;{ \&quot;:avail\&quot;:{\&quot;S\&quot;:\&quot;Available\&quot;}, \&quot;:back\&quot;:{\&quot;S\&quot;:\&quot;Backordered\&quot;}, \&quot;:disc\&quot;:{\&quot;S\&quot;:\&quot;Discontinued\&quot;} }&lt;/code&gt; &lt;/p&gt; &lt;p&gt;You could then use these values in an expression, such as this:&lt;/p&gt; &lt;p&gt; &lt;code&gt;ProductStatus IN (:avail, :back, :disc)&lt;/code&gt; &lt;/p&gt; &lt;p&gt;For more information on expression attribute values, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html\&quot;&gt;Condition Expressions&lt;/a&gt; in the &lt;i&gt;Amazon DynamoDB Developer Guide&lt;/i&gt;.&lt;/p&gt;
   * @return expressionAttributeValues
   */
  @javax.annotation.Nullable
  public Map<String, AttributeValue> getExpressionAttributeValues() {
    return expressionAttributeValues;
  }

  public void setExpressionAttributeValues(@javax.annotation.Nullable Map<String, AttributeValue> expressionAttributeValues) {
    this.expressionAttributeValues = expressionAttributeValues;
  }


  public ScanInput consistentRead(@javax.annotation.Nullable Boolean consistentRead) {
    this.consistentRead = consistentRead;
    return this;
  }

  /**
   * &lt;p&gt;A Boolean value that determines the read consistency model during the scan:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If &lt;code&gt;ConsistentRead&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;, then the data returned from &lt;code&gt;Scan&lt;/code&gt; might not contain the results from other recently completed write operations (&lt;code&gt;PutItem&lt;/code&gt;, &lt;code&gt;UpdateItem&lt;/code&gt;, or &lt;code&gt;DeleteItem&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If &lt;code&gt;ConsistentRead&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, then all of the write operations that completed before the &lt;code&gt;Scan&lt;/code&gt; began are guaranteed to be contained in the &lt;code&gt;Scan&lt;/code&gt; response.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The default setting for &lt;code&gt;ConsistentRead&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;ConsistentRead&lt;/code&gt; parameter is not supported on global secondary indexes. If you scan a global secondary index with &lt;code&gt;ConsistentRead&lt;/code&gt; set to true, you will receive a &lt;code&gt;ValidationException&lt;/code&gt;.&lt;/p&gt;
   * @return consistentRead
   */
  @javax.annotation.Nullable
  public Boolean getConsistentRead() {
    return consistentRead;
  }

  public void setConsistentRead(@javax.annotation.Nullable Boolean consistentRead) {
    this.consistentRead = consistentRead;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScanInput scanInput = (ScanInput) o;
    return Objects.equals(this.tableName, scanInput.tableName) &&
        Objects.equals(this.indexName, scanInput.indexName) &&
        Objects.equals(this.attributesToGet, scanInput.attributesToGet) &&
        Objects.equals(this.limit, scanInput.limit) &&
        Objects.equals(this.select, scanInput.select) &&
        Objects.equals(this.scanFilter, scanInput.scanFilter) &&
        Objects.equals(this.conditionalOperator, scanInput.conditionalOperator) &&
        Objects.equals(this.exclusiveStartKey, scanInput.exclusiveStartKey) &&
        Objects.equals(this.returnConsumedCapacity, scanInput.returnConsumedCapacity) &&
        Objects.equals(this.totalSegments, scanInput.totalSegments) &&
        Objects.equals(this.segment, scanInput.segment) &&
        Objects.equals(this.projectionExpression, scanInput.projectionExpression) &&
        Objects.equals(this.filterExpression, scanInput.filterExpression) &&
        Objects.equals(this.expressionAttributeNames, scanInput.expressionAttributeNames) &&
        Objects.equals(this.expressionAttributeValues, scanInput.expressionAttributeValues) &&
        Objects.equals(this.consistentRead, scanInput.consistentRead);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tableName, indexName, attributesToGet, limit, select, scanFilter, conditionalOperator, exclusiveStartKey, returnConsumedCapacity, totalSegments, segment, projectionExpression, filterExpression, expressionAttributeNames, expressionAttributeValues, consistentRead);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScanInput {\n");
    sb.append("    tableName: ").append(toIndentedString(tableName)).append("\n");
    sb.append("    indexName: ").append(toIndentedString(indexName)).append("\n");
    sb.append("    attributesToGet: ").append(toIndentedString(attributesToGet)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    select: ").append(toIndentedString(select)).append("\n");
    sb.append("    scanFilter: ").append(toIndentedString(scanFilter)).append("\n");
    sb.append("    conditionalOperator: ").append(toIndentedString(conditionalOperator)).append("\n");
    sb.append("    exclusiveStartKey: ").append(toIndentedString(exclusiveStartKey)).append("\n");
    sb.append("    returnConsumedCapacity: ").append(toIndentedString(returnConsumedCapacity)).append("\n");
    sb.append("    totalSegments: ").append(toIndentedString(totalSegments)).append("\n");
    sb.append("    segment: ").append(toIndentedString(segment)).append("\n");
    sb.append("    projectionExpression: ").append(toIndentedString(projectionExpression)).append("\n");
    sb.append("    filterExpression: ").append(toIndentedString(filterExpression)).append("\n");
    sb.append("    expressionAttributeNames: ").append(toIndentedString(expressionAttributeNames)).append("\n");
    sb.append("    expressionAttributeValues: ").append(toIndentedString(expressionAttributeValues)).append("\n");
    sb.append("    consistentRead: ").append(toIndentedString(consistentRead)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("TableName", "IndexName", "AttributesToGet", "Limit", "Select", "ScanFilter", "ConditionalOperator", "ExclusiveStartKey", "ReturnConsumedCapacity", "TotalSegments", "Segment", "ProjectionExpression", "FilterExpression", "ExpressionAttributeNames", "ExpressionAttributeValues", "ConsistentRead"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("TableName"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ScanInput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ScanInput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ScanInput is not found in the empty JSON string", ScanInput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ScanInput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ScanInput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ScanInput.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("TableName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TableName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TableName").toString()));
      }
      if ((jsonObj.get("IndexName") != null && !jsonObj.get("IndexName").isJsonNull()) && !jsonObj.get("IndexName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `IndexName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("IndexName").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("AttributesToGet") != null && !jsonObj.get("AttributesToGet").isJsonNull() && !jsonObj.get("AttributesToGet").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `AttributesToGet` to be an array in the JSON string but got `%s`", jsonObj.get("AttributesToGet").toString()));
      }
      // validate the optional field `Select`
      if (jsonObj.get("Select") != null && !jsonObj.get("Select").isJsonNull()) {
        Select.validateJsonElement(jsonObj.get("Select"));
      }
      // validate the optional field `ConditionalOperator`
      if (jsonObj.get("ConditionalOperator") != null && !jsonObj.get("ConditionalOperator").isJsonNull()) {
        ConditionalOperator.validateJsonElement(jsonObj.get("ConditionalOperator"));
      }
      // validate the optional field `ReturnConsumedCapacity`
      if (jsonObj.get("ReturnConsumedCapacity") != null && !jsonObj.get("ReturnConsumedCapacity").isJsonNull()) {
        ReturnConsumedCapacity.validateJsonElement(jsonObj.get("ReturnConsumedCapacity"));
      }
      if ((jsonObj.get("ProjectionExpression") != null && !jsonObj.get("ProjectionExpression").isJsonNull()) && !jsonObj.get("ProjectionExpression").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ProjectionExpression` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ProjectionExpression").toString()));
      }
      if ((jsonObj.get("FilterExpression") != null && !jsonObj.get("FilterExpression").isJsonNull()) && !jsonObj.get("FilterExpression").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FilterExpression` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FilterExpression").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ScanInput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ScanInput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ScanInput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ScanInput.class));

       return (TypeAdapter<T>) new TypeAdapter<ScanInput>() {
           @Override
           public void write(JsonWriter out, ScanInput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ScanInput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ScanInput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ScanInput
   * @throws IOException if the JSON string is invalid with respect to ScanInput
   */
  public static ScanInput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ScanInput.class);
  }

  /**
   * Convert an instance of ScanInput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

