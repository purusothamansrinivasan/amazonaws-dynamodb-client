/*
 * Amazon DynamoDB
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database, so that you don't have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.</p> <p>With DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic. You can scale up or scale down your tables' throughput capacity without downtime or performance degradation, and use the Amazon Web Services Management Console to monitor resource utilization and performance metrics.</p> <p>DynamoDB automatically spreads the data and traffic for your tables over a sufficient number of servers to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and automatically replicated across multiple Availability Zones in an Amazon Web Services Region, providing built-in high availability and data durability.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains details of a table archival operation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T14:20:21.724079+05:30[Asia/Kolkata]", comments = "Generator version: 7.15.0")
public class ArchivalSummary {
  public static final String SERIALIZED_NAME_ARCHIVAL_DATE_TIME = "ArchivalDateTime";
  @SerializedName(SERIALIZED_NAME_ARCHIVAL_DATE_TIME)
  @javax.annotation.Nullable
  private OffsetDateTime archivalDateTime;

  public static final String SERIALIZED_NAME_ARCHIVAL_REASON = "ArchivalReason";
  @SerializedName(SERIALIZED_NAME_ARCHIVAL_REASON)
  @javax.annotation.Nullable
  private String archivalReason;

  public static final String SERIALIZED_NAME_ARCHIVAL_BACKUP_ARN = "ArchivalBackupArn";
  @SerializedName(SERIALIZED_NAME_ARCHIVAL_BACKUP_ARN)
  @javax.annotation.Nullable
  private String archivalBackupArn;

  public ArchivalSummary() {
  }

  public ArchivalSummary archivalDateTime(@javax.annotation.Nullable OffsetDateTime archivalDateTime) {
    this.archivalDateTime = archivalDateTime;
    return this;
  }

  /**
   * The date and time when table archival was initiated by DynamoDB, in UNIX epoch time format.
   * @return archivalDateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getArchivalDateTime() {
    return archivalDateTime;
  }

  public void setArchivalDateTime(@javax.annotation.Nullable OffsetDateTime archivalDateTime) {
    this.archivalDateTime = archivalDateTime;
  }


  public ArchivalSummary archivalReason(@javax.annotation.Nullable String archivalReason) {
    this.archivalReason = archivalReason;
    return this;
  }

  /**
   * &lt;p&gt;The reason DynamoDB archived the table. Currently, the only possible value is:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;INACCESSIBLE_ENCRYPTION_CREDENTIALS&lt;/code&gt; - The table was archived due to the table&#39;s KMS key being inaccessible for more than seven days. An On-Demand backup was created at the archival time.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
   * @return archivalReason
   */
  @javax.annotation.Nullable
  public String getArchivalReason() {
    return archivalReason;
  }

  public void setArchivalReason(@javax.annotation.Nullable String archivalReason) {
    this.archivalReason = archivalReason;
  }


  public ArchivalSummary archivalBackupArn(@javax.annotation.Nullable String archivalBackupArn) {
    this.archivalBackupArn = archivalBackupArn;
    return this;
  }

  /**
   * The Amazon Resource Name (ARN) of the backup the table was archived to, when applicable in the archival reason. If you wish to restore this backup to the same table name, you will need to delete the original table.
   * @return archivalBackupArn
   */
  @javax.annotation.Nullable
  public String getArchivalBackupArn() {
    return archivalBackupArn;
  }

  public void setArchivalBackupArn(@javax.annotation.Nullable String archivalBackupArn) {
    this.archivalBackupArn = archivalBackupArn;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ArchivalSummary archivalSummary = (ArchivalSummary) o;
    return Objects.equals(this.archivalDateTime, archivalSummary.archivalDateTime) &&
        Objects.equals(this.archivalReason, archivalSummary.archivalReason) &&
        Objects.equals(this.archivalBackupArn, archivalSummary.archivalBackupArn);
  }

  @Override
  public int hashCode() {
    return Objects.hash(archivalDateTime, archivalReason, archivalBackupArn);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ArchivalSummary {\n");
    sb.append("    archivalDateTime: ").append(toIndentedString(archivalDateTime)).append("\n");
    sb.append("    archivalReason: ").append(toIndentedString(archivalReason)).append("\n");
    sb.append("    archivalBackupArn: ").append(toIndentedString(archivalBackupArn)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("ArchivalDateTime", "ArchivalReason", "ArchivalBackupArn"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ArchivalSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ArchivalSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ArchivalSummary is not found in the empty JSON string", ArchivalSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ArchivalSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ArchivalSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ArchivalReason") != null && !jsonObj.get("ArchivalReason").isJsonNull()) && !jsonObj.get("ArchivalReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ArchivalReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ArchivalReason").toString()));
      }
      if ((jsonObj.get("ArchivalBackupArn") != null && !jsonObj.get("ArchivalBackupArn").isJsonNull()) && !jsonObj.get("ArchivalBackupArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ArchivalBackupArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ArchivalBackupArn").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ArchivalSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ArchivalSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ArchivalSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ArchivalSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<ArchivalSummary>() {
           @Override
           public void write(JsonWriter out, ArchivalSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ArchivalSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ArchivalSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ArchivalSummary
   * @throws IOException if the JSON string is invalid with respect to ArchivalSummary
   */
  public static ArchivalSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ArchivalSummary.class);
  }

  /**
   * Convert an instance of ArchivalSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

