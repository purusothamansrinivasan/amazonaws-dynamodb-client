/*
 * Amazon DynamoDB
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database, so that you don't have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.</p> <p>With DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic. You can scale up or scale down your tables' throughput capacity without downtime or performance degradation, and use the Amazon Web Services Management Console to monitor resource utilization and performance metrics.</p> <p>DynamoDB automatically spreads the data and traffic for your tables over a sufficient number of servers to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and automatically replicated across multiple Availability Zones in an Amazon Web Services Region, providing built-in high availability and data durability.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ProjectionType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents attributes that are copied (projected) from the table into an index. These are in addition to the primary key attributes and index key attributes, which are automatically projected.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T14:20:21.724079+05:30[Asia/Kolkata]", comments = "Generator version: 7.15.0")
public class Projection {
  public static final String SERIALIZED_NAME_PROJECTION_TYPE = "ProjectionType";
  @SerializedName(SERIALIZED_NAME_PROJECTION_TYPE)
  @javax.annotation.Nullable
  private ProjectionType projectionType;

  public static final String SERIALIZED_NAME_NON_KEY_ATTRIBUTES = "NonKeyAttributes";
  @SerializedName(SERIALIZED_NAME_NON_KEY_ATTRIBUTES)
  @javax.annotation.Nullable
  private List<String> nonKeyAttributes;

  public Projection() {
  }

  public Projection projectionType(@javax.annotation.Nullable ProjectionType projectionType) {
    this.projectionType = projectionType;
    return this;
  }

  /**
   * &lt;p&gt;The set of attributes that are projected into the index:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;KEYS_ONLY&lt;/code&gt; - Only the index and primary keys are projected into the index.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;INCLUDE&lt;/code&gt; - In addition to the attributes described in &lt;code&gt;KEYS_ONLY&lt;/code&gt;, the secondary index will include other non-key attributes that you specify.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ALL&lt;/code&gt; - All of the table attributes are projected into the index.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
   * @return projectionType
   */
  @javax.annotation.Nullable
  public ProjectionType getProjectionType() {
    return projectionType;
  }

  public void setProjectionType(@javax.annotation.Nullable ProjectionType projectionType) {
    this.projectionType = projectionType;
  }


  public Projection nonKeyAttributes(@javax.annotation.Nullable List<String> nonKeyAttributes) {
    this.nonKeyAttributes = nonKeyAttributes;
    return this;
  }

  public Projection addNonKeyAttributesItem(String nonKeyAttributesItem) {
    if (this.nonKeyAttributes == null) {
      this.nonKeyAttributes = new ArrayList<>();
    }
    this.nonKeyAttributes.add(nonKeyAttributesItem);
    return this;
  }

  /**
   * &lt;p&gt;Represents the non-key attribute names which will be projected into the index.&lt;/p&gt; &lt;p&gt;For local secondary indexes, the total count of &lt;code&gt;NonKeyAttributes&lt;/code&gt; summed across all of the local secondary indexes, must not exceed 100. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.&lt;/p&gt;
   * @return nonKeyAttributes
   */
  @javax.annotation.Nullable
  public List<String> getNonKeyAttributes() {
    return nonKeyAttributes;
  }

  public void setNonKeyAttributes(@javax.annotation.Nullable List<String> nonKeyAttributes) {
    this.nonKeyAttributes = nonKeyAttributes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Projection projection = (Projection) o;
    return Objects.equals(this.projectionType, projection.projectionType) &&
        Objects.equals(this.nonKeyAttributes, projection.nonKeyAttributes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(projectionType, nonKeyAttributes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Projection {\n");
    sb.append("    projectionType: ").append(toIndentedString(projectionType)).append("\n");
    sb.append("    nonKeyAttributes: ").append(toIndentedString(nonKeyAttributes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("ProjectionType", "NonKeyAttributes"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Projection
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Projection.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Projection is not found in the empty JSON string", Projection.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Projection.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Projection` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ProjectionType`
      if (jsonObj.get("ProjectionType") != null && !jsonObj.get("ProjectionType").isJsonNull()) {
        ProjectionType.validateJsonElement(jsonObj.get("ProjectionType"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("NonKeyAttributes") != null && !jsonObj.get("NonKeyAttributes").isJsonNull() && !jsonObj.get("NonKeyAttributes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `NonKeyAttributes` to be an array in the JSON string but got `%s`", jsonObj.get("NonKeyAttributes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Projection.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Projection' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Projection> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Projection.class));

       return (TypeAdapter<T>) new TypeAdapter<Projection>() {
           @Override
           public void write(JsonWriter out, Projection value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Projection read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Projection given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Projection
   * @throws IOException if the JSON string is invalid with respect to Projection
   */
  public static Projection fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Projection.class);
  }

  /**
   * Convert an instance of Projection to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

