/*
 * Amazon DynamoDB
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database, so that you don't have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.</p> <p>With DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic. You can scale up or scale down your tables' throughput capacity without downtime or performance degradation, and use the Amazon Web Services Management Console to monitor resource utilization and performance metrics.</p> <p>DynamoDB automatically spreads the data and traffic for your tables over a sufficient number of servers to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and automatically replicated across multiple Availability Zones in an Amazon Web Services Region, providing built-in high availability and data durability.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains details for the restore.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T14:20:21.724079+05:30[Asia/Kolkata]", comments = "Generator version: 7.15.0")
public class RestoreSummary {
  public static final String SERIALIZED_NAME_SOURCE_BACKUP_ARN = "SourceBackupArn";
  @SerializedName(SERIALIZED_NAME_SOURCE_BACKUP_ARN)
  @javax.annotation.Nullable
  private String sourceBackupArn;

  public static final String SERIALIZED_NAME_SOURCE_TABLE_ARN = "SourceTableArn";
  @SerializedName(SERIALIZED_NAME_SOURCE_TABLE_ARN)
  @javax.annotation.Nullable
  private String sourceTableArn;

  public static final String SERIALIZED_NAME_RESTORE_DATE_TIME = "RestoreDateTime";
  @SerializedName(SERIALIZED_NAME_RESTORE_DATE_TIME)
  @javax.annotation.Nonnull
  private OffsetDateTime restoreDateTime;

  public static final String SERIALIZED_NAME_RESTORE_IN_PROGRESS = "RestoreInProgress";
  @SerializedName(SERIALIZED_NAME_RESTORE_IN_PROGRESS)
  @javax.annotation.Nonnull
  private Boolean restoreInProgress;

  public RestoreSummary() {
  }

  public RestoreSummary sourceBackupArn(@javax.annotation.Nullable String sourceBackupArn) {
    this.sourceBackupArn = sourceBackupArn;
    return this;
  }

  /**
   * The Amazon Resource Name (ARN) of the backup from which the table was restored.
   * @return sourceBackupArn
   */
  @javax.annotation.Nullable
  public String getSourceBackupArn() {
    return sourceBackupArn;
  }

  public void setSourceBackupArn(@javax.annotation.Nullable String sourceBackupArn) {
    this.sourceBackupArn = sourceBackupArn;
  }


  public RestoreSummary sourceTableArn(@javax.annotation.Nullable String sourceTableArn) {
    this.sourceTableArn = sourceTableArn;
    return this;
  }

  /**
   * The ARN of the source table of the backup that is being restored.
   * @return sourceTableArn
   */
  @javax.annotation.Nullable
  public String getSourceTableArn() {
    return sourceTableArn;
  }

  public void setSourceTableArn(@javax.annotation.Nullable String sourceTableArn) {
    this.sourceTableArn = sourceTableArn;
  }


  public RestoreSummary restoreDateTime(@javax.annotation.Nonnull OffsetDateTime restoreDateTime) {
    this.restoreDateTime = restoreDateTime;
    return this;
  }

  /**
   * Point in time or source backup time.
   * @return restoreDateTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getRestoreDateTime() {
    return restoreDateTime;
  }

  public void setRestoreDateTime(@javax.annotation.Nonnull OffsetDateTime restoreDateTime) {
    this.restoreDateTime = restoreDateTime;
  }


  public RestoreSummary restoreInProgress(@javax.annotation.Nonnull Boolean restoreInProgress) {
    this.restoreInProgress = restoreInProgress;
    return this;
  }

  /**
   * Indicates if a restore is in progress or not.
   * @return restoreInProgress
   */
  @javax.annotation.Nonnull
  public Boolean getRestoreInProgress() {
    return restoreInProgress;
  }

  public void setRestoreInProgress(@javax.annotation.Nonnull Boolean restoreInProgress) {
    this.restoreInProgress = restoreInProgress;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RestoreSummary restoreSummary = (RestoreSummary) o;
    return Objects.equals(this.sourceBackupArn, restoreSummary.sourceBackupArn) &&
        Objects.equals(this.sourceTableArn, restoreSummary.sourceTableArn) &&
        Objects.equals(this.restoreDateTime, restoreSummary.restoreDateTime) &&
        Objects.equals(this.restoreInProgress, restoreSummary.restoreInProgress);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sourceBackupArn, sourceTableArn, restoreDateTime, restoreInProgress);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RestoreSummary {\n");
    sb.append("    sourceBackupArn: ").append(toIndentedString(sourceBackupArn)).append("\n");
    sb.append("    sourceTableArn: ").append(toIndentedString(sourceTableArn)).append("\n");
    sb.append("    restoreDateTime: ").append(toIndentedString(restoreDateTime)).append("\n");
    sb.append("    restoreInProgress: ").append(toIndentedString(restoreInProgress)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("SourceBackupArn", "SourceTableArn", "RestoreDateTime", "RestoreInProgress"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("RestoreDateTime", "RestoreInProgress"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RestoreSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RestoreSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RestoreSummary is not found in the empty JSON string", RestoreSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RestoreSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RestoreSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RestoreSummary.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("SourceBackupArn") != null && !jsonObj.get("SourceBackupArn").isJsonNull()) && !jsonObj.get("SourceBackupArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SourceBackupArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SourceBackupArn").toString()));
      }
      if ((jsonObj.get("SourceTableArn") != null && !jsonObj.get("SourceTableArn").isJsonNull()) && !jsonObj.get("SourceTableArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SourceTableArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SourceTableArn").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RestoreSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RestoreSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RestoreSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RestoreSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<RestoreSummary>() {
           @Override
           public void write(JsonWriter out, RestoreSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RestoreSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RestoreSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RestoreSummary
   * @throws IOException if the JSON string is invalid with respect to RestoreSummary
   */
  public static RestoreSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RestoreSummary.class);
  }

  /**
   * Convert an instance of RestoreSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

