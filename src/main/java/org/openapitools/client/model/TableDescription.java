/*
 * Amazon DynamoDB
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database, so that you don't have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.</p> <p>With DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic. You can scale up or scale down your tables' throughput capacity without downtime or performance degradation, and use the Amazon Web Services Management Console to monitor resource utilization and performance metrics.</p> <p>DynamoDB automatically spreads the data and traffic for your tables over a sufficient number of servers to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and automatically replicated across multiple Availability Zones in an Amazon Web Services Region, providing built-in high availability and data durability.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ArchivalSummary;
import org.openapitools.client.model.AttributeDefinition;
import org.openapitools.client.model.BillingModeSummary;
import org.openapitools.client.model.GlobalSecondaryIndexDescription;
import org.openapitools.client.model.KeySchemaElement;
import org.openapitools.client.model.LocalSecondaryIndexDescription;
import org.openapitools.client.model.ProvisionedThroughputDescription;
import org.openapitools.client.model.ReplicaDescription;
import org.openapitools.client.model.RestoreSummary;
import org.openapitools.client.model.SSEDescription;
import org.openapitools.client.model.StreamSpecification;
import org.openapitools.client.model.TableClassSummary;
import org.openapitools.client.model.TableStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents the properties of a table.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T14:20:21.724079+05:30[Asia/Kolkata]", comments = "Generator version: 7.15.0")
public class TableDescription {
  public static final String SERIALIZED_NAME_ATTRIBUTE_DEFINITIONS = "AttributeDefinitions";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTE_DEFINITIONS)
  @javax.annotation.Nullable
  private List<AttributeDefinition> attributeDefinitions;

  public static final String SERIALIZED_NAME_TABLE_NAME = "TableName";
  @SerializedName(SERIALIZED_NAME_TABLE_NAME)
  @javax.annotation.Nullable
  private String tableName;

  public static final String SERIALIZED_NAME_KEY_SCHEMA = "KeySchema";
  @SerializedName(SERIALIZED_NAME_KEY_SCHEMA)
  @javax.annotation.Nullable
  private List<KeySchemaElement> keySchema;

  public static final String SERIALIZED_NAME_TABLE_STATUS = "TableStatus";
  @SerializedName(SERIALIZED_NAME_TABLE_STATUS)
  @javax.annotation.Nullable
  private TableStatus tableStatus;

  public static final String SERIALIZED_NAME_CREATION_DATE_TIME = "CreationDateTime";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE_TIME)
  @javax.annotation.Nullable
  private OffsetDateTime creationDateTime;

  public static final String SERIALIZED_NAME_PROVISIONED_THROUGHPUT = "ProvisionedThroughput";
  @SerializedName(SERIALIZED_NAME_PROVISIONED_THROUGHPUT)
  @javax.annotation.Nullable
  private ProvisionedThroughputDescription provisionedThroughput;

  public static final String SERIALIZED_NAME_TABLE_SIZE_BYTES = "TableSizeBytes";
  @SerializedName(SERIALIZED_NAME_TABLE_SIZE_BYTES)
  @javax.annotation.Nullable
  private Integer tableSizeBytes;

  public static final String SERIALIZED_NAME_ITEM_COUNT = "ItemCount";
  @SerializedName(SERIALIZED_NAME_ITEM_COUNT)
  @javax.annotation.Nullable
  private Integer itemCount;

  public static final String SERIALIZED_NAME_TABLE_ARN = "TableArn";
  @SerializedName(SERIALIZED_NAME_TABLE_ARN)
  @javax.annotation.Nullable
  private String tableArn;

  public static final String SERIALIZED_NAME_TABLE_ID = "TableId";
  @SerializedName(SERIALIZED_NAME_TABLE_ID)
  @javax.annotation.Nullable
  private String tableId;

  public static final String SERIALIZED_NAME_BILLING_MODE_SUMMARY = "BillingModeSummary";
  @SerializedName(SERIALIZED_NAME_BILLING_MODE_SUMMARY)
  @javax.annotation.Nullable
  private BillingModeSummary billingModeSummary;

  public static final String SERIALIZED_NAME_LOCAL_SECONDARY_INDEXES = "LocalSecondaryIndexes";
  @SerializedName(SERIALIZED_NAME_LOCAL_SECONDARY_INDEXES)
  @javax.annotation.Nullable
  private List<LocalSecondaryIndexDescription> localSecondaryIndexes;

  public static final String SERIALIZED_NAME_GLOBAL_SECONDARY_INDEXES = "GlobalSecondaryIndexes";
  @SerializedName(SERIALIZED_NAME_GLOBAL_SECONDARY_INDEXES)
  @javax.annotation.Nullable
  private List<GlobalSecondaryIndexDescription> globalSecondaryIndexes;

  public static final String SERIALIZED_NAME_STREAM_SPECIFICATION = "StreamSpecification";
  @SerializedName(SERIALIZED_NAME_STREAM_SPECIFICATION)
  @javax.annotation.Nullable
  private StreamSpecification streamSpecification;

  public static final String SERIALIZED_NAME_LATEST_STREAM_LABEL = "LatestStreamLabel";
  @SerializedName(SERIALIZED_NAME_LATEST_STREAM_LABEL)
  @javax.annotation.Nullable
  private String latestStreamLabel;

  public static final String SERIALIZED_NAME_LATEST_STREAM_ARN = "LatestStreamArn";
  @SerializedName(SERIALIZED_NAME_LATEST_STREAM_ARN)
  @javax.annotation.Nullable
  private String latestStreamArn;

  public static final String SERIALIZED_NAME_GLOBAL_TABLE_VERSION = "GlobalTableVersion";
  @SerializedName(SERIALIZED_NAME_GLOBAL_TABLE_VERSION)
  @javax.annotation.Nullable
  private String globalTableVersion;

  public static final String SERIALIZED_NAME_REPLICAS = "Replicas";
  @SerializedName(SERIALIZED_NAME_REPLICAS)
  @javax.annotation.Nullable
  private List<ReplicaDescription> replicas;

  public static final String SERIALIZED_NAME_RESTORE_SUMMARY = "RestoreSummary";
  @SerializedName(SERIALIZED_NAME_RESTORE_SUMMARY)
  @javax.annotation.Nullable
  private RestoreSummary restoreSummary;

  public static final String SERIALIZED_NAME_SS_E_DESCRIPTION = "SSEDescription";
  @SerializedName(SERIALIZED_NAME_SS_E_DESCRIPTION)
  @javax.annotation.Nullable
  private SSEDescription ssEDescription;

  public static final String SERIALIZED_NAME_ARCHIVAL_SUMMARY = "ArchivalSummary";
  @SerializedName(SERIALIZED_NAME_ARCHIVAL_SUMMARY)
  @javax.annotation.Nullable
  private ArchivalSummary archivalSummary;

  public static final String SERIALIZED_NAME_TABLE_CLASS_SUMMARY = "TableClassSummary";
  @SerializedName(SERIALIZED_NAME_TABLE_CLASS_SUMMARY)
  @javax.annotation.Nullable
  private TableClassSummary tableClassSummary;

  public static final String SERIALIZED_NAME_DELETION_PROTECTION_ENABLED = "DeletionProtectionEnabled";
  @SerializedName(SERIALIZED_NAME_DELETION_PROTECTION_ENABLED)
  @javax.annotation.Nullable
  private Boolean deletionProtectionEnabled;

  public TableDescription() {
  }

  public TableDescription attributeDefinitions(@javax.annotation.Nullable List<AttributeDefinition> attributeDefinitions) {
    this.attributeDefinitions = attributeDefinitions;
    return this;
  }

  public TableDescription addAttributeDefinitionsItem(AttributeDefinition attributeDefinitionsItem) {
    if (this.attributeDefinitions == null) {
      this.attributeDefinitions = new ArrayList<>();
    }
    this.attributeDefinitions.add(attributeDefinitionsItem);
    return this;
  }

  /**
   * &lt;p&gt;An array of &lt;code&gt;AttributeDefinition&lt;/code&gt; objects. Each of these objects describes one attribute in the table and index key schema.&lt;/p&gt; &lt;p&gt;Each &lt;code&gt;AttributeDefinition&lt;/code&gt; object in this array is composed of:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;AttributeName&lt;/code&gt; - The name of the attribute.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;AttributeType&lt;/code&gt; - The data type for the attribute.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
   * @return attributeDefinitions
   */
  @javax.annotation.Nullable
  public List<AttributeDefinition> getAttributeDefinitions() {
    return attributeDefinitions;
  }

  public void setAttributeDefinitions(@javax.annotation.Nullable List<AttributeDefinition> attributeDefinitions) {
    this.attributeDefinitions = attributeDefinitions;
  }


  public TableDescription tableName(@javax.annotation.Nullable String tableName) {
    this.tableName = tableName;
    return this;
  }

  /**
   * The name of the table.
   * @return tableName
   */
  @javax.annotation.Nullable
  public String getTableName() {
    return tableName;
  }

  public void setTableName(@javax.annotation.Nullable String tableName) {
    this.tableName = tableName;
  }


  public TableDescription keySchema(@javax.annotation.Nullable List<KeySchemaElement> keySchema) {
    this.keySchema = keySchema;
    return this;
  }

  public TableDescription addKeySchemaItem(KeySchemaElement keySchemaItem) {
    if (this.keySchema == null) {
      this.keySchema = new ArrayList<>();
    }
    this.keySchema.add(keySchemaItem);
    return this;
  }

  /**
   * &lt;p&gt;The primary key structure for the table. Each &lt;code&gt;KeySchemaElement&lt;/code&gt; consists of:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;AttributeName&lt;/code&gt; - The name of the attribute.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;KeyType&lt;/code&gt; - The role of the attribute:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;HASH&lt;/code&gt; - partition key&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;RANGE&lt;/code&gt; - sort key&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;The partition key of an item is also known as its &lt;i&gt;hash attribute&lt;/i&gt;. The term \&quot;hash attribute\&quot; derives from DynamoDB&#39;s usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.&lt;/p&gt; &lt;p&gt;The sort key of an item is also known as its &lt;i&gt;range attribute&lt;/i&gt;. The term \&quot;range attribute\&quot; derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.&lt;/p&gt; &lt;/note&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information about primary keys, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html#DataModelPrimaryKey\&quot;&gt;Primary Key&lt;/a&gt; in the &lt;i&gt;Amazon DynamoDB Developer Guide&lt;/i&gt;.&lt;/p&gt;
   * @return keySchema
   */
  @javax.annotation.Nullable
  public List<KeySchemaElement> getKeySchema() {
    return keySchema;
  }

  public void setKeySchema(@javax.annotation.Nullable List<KeySchemaElement> keySchema) {
    this.keySchema = keySchema;
  }


  public TableDescription tableStatus(@javax.annotation.Nullable TableStatus tableStatus) {
    this.tableStatus = tableStatus;
    return this;
  }

  /**
   * &lt;p&gt;The current state of the table:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;CREATING&lt;/code&gt; - The table is being created.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;UPDATING&lt;/code&gt; - The table/index configuration is being updated. The table/index remains available for data operations when &lt;code&gt;UPDATING&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DELETING&lt;/code&gt; - The table is being deleted.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ACTIVE&lt;/code&gt; - The table is ready for use.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;INACCESSIBLE_ENCRYPTION_CREDENTIALS&lt;/code&gt; - The KMS key used to encrypt the table in inaccessible. Table operations may fail due to failure to use the KMS key. DynamoDB will initiate the table archival process when a table&#39;s KMS key remains inaccessible for more than seven days. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ARCHIVING&lt;/code&gt; - The table is being archived. Operations are not allowed until archival is complete. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ARCHIVED&lt;/code&gt; - The table has been archived. See the ArchivalReason for more information. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
   * @return tableStatus
   */
  @javax.annotation.Nullable
  public TableStatus getTableStatus() {
    return tableStatus;
  }

  public void setTableStatus(@javax.annotation.Nullable TableStatus tableStatus) {
    this.tableStatus = tableStatus;
  }


  public TableDescription creationDateTime(@javax.annotation.Nullable OffsetDateTime creationDateTime) {
    this.creationDateTime = creationDateTime;
    return this;
  }

  /**
   * The date and time when the table was created, in &lt;a href&#x3D;\&quot;http://www.epochconverter.com/\&quot;&gt;UNIX epoch time&lt;/a&gt; format.
   * @return creationDateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationDateTime() {
    return creationDateTime;
  }

  public void setCreationDateTime(@javax.annotation.Nullable OffsetDateTime creationDateTime) {
    this.creationDateTime = creationDateTime;
  }


  public TableDescription provisionedThroughput(@javax.annotation.Nullable ProvisionedThroughputDescription provisionedThroughput) {
    this.provisionedThroughput = provisionedThroughput;
    return this;
  }

  /**
   * The provisioned throughput settings for the table, consisting of read and write capacity units, along with data about increases and decreases.
   * @return provisionedThroughput
   */
  @javax.annotation.Nullable
  public ProvisionedThroughputDescription getProvisionedThroughput() {
    return provisionedThroughput;
  }

  public void setProvisionedThroughput(@javax.annotation.Nullable ProvisionedThroughputDescription provisionedThroughput) {
    this.provisionedThroughput = provisionedThroughput;
  }


  public TableDescription tableSizeBytes(@javax.annotation.Nullable Integer tableSizeBytes) {
    this.tableSizeBytes = tableSizeBytes;
    return this;
  }

  /**
   * The total size of the specified table, in bytes. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.
   * @return tableSizeBytes
   */
  @javax.annotation.Nullable
  public Integer getTableSizeBytes() {
    return tableSizeBytes;
  }

  public void setTableSizeBytes(@javax.annotation.Nullable Integer tableSizeBytes) {
    this.tableSizeBytes = tableSizeBytes;
  }


  public TableDescription itemCount(@javax.annotation.Nullable Integer itemCount) {
    this.itemCount = itemCount;
    return this;
  }

  /**
   * The number of items in the specified table. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.
   * @return itemCount
   */
  @javax.annotation.Nullable
  public Integer getItemCount() {
    return itemCount;
  }

  public void setItemCount(@javax.annotation.Nullable Integer itemCount) {
    this.itemCount = itemCount;
  }


  public TableDescription tableArn(@javax.annotation.Nullable String tableArn) {
    this.tableArn = tableArn;
    return this;
  }

  /**
   * The Amazon Resource Name (ARN) that uniquely identifies the table.
   * @return tableArn
   */
  @javax.annotation.Nullable
  public String getTableArn() {
    return tableArn;
  }

  public void setTableArn(@javax.annotation.Nullable String tableArn) {
    this.tableArn = tableArn;
  }


  public TableDescription tableId(@javax.annotation.Nullable String tableId) {
    this.tableId = tableId;
    return this;
  }

  /**
   * Unique identifier for the table for which the backup was created. 
   * @return tableId
   */
  @javax.annotation.Nullable
  public String getTableId() {
    return tableId;
  }

  public void setTableId(@javax.annotation.Nullable String tableId) {
    this.tableId = tableId;
  }


  public TableDescription billingModeSummary(@javax.annotation.Nullable BillingModeSummary billingModeSummary) {
    this.billingModeSummary = billingModeSummary;
    return this;
  }

  /**
   * Contains the details for the read/write capacity mode.
   * @return billingModeSummary
   */
  @javax.annotation.Nullable
  public BillingModeSummary getBillingModeSummary() {
    return billingModeSummary;
  }

  public void setBillingModeSummary(@javax.annotation.Nullable BillingModeSummary billingModeSummary) {
    this.billingModeSummary = billingModeSummary;
  }


  public TableDescription localSecondaryIndexes(@javax.annotation.Nullable List<LocalSecondaryIndexDescription> localSecondaryIndexes) {
    this.localSecondaryIndexes = localSecondaryIndexes;
    return this;
  }

  public TableDescription addLocalSecondaryIndexesItem(LocalSecondaryIndexDescription localSecondaryIndexesItem) {
    if (this.localSecondaryIndexes == null) {
      this.localSecondaryIndexes = new ArrayList<>();
    }
    this.localSecondaryIndexes.add(localSecondaryIndexesItem);
    return this;
  }

  /**
   * &lt;p&gt;Represents one or more local secondary indexes on the table. Each index is scoped to a given partition key value. Tables with one or more local secondary indexes are subject to an item collection size limit, where the amount of data within a given item collection cannot exceed 10 GB. Each element is composed of:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;IndexName&lt;/code&gt; - The name of the local secondary index.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;KeySchema&lt;/code&gt; - Specifies the complete index key schema. The attribute names in the key schema must be between 1 and 255 characters (inclusive). The key schema must begin with the same partition key as the table.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Projection&lt;/code&gt; - Specifies attributes that are copied (projected) from the table into the index. These are in addition to the primary key attributes and index key attributes, which are automatically projected. Each attribute specification is composed of:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ProjectionType&lt;/code&gt; - One of the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;KEYS_ONLY&lt;/code&gt; - Only the index and primary keys are projected into the index.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;INCLUDE&lt;/code&gt; - Only the specified table attributes are projected into the index. The list of projected attributes is in &lt;code&gt;NonKeyAttributes&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ALL&lt;/code&gt; - All of the table attributes are projected into the index.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;NonKeyAttributes&lt;/code&gt; - A list of one or more non-key attribute names that are projected into the secondary index. The total count of attributes provided in &lt;code&gt;NonKeyAttributes&lt;/code&gt;, summed across all of the secondary indexes, must not exceed 100. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;IndexSizeBytes&lt;/code&gt; - Represents the total size of the index, in bytes. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ItemCount&lt;/code&gt; - Represents the number of items in the index. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If the table is in the &lt;code&gt;DELETING&lt;/code&gt; state, no information about indexes will be returned.&lt;/p&gt;
   * @return localSecondaryIndexes
   */
  @javax.annotation.Nullable
  public List<LocalSecondaryIndexDescription> getLocalSecondaryIndexes() {
    return localSecondaryIndexes;
  }

  public void setLocalSecondaryIndexes(@javax.annotation.Nullable List<LocalSecondaryIndexDescription> localSecondaryIndexes) {
    this.localSecondaryIndexes = localSecondaryIndexes;
  }


  public TableDescription globalSecondaryIndexes(@javax.annotation.Nullable List<GlobalSecondaryIndexDescription> globalSecondaryIndexes) {
    this.globalSecondaryIndexes = globalSecondaryIndexes;
    return this;
  }

  public TableDescription addGlobalSecondaryIndexesItem(GlobalSecondaryIndexDescription globalSecondaryIndexesItem) {
    if (this.globalSecondaryIndexes == null) {
      this.globalSecondaryIndexes = new ArrayList<>();
    }
    this.globalSecondaryIndexes.add(globalSecondaryIndexesItem);
    return this;
  }

  /**
   * &lt;p&gt;The global secondary indexes, if any, on the table. Each index is scoped to a given partition key value. Each element is composed of:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Backfilling&lt;/code&gt; - If true, then the index is currently in the backfilling phase. Backfilling occurs only when a new global secondary index is added to the table. It is the process by which DynamoDB populates the new index with data from the table. (This attribute does not appear for indexes that were created during a &lt;code&gt;CreateTable&lt;/code&gt; operation.) &lt;/p&gt; &lt;p&gt; You can delete an index that is being created during the &lt;code&gt;Backfilling&lt;/code&gt; phase when &lt;code&gt;IndexStatus&lt;/code&gt; is set to CREATING and &lt;code&gt;Backfilling&lt;/code&gt; is true. You can&#39;t delete the index that is being created when &lt;code&gt;IndexStatus&lt;/code&gt; is set to CREATING and &lt;code&gt;Backfilling&lt;/code&gt; is false. (This attribute does not appear for indexes that were created during a &lt;code&gt;CreateTable&lt;/code&gt; operation.)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;IndexName&lt;/code&gt; - The name of the global secondary index.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;IndexSizeBytes&lt;/code&gt; - The total size of the global secondary index, in bytes. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;IndexStatus&lt;/code&gt; - The current status of the global secondary index:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;CREATING&lt;/code&gt; - The index is being created.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;UPDATING&lt;/code&gt; - The index is being updated.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DELETING&lt;/code&gt; - The index is being deleted.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ACTIVE&lt;/code&gt; - The index is ready for use.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ItemCount&lt;/code&gt; - The number of items in the global secondary index. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;KeySchema&lt;/code&gt; - Specifies the complete index key schema. The attribute names in the key schema must be between 1 and 255 characters (inclusive). The key schema must begin with the same partition key as the table.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Projection&lt;/code&gt; - Specifies attributes that are copied (projected) from the table into the index. These are in addition to the primary key attributes and index key attributes, which are automatically projected. Each attribute specification is composed of:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ProjectionType&lt;/code&gt; - One of the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;KEYS_ONLY&lt;/code&gt; - Only the index and primary keys are projected into the index.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;INCLUDE&lt;/code&gt; - In addition to the attributes described in &lt;code&gt;KEYS_ONLY&lt;/code&gt;, the secondary index will include other non-key attributes that you specify.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ALL&lt;/code&gt; - All of the table attributes are projected into the index.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;NonKeyAttributes&lt;/code&gt; - A list of one or more non-key attribute names that are projected into the secondary index. The total count of attributes provided in &lt;code&gt;NonKeyAttributes&lt;/code&gt;, summed across all of the secondary indexes, must not exceed 100. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ProvisionedThroughput&lt;/code&gt; - The provisioned throughput settings for the global secondary index, consisting of read and write capacity units, along with data about increases and decreases. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If the table is in the &lt;code&gt;DELETING&lt;/code&gt; state, no information about indexes will be returned.&lt;/p&gt;
   * @return globalSecondaryIndexes
   */
  @javax.annotation.Nullable
  public List<GlobalSecondaryIndexDescription> getGlobalSecondaryIndexes() {
    return globalSecondaryIndexes;
  }

  public void setGlobalSecondaryIndexes(@javax.annotation.Nullable List<GlobalSecondaryIndexDescription> globalSecondaryIndexes) {
    this.globalSecondaryIndexes = globalSecondaryIndexes;
  }


  public TableDescription streamSpecification(@javax.annotation.Nullable StreamSpecification streamSpecification) {
    this.streamSpecification = streamSpecification;
    return this;
  }

  /**
   * The current DynamoDB Streams configuration for the table.
   * @return streamSpecification
   */
  @javax.annotation.Nullable
  public StreamSpecification getStreamSpecification() {
    return streamSpecification;
  }

  public void setStreamSpecification(@javax.annotation.Nullable StreamSpecification streamSpecification) {
    this.streamSpecification = streamSpecification;
  }


  public TableDescription latestStreamLabel(@javax.annotation.Nullable String latestStreamLabel) {
    this.latestStreamLabel = latestStreamLabel;
    return this;
  }

  /**
   * &lt;p&gt;A timestamp, in ISO 8601 format, for this stream.&lt;/p&gt; &lt;p&gt;Note that &lt;code&gt;LatestStreamLabel&lt;/code&gt; is not a unique identifier for the stream, because it is possible that a stream from another table might have the same timestamp. However, the combination of the following three elements is guaranteed to be unique:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Amazon Web Services customer ID&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Table name&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;StreamLabel&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
   * @return latestStreamLabel
   */
  @javax.annotation.Nullable
  public String getLatestStreamLabel() {
    return latestStreamLabel;
  }

  public void setLatestStreamLabel(@javax.annotation.Nullable String latestStreamLabel) {
    this.latestStreamLabel = latestStreamLabel;
  }


  public TableDescription latestStreamArn(@javax.annotation.Nullable String latestStreamArn) {
    this.latestStreamArn = latestStreamArn;
    return this;
  }

  /**
   * The Amazon Resource Name (ARN) that uniquely identifies the latest stream for this table.
   * @return latestStreamArn
   */
  @javax.annotation.Nullable
  public String getLatestStreamArn() {
    return latestStreamArn;
  }

  public void setLatestStreamArn(@javax.annotation.Nullable String latestStreamArn) {
    this.latestStreamArn = latestStreamArn;
  }


  public TableDescription globalTableVersion(@javax.annotation.Nullable String globalTableVersion) {
    this.globalTableVersion = globalTableVersion;
    return this;
  }

  /**
   * Represents the version of &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/GlobalTables.html\&quot;&gt;global tables&lt;/a&gt; in use, if the table is replicated across Amazon Web Services Regions.
   * @return globalTableVersion
   */
  @javax.annotation.Nullable
  public String getGlobalTableVersion() {
    return globalTableVersion;
  }

  public void setGlobalTableVersion(@javax.annotation.Nullable String globalTableVersion) {
    this.globalTableVersion = globalTableVersion;
  }


  public TableDescription replicas(@javax.annotation.Nullable List<ReplicaDescription> replicas) {
    this.replicas = replicas;
    return this;
  }

  public TableDescription addReplicasItem(ReplicaDescription replicasItem) {
    if (this.replicas == null) {
      this.replicas = new ArrayList<>();
    }
    this.replicas.add(replicasItem);
    return this;
  }

  /**
   * Represents replicas of the table.
   * @return replicas
   */
  @javax.annotation.Nullable
  public List<ReplicaDescription> getReplicas() {
    return replicas;
  }

  public void setReplicas(@javax.annotation.Nullable List<ReplicaDescription> replicas) {
    this.replicas = replicas;
  }


  public TableDescription restoreSummary(@javax.annotation.Nullable RestoreSummary restoreSummary) {
    this.restoreSummary = restoreSummary;
    return this;
  }

  /**
   * Contains details for the restore.
   * @return restoreSummary
   */
  @javax.annotation.Nullable
  public RestoreSummary getRestoreSummary() {
    return restoreSummary;
  }

  public void setRestoreSummary(@javax.annotation.Nullable RestoreSummary restoreSummary) {
    this.restoreSummary = restoreSummary;
  }


  public TableDescription ssEDescription(@javax.annotation.Nullable SSEDescription ssEDescription) {
    this.ssEDescription = ssEDescription;
    return this;
  }

  /**
   * The description of the server-side encryption status on the specified table.
   * @return ssEDescription
   */
  @javax.annotation.Nullable
  public SSEDescription getSsEDescription() {
    return ssEDescription;
  }

  public void setSsEDescription(@javax.annotation.Nullable SSEDescription ssEDescription) {
    this.ssEDescription = ssEDescription;
  }


  public TableDescription archivalSummary(@javax.annotation.Nullable ArchivalSummary archivalSummary) {
    this.archivalSummary = archivalSummary;
    return this;
  }

  /**
   * Contains information about the table archive.
   * @return archivalSummary
   */
  @javax.annotation.Nullable
  public ArchivalSummary getArchivalSummary() {
    return archivalSummary;
  }

  public void setArchivalSummary(@javax.annotation.Nullable ArchivalSummary archivalSummary) {
    this.archivalSummary = archivalSummary;
  }


  public TableDescription tableClassSummary(@javax.annotation.Nullable TableClassSummary tableClassSummary) {
    this.tableClassSummary = tableClassSummary;
    return this;
  }

  /**
   * Contains details of the table class.
   * @return tableClassSummary
   */
  @javax.annotation.Nullable
  public TableClassSummary getTableClassSummary() {
    return tableClassSummary;
  }

  public void setTableClassSummary(@javax.annotation.Nullable TableClassSummary tableClassSummary) {
    this.tableClassSummary = tableClassSummary;
  }


  public TableDescription deletionProtectionEnabled(@javax.annotation.Nullable Boolean deletionProtectionEnabled) {
    this.deletionProtectionEnabled = deletionProtectionEnabled;
    return this;
  }

  /**
   * Indicates whether deletion protection is enabled (true) or disabled (false) on the table.
   * @return deletionProtectionEnabled
   */
  @javax.annotation.Nullable
  public Boolean getDeletionProtectionEnabled() {
    return deletionProtectionEnabled;
  }

  public void setDeletionProtectionEnabled(@javax.annotation.Nullable Boolean deletionProtectionEnabled) {
    this.deletionProtectionEnabled = deletionProtectionEnabled;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TableDescription tableDescription = (TableDescription) o;
    return Objects.equals(this.attributeDefinitions, tableDescription.attributeDefinitions) &&
        Objects.equals(this.tableName, tableDescription.tableName) &&
        Objects.equals(this.keySchema, tableDescription.keySchema) &&
        Objects.equals(this.tableStatus, tableDescription.tableStatus) &&
        Objects.equals(this.creationDateTime, tableDescription.creationDateTime) &&
        Objects.equals(this.provisionedThroughput, tableDescription.provisionedThroughput) &&
        Objects.equals(this.tableSizeBytes, tableDescription.tableSizeBytes) &&
        Objects.equals(this.itemCount, tableDescription.itemCount) &&
        Objects.equals(this.tableArn, tableDescription.tableArn) &&
        Objects.equals(this.tableId, tableDescription.tableId) &&
        Objects.equals(this.billingModeSummary, tableDescription.billingModeSummary) &&
        Objects.equals(this.localSecondaryIndexes, tableDescription.localSecondaryIndexes) &&
        Objects.equals(this.globalSecondaryIndexes, tableDescription.globalSecondaryIndexes) &&
        Objects.equals(this.streamSpecification, tableDescription.streamSpecification) &&
        Objects.equals(this.latestStreamLabel, tableDescription.latestStreamLabel) &&
        Objects.equals(this.latestStreamArn, tableDescription.latestStreamArn) &&
        Objects.equals(this.globalTableVersion, tableDescription.globalTableVersion) &&
        Objects.equals(this.replicas, tableDescription.replicas) &&
        Objects.equals(this.restoreSummary, tableDescription.restoreSummary) &&
        Objects.equals(this.ssEDescription, tableDescription.ssEDescription) &&
        Objects.equals(this.archivalSummary, tableDescription.archivalSummary) &&
        Objects.equals(this.tableClassSummary, tableDescription.tableClassSummary) &&
        Objects.equals(this.deletionProtectionEnabled, tableDescription.deletionProtectionEnabled);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attributeDefinitions, tableName, keySchema, tableStatus, creationDateTime, provisionedThroughput, tableSizeBytes, itemCount, tableArn, tableId, billingModeSummary, localSecondaryIndexes, globalSecondaryIndexes, streamSpecification, latestStreamLabel, latestStreamArn, globalTableVersion, replicas, restoreSummary, ssEDescription, archivalSummary, tableClassSummary, deletionProtectionEnabled);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TableDescription {\n");
    sb.append("    attributeDefinitions: ").append(toIndentedString(attributeDefinitions)).append("\n");
    sb.append("    tableName: ").append(toIndentedString(tableName)).append("\n");
    sb.append("    keySchema: ").append(toIndentedString(keySchema)).append("\n");
    sb.append("    tableStatus: ").append(toIndentedString(tableStatus)).append("\n");
    sb.append("    creationDateTime: ").append(toIndentedString(creationDateTime)).append("\n");
    sb.append("    provisionedThroughput: ").append(toIndentedString(provisionedThroughput)).append("\n");
    sb.append("    tableSizeBytes: ").append(toIndentedString(tableSizeBytes)).append("\n");
    sb.append("    itemCount: ").append(toIndentedString(itemCount)).append("\n");
    sb.append("    tableArn: ").append(toIndentedString(tableArn)).append("\n");
    sb.append("    tableId: ").append(toIndentedString(tableId)).append("\n");
    sb.append("    billingModeSummary: ").append(toIndentedString(billingModeSummary)).append("\n");
    sb.append("    localSecondaryIndexes: ").append(toIndentedString(localSecondaryIndexes)).append("\n");
    sb.append("    globalSecondaryIndexes: ").append(toIndentedString(globalSecondaryIndexes)).append("\n");
    sb.append("    streamSpecification: ").append(toIndentedString(streamSpecification)).append("\n");
    sb.append("    latestStreamLabel: ").append(toIndentedString(latestStreamLabel)).append("\n");
    sb.append("    latestStreamArn: ").append(toIndentedString(latestStreamArn)).append("\n");
    sb.append("    globalTableVersion: ").append(toIndentedString(globalTableVersion)).append("\n");
    sb.append("    replicas: ").append(toIndentedString(replicas)).append("\n");
    sb.append("    restoreSummary: ").append(toIndentedString(restoreSummary)).append("\n");
    sb.append("    ssEDescription: ").append(toIndentedString(ssEDescription)).append("\n");
    sb.append("    archivalSummary: ").append(toIndentedString(archivalSummary)).append("\n");
    sb.append("    tableClassSummary: ").append(toIndentedString(tableClassSummary)).append("\n");
    sb.append("    deletionProtectionEnabled: ").append(toIndentedString(deletionProtectionEnabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("AttributeDefinitions", "TableName", "KeySchema", "TableStatus", "CreationDateTime", "ProvisionedThroughput", "TableSizeBytes", "ItemCount", "TableArn", "TableId", "BillingModeSummary", "LocalSecondaryIndexes", "GlobalSecondaryIndexes", "StreamSpecification", "LatestStreamLabel", "LatestStreamArn", "GlobalTableVersion", "Replicas", "RestoreSummary", "SSEDescription", "ArchivalSummary", "TableClassSummary", "DeletionProtectionEnabled"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TableDescription
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TableDescription.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TableDescription is not found in the empty JSON string", TableDescription.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TableDescription.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TableDescription` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("AttributeDefinitions") != null && !jsonObj.get("AttributeDefinitions").isJsonNull()) {
        JsonArray jsonArrayattributeDefinitions = jsonObj.getAsJsonArray("AttributeDefinitions");
        if (jsonArrayattributeDefinitions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("AttributeDefinitions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `AttributeDefinitions` to be an array in the JSON string but got `%s`", jsonObj.get("AttributeDefinitions").toString()));
          }

          // validate the optional field `AttributeDefinitions` (array)
          for (int i = 0; i < jsonArrayattributeDefinitions.size(); i++) {
            AttributeDefinition.validateJsonElement(jsonArrayattributeDefinitions.get(i));
          };
        }
      }
      if ((jsonObj.get("TableName") != null && !jsonObj.get("TableName").isJsonNull()) && !jsonObj.get("TableName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TableName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TableName").toString()));
      }
      if (jsonObj.get("KeySchema") != null && !jsonObj.get("KeySchema").isJsonNull()) {
        JsonArray jsonArraykeySchema = jsonObj.getAsJsonArray("KeySchema");
        if (jsonArraykeySchema != null) {
          // ensure the json data is an array
          if (!jsonObj.get("KeySchema").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `KeySchema` to be an array in the JSON string but got `%s`", jsonObj.get("KeySchema").toString()));
          }

          // validate the optional field `KeySchema` (array)
          for (int i = 0; i < jsonArraykeySchema.size(); i++) {
            KeySchemaElement.validateJsonElement(jsonArraykeySchema.get(i));
          };
        }
      }
      // validate the optional field `TableStatus`
      if (jsonObj.get("TableStatus") != null && !jsonObj.get("TableStatus").isJsonNull()) {
        TableStatus.validateJsonElement(jsonObj.get("TableStatus"));
      }
      // validate the optional field `ProvisionedThroughput`
      if (jsonObj.get("ProvisionedThroughput") != null && !jsonObj.get("ProvisionedThroughput").isJsonNull()) {
        ProvisionedThroughputDescription.validateJsonElement(jsonObj.get("ProvisionedThroughput"));
      }
      if ((jsonObj.get("TableArn") != null && !jsonObj.get("TableArn").isJsonNull()) && !jsonObj.get("TableArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TableArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TableArn").toString()));
      }
      if ((jsonObj.get("TableId") != null && !jsonObj.get("TableId").isJsonNull()) && !jsonObj.get("TableId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TableId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TableId").toString()));
      }
      // validate the optional field `BillingModeSummary`
      if (jsonObj.get("BillingModeSummary") != null && !jsonObj.get("BillingModeSummary").isJsonNull()) {
        BillingModeSummary.validateJsonElement(jsonObj.get("BillingModeSummary"));
      }
      if (jsonObj.get("LocalSecondaryIndexes") != null && !jsonObj.get("LocalSecondaryIndexes").isJsonNull()) {
        JsonArray jsonArraylocalSecondaryIndexes = jsonObj.getAsJsonArray("LocalSecondaryIndexes");
        if (jsonArraylocalSecondaryIndexes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("LocalSecondaryIndexes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `LocalSecondaryIndexes` to be an array in the JSON string but got `%s`", jsonObj.get("LocalSecondaryIndexes").toString()));
          }

          // validate the optional field `LocalSecondaryIndexes` (array)
          for (int i = 0; i < jsonArraylocalSecondaryIndexes.size(); i++) {
            LocalSecondaryIndexDescription.validateJsonElement(jsonArraylocalSecondaryIndexes.get(i));
          };
        }
      }
      if (jsonObj.get("GlobalSecondaryIndexes") != null && !jsonObj.get("GlobalSecondaryIndexes").isJsonNull()) {
        JsonArray jsonArrayglobalSecondaryIndexes = jsonObj.getAsJsonArray("GlobalSecondaryIndexes");
        if (jsonArrayglobalSecondaryIndexes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("GlobalSecondaryIndexes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `GlobalSecondaryIndexes` to be an array in the JSON string but got `%s`", jsonObj.get("GlobalSecondaryIndexes").toString()));
          }

          // validate the optional field `GlobalSecondaryIndexes` (array)
          for (int i = 0; i < jsonArrayglobalSecondaryIndexes.size(); i++) {
            GlobalSecondaryIndexDescription.validateJsonElement(jsonArrayglobalSecondaryIndexes.get(i));
          };
        }
      }
      // validate the optional field `StreamSpecification`
      if (jsonObj.get("StreamSpecification") != null && !jsonObj.get("StreamSpecification").isJsonNull()) {
        StreamSpecification.validateJsonElement(jsonObj.get("StreamSpecification"));
      }
      if ((jsonObj.get("LatestStreamLabel") != null && !jsonObj.get("LatestStreamLabel").isJsonNull()) && !jsonObj.get("LatestStreamLabel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LatestStreamLabel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LatestStreamLabel").toString()));
      }
      if ((jsonObj.get("LatestStreamArn") != null && !jsonObj.get("LatestStreamArn").isJsonNull()) && !jsonObj.get("LatestStreamArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LatestStreamArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LatestStreamArn").toString()));
      }
      if ((jsonObj.get("GlobalTableVersion") != null && !jsonObj.get("GlobalTableVersion").isJsonNull()) && !jsonObj.get("GlobalTableVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `GlobalTableVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("GlobalTableVersion").toString()));
      }
      if (jsonObj.get("Replicas") != null && !jsonObj.get("Replicas").isJsonNull()) {
        JsonArray jsonArrayreplicas = jsonObj.getAsJsonArray("Replicas");
        if (jsonArrayreplicas != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Replicas").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Replicas` to be an array in the JSON string but got `%s`", jsonObj.get("Replicas").toString()));
          }

          // validate the optional field `Replicas` (array)
          for (int i = 0; i < jsonArrayreplicas.size(); i++) {
            ReplicaDescription.validateJsonElement(jsonArrayreplicas.get(i));
          };
        }
      }
      // validate the optional field `RestoreSummary`
      if (jsonObj.get("RestoreSummary") != null && !jsonObj.get("RestoreSummary").isJsonNull()) {
        RestoreSummary.validateJsonElement(jsonObj.get("RestoreSummary"));
      }
      // validate the optional field `SSEDescription`
      if (jsonObj.get("SSEDescription") != null && !jsonObj.get("SSEDescription").isJsonNull()) {
        SSEDescription.validateJsonElement(jsonObj.get("SSEDescription"));
      }
      // validate the optional field `ArchivalSummary`
      if (jsonObj.get("ArchivalSummary") != null && !jsonObj.get("ArchivalSummary").isJsonNull()) {
        ArchivalSummary.validateJsonElement(jsonObj.get("ArchivalSummary"));
      }
      // validate the optional field `TableClassSummary`
      if (jsonObj.get("TableClassSummary") != null && !jsonObj.get("TableClassSummary").isJsonNull()) {
        TableClassSummary.validateJsonElement(jsonObj.get("TableClassSummary"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TableDescription.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TableDescription' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TableDescription> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TableDescription.class));

       return (TypeAdapter<T>) new TypeAdapter<TableDescription>() {
           @Override
           public void write(JsonWriter out, TableDescription value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TableDescription read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TableDescription given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TableDescription
   * @throws IOException if the JSON string is invalid with respect to TableDescription
   */
  public static TableDescription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TableDescription.class);
  }

  /**
   * Convert an instance of TableDescription to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

